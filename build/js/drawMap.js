$(document).ready(function(){function t(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"50",contentAlign:"flex-start",checkboxState:"false",defaultOption:"false",UserOption:"false",StartIcon:"",RouteStartIconColor:"rgba(0, 0, 0, 1)",RouteStartIconSize:"8"};if(e[t])return e[t]}function e(t,e){return t.id-e.id}function a(t,e){return t.pointId-e.pointId}JSON.parse(localStorage.getItem("Settings"));$(".modal").modal(),$("ul.tabs").tabs("select_tab","tab_2"),$("#menu").on("click",function(){$(this).hasClass(".active")?($(this).removeClass("active"),$(".tap-target").tapTarget("close")):($(this).addClass("active"),$(".tap-target").tapTarget("open"))}),$(".button-collapse").sideNav({menuWidth:300,edge:"left",closeOnClick:!1,draggable:!0,onOpen:function(){},onClose:function(){$("#slide-out").css("transform","translateX(-100%)"),$("div").remove("#sidenav-overlay"),$(".button-collapse").sideNav("hide"),$("#slide-out").css("transform","translateX(-100%)"),console.log("kek")}}),$(".collapsible").collapsible(),$(".side-nav").resizable({handles:"e",maxWidth:1200,minWidth:300});var o=document.getElementById("map"),r=JSON.parse(localStorage.getItem("map"));$("#map").attr("data",r),o.addEventListener("load",function(){var r=o.contentDocument,n=r.documentElement,l=n.getElementById("mapPaths"),s=l.getElementsByTagName("path"),i=document.createElementNS("http://www.w3.org/2000/svg","g");$(i).attr("id","wholeSvgGroup"),$("input[name=light-trigger]").attr("data-light","lightOff"),$("input[name=light-trigger]").prop("checked",!1);for(var c=0;c<s.length;c++)s[c].style.fill=t("mapColor"),s[c].style.stroke=t("mapStrokeColor");var p=JSON.parse(localStorage.getItem("path"));if(p){var d=document.createElementNS("http://www.w3.org/2000/svg","path");$(d).attr("d",p),$(d).attr("fill","transparent"),$(d).attr("stroke",t("mapRouteColor")),$(d).attr("stroke-width",t("routeBorderWidth")),$(d).attr("stroke-linecap","round")}Snap.plugin(function(t,e,a,o){a.prototype.circlePath=function(t,e,a){var o="M"+t+","+e;return o+="m"+-a+",0",o+="a"+a+","+a+" 0 1,0 "+2*a+",0",o+="a"+a+","+a+" 0 1,0 "+-2*a+",0",this.path(o,t,e)}});var g=document.createElementNS("http://www.w3.org/2000/svg","g");g.id="pathGroup",g.append(d),i.append(g),i.append(l),n.append(i);var m=Snap(g),h=JSON.parse(localStorage.getItem("circlesCoords")),f=d.getTotalLength(),u=(JSON.parse(localStorage.getItem("StartRouteIcon")),JSON.parse(localStorage.getItem("StartRouteIcon"))),S=(new DOMParser).parseFromString(u,"text/xml").documentElement,v=$(S).attr("data-offset-x"),I=$(S).attr("data-offset-y"),y=$(S).attr("data-scale"),N=document.createElementNS("http://www.w3.org/2000/svg","g");"true"==t("UserOption")&&u&&($(S).attr({fill:t("RouteStartIconColor"),transform:y}),$(N).attr("transform","translate("+(d.getPointAtLength(1).x-t("RouteStartIconSize")/v)+" "+(d.getPointAtLength(1).y-t("RouteStartIconSize")/I)+") scale("+t("RouteStartIconSize")/100+")"),N.append(S),g.append(N),i.append(g));for(var b=[],w=(JSON.parse(localStorage.getItem("PointsContent")),0);w<h.length;w++)b[w]=h[w];var C=1;for(c=0;c<f;c++)for(var k=(q=d.getPointAtLength(c)).x,x=q.y,P=0;P<b.length;P++)if(Math.abs(Math.round(k-b[P].cx))<=8&&Math.abs(Math.round(x-b[P].cy))<=8){for(var E=0;E<h.length;E++)Math.abs(Math.round(h[E].cx-b[P].cx))<=4&&Math.abs(Math.round(h[E].cy-b[P].cy))<=4&&(h[E].id=C++);b.splice(P,1)}h.sort(e),localStorage.setItem("circlesCoords",JSON.stringify(h));h=JSON.parse(localStorage.getItem("circlesCoords"));var O=[];$.each(h,function(e,a){var o={cx:0,cy:0,r:1},r=m.circlePath(this.cx,this.cy,this.r).attr({fill:t("mapPointsColor"),stroke:t("mapPointsBorderColor"),"stroke-width":t("pointsBorderWidth"),id:a.id,"data-time":a.time}),n=Snap.path.intersection(r,$(d).attr("d"));0==n.length?(alert("Please, return to the previous step and draw points right on the route line"),document.location.replace("http://127.0.0.1:8080/")):(o.cx=n[0].x,o.cy=n[0].y),O.push(o),n.forEach(function(t){m.circle(t.x,t.y,1)}),localStorage.setItem("points",JSON.stringify(O))});var B=r.getElementsByTagName("circle");for(c=0;c<B.length;c++)B[c].style.fill="transparent";if("true"==t("checkboxState")&&"true"==t("defaultOption")){var J=document.createElementNS("http://www.w3.org/2000/svg","circle");$(J).attr({cx:d.getPointAtLength(1).x,cy:d.getPointAtLength(1).y,r:t("pointsRadius"),stroke:t("mapPointsBorderColor"),fill:t("mapPointsColor"),"stroke-width":t("pointsBorderWidth")}),n.append(J)}if(null!=localStorage.getItem("PointsContent"))var M=JSON.parse(localStorage.getItem("PointsContent"));else M=[];for(c=0;c<h.length;c++){var R=r.getElementById(h[c].id),z=document.createElementNS("http://www.w3.org/2000/svg","g"),L=document.createElementNS("http://www.w3.org/2000/svg","text");$(L).attr({x:h[c].cx,y:h[c].cy+20,"font-size":12,"font-style":"italic",fill:"#ccccccc",class:"cityName"}),z.append(R),z.append(L),g.append(z),i.append(g),n.append(i);var T=h[c].time;for(P=0;P<M.length;P++){var W=M[P].data;if(M[P].pointId==T){M[P].pointId;if(0!=W.length){var A=r.getElementById(h[c].id),F=$(A).parent().find("text");M[P].cityName&&$(F).text(M[P].cityName),$(A).css("fill","#990033")}}}$(R).addClass("button-collapse"),$(R).attr("data-activates","slide-out"),$(R).attr("href","#"),R.style.cursor="pointer",$(R).mouseenter(function(){$(this).css("transition","0.5s"),$(this).css("stroke-width","6px"),$(this).css("stroke",t("mapPointsBorderColor"))}).mouseout(function(){$(this).css("transition","0.5s"),$(this).css("stroke-width","3px"),$(this).css("stroke",t("mapPointsBorderColor"))});var D,H,G={zoom:100,top:0,bottom:0,left:0,right:0},U=Snap(i),X=(Snap(g),JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:""});if(console.log(X.transform.length),X.transform){var _=X.transform,Y=_.match(/[+-]?\d+(\.\d+)?/g).map(function(t){return parseFloat(t)});console.log(Y),scaleImg=Y[0],D=Y[1],H=Y[2],console.log(scaleImg,D,H),U.attr("transform","scale("+scaleImg+") translate("+D+" "+H+")")}X.top=parseInt(X.top),X.left=parseInt(X.left),R.addEventListener("click",function(){$(".button-collapse").sideNav("show"),$(".button-collapse").off("click").sideNav();var e=parseInt(this.id),o=$(this).attr("data-time");document.getElementById("pointIndex").innerHTML=e;var r=this,n=$(this).attr("data-time"),s=JSON.parse(localStorage.getItem("PointsContent"))||[],i=JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:""};if(console.log(U),i.transform.length>0){var c=(_=i.transform).match(/[+-]?\d+(\.\d+)?/g).map(function(t){return parseFloat(t)});console.log(c),p=c[0],g=c[1],d=c[2]}if(s[e-1])p=s[e-1].zoom,d=s[e-1].top,g=s[e-1].left;else{var p=1,d=0,g=0;$("#pointName").html(""),U.animate({transform:"scale("+p+") translate("+d+" "+g+")"},200)}if($("#plus").bind("click",function(){p+=.1,G.zoom=p,console.log(l),U.animate({transform:"scale("+p+") translate("+g+" "+d+")"},300)}),$("#minus").bind("click",function(){(p-=.1)<=1&&(p=1),G.zoom=p,U.animate({transform:"scale("+p+") translate("+g+" "+d+")"},300)}),$("#moveLeft").bind("click",function(){g+=20,G.left=g,U.animate({transform:"scale("+p+") translate("+g+" "+d+")"},300)}),$("#moveRight").bind("click",function(){g-=20,G.left=g,U.animate({transform:"scale("+p+") translate("+g+" "+d+")"},300)}),$("#moveTop").bind("click",function(){d+=20,G.top=d,U.animate({transform:"scale("+p+") translate("+g+" "+d+")"},300)}),$("#moveBottom").bind("click",function(){d-=20,G.top=d,U.animate({transform:"scale("+p+") translate("+g+" "+d+")"},300)}),null!=localStorage.getItem("PointsContent")){for(var m,h=0;h<s.length;h++){var f=s[h].pointId==o;if(s[h].pointId==o){U.animate({transform:"scale("+parseFloat(s[h].zoom)+") translate("+s[h].left+" "+s[h].top+")"},300);var u=s[h].cityName}f&&(m=s[h].data)}$("#pointName").val(u),editor.setData(m)}document.getElementById("SavePointContent").onclick=function(){var e={pointId:0,cityName:"",zoom:p,left:g,top:d,slider:"false",data:""},o=$("#pointName").val();e.pointId=n,e.cityName=o,e.data=editor.getData();for(var l=0;l<M.length;l++)M[l].pointId==n&&M.splice(l,1);if(0==e.data.length)Materialize.toast("No data in point!",2e3);else{console.log(e),M.push(e);var s=$(r).parent().find("text");$(s).text(o),Materialize.toast("Your data is saved!",2e3)}M.sort(a),localStorage.setItem("PointsContent",JSON.stringify(M));var i=$("#sidenav-overlay");$(i).css("background-color","none"),$(i).remove(),e.data.length>0?$(r).css("fill","#990033"):0==e.data.length&&$(r).css("fill",t("mapPointsColor")),$(".button-collapse").sideNav("hide")}})}f=d.getTotalLength();var j=[];for(c=0;c<f;c++){var q;for(k=(q=d.getPointAtLength(c)).x,x=q.y,P=0;P<O.length;P++)Math.abs(Math.round(k-O[P].cx))<=0&&Math.abs(Math.round(x-O[P].cy))<=0&&j.push(c)}if(j.length!=O.length)for(c=0;c<j.length;c++)j[c+1]-j[c]==1&&j.splice(c,1);localStorage.setItem("stopsAtLength",JSON.stringify(j)),O.length!==j.length?console.log("HERE IS THE DIFFERENCE: 1st array length = "+O.length+", 2nd arr length= "+j.length):console.log("no DIFFERENCE between arr lengths")},!1);JSON.parse(localStorage.getItem("mapStyleProperties"));$("body").css("background-color",t("bodyBackgroundColor"))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
