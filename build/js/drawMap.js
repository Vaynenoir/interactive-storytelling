$(document).ready(function(){function t(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"100",contentAlign:"flex-start",checkboxState:"false",defaultOption:"false",UserOption:"false",StartIcon:"",RouteStartIconColor:"rgba(0, 0, 0, 1)",RouteStartIconSize:"8"};if(e[t])return e[t]}function e(t,e){return t.id-e.id}function o(t,e){return t.pointId-e.pointId}$("ul.tabs").tabs("select_tab","tab_2"),$("#menu").on("click",function(){$(this).hasClass(".active")?($(this).removeClass("active"),$(".tap-target").tapTarget("close")):($(this).addClass("active"),$(".tap-target").tapTarget("open"))}),$(".button-collapse").sideNav({menuWidth:300,edge:"left",closeOnClick:!1,draggable:!0,onOpen:function(){},onClose:function(){$("#slide-out").css("transform","translateX(-100%)"),$("div").remove("#sidenav-overlay"),$(".button-collapse").sideNav("hide"),$("#slide-out").css("transform","translateX(-100%)"),console.log("kek")}}),$(".collapsible").collapsible(),$(".side-nav").resizable({handles:"e",maxWidth:1200,minWidth:300});var a=document.getElementById("map"),n=JSON.parse(localStorage.getItem("map"));$("#map").attr("data",n),a.addEventListener("load",function(){for(var n=a.contentDocument,r=n.documentElement,l=r.getElementById("mapPaths").getElementsByTagName("path"),s=(JSON.parse(localStorage.getItem("SavedMapColors")),0);s<l.length;s++)l[s].style.fill=t("mapColor"),l[s].style.stroke=t("mapStrokeColor");var i=JSON.parse(localStorage.getItem("path"));if(i){var c=document.createElementNS("http://www.w3.org/2000/svg","path");$(c).attr("d",i),$(c).attr("fill","transparent"),$(c).attr("stroke",t("mapRouteColor")),$(c).attr("stroke-width",t("routeBorderWidth")),$(c).attr("stroke-linecap","round")}Snap.plugin(function(t,e,o,a){o.prototype.circlePath=function(t,e,o){var a="M"+t+","+e;return a+="m"+-o+",0",a+="a"+o+","+o+" 0 1,0 "+2*o+",0",a+="a"+o+","+o+" 0 1,0 "+-2*o+",0",this.path(a,t,e)}});var p=document.createElementNS("http://www.w3.org/2000/svg","g");p.id="pathGroup",p.append(c),r.append(p);var d=Snap(p),g=JSON.parse(localStorage.getItem("circlesCoords")),m=c.getTotalLength(),h=(JSON.parse(localStorage.getItem("StartRouteIcon")),JSON.parse(localStorage.getItem("StartRouteIcon")));console.log(h);var f=(new DOMParser).parseFromString(h,"text/xml");console.log(f.documentElement);var u=f.documentElement,v=$(u).attr("data-offset-x"),S=$(u).attr("data-offset-y"),I=$(u).attr("data-scale"),y=document.createElementNS("http://www.w3.org/2000/svg","g");"true"==t("UserOption")&&t("StartIcon").length>0&&($(u).attr({fill:t("RouteStartIconColor"),transform:I}),console.log(u)),$(y).attr("transform","translate("+(c.getPointAtLength(1).x-t("RouteStartIconSize")/v)+" "+(c.getPointAtLength(1).y-t("RouteStartIconSize")/S)+") scale("+t("RouteStartIconSize")/100+")"),y.append(u),r.append(y);for(var b=[],N=(JSON.parse(localStorage.getItem("PointsContent")),0);N<g.length;N++)b[N]=g[N];var C=1;for(s=0;s<m;s++)for(var k=(U=c.getPointAtLength(s)).x,E=U.y,w=0;w<b.length;w++)if(Math.abs(Math.round(k-b[w].cx))<=8&&Math.abs(Math.round(E-b[w].cy))<=8){for(var x=0;x<g.length;x++)Math.abs(Math.round(g[x].cx-b[w].cx))<=4&&Math.abs(Math.round(g[x].cy-b[w].cy))<=4&&(g[x].id=C++);b.splice(w,1)}g.sort(e),localStorage.setItem("circlesCoords",JSON.stringify(g));g=JSON.parse(localStorage.getItem("circlesCoords"));var B=[];$.each(g,function(e,o){var a={cx:0,cy:0,r:1},n=d.circlePath(this.cx,this.cy,this.r).attr({fill:t("mapPointsColor"),stroke:t("mapPointsBorderColor"),"stroke-width":t("pointsBorderWidth"),id:o.id,"data-time":o.time}),r=Snap.path.intersection(n,$(c).attr("d"));0==r.length?(alert("Please, return to the previous step and draw points right on the route line"),document.location.replace("http://127.0.0.1:8080/")):(a.cx=r[0].x,a.cy=r[0].y),B.push(a),r.forEach(function(t){d.circle(t.x,t.y,1)}),localStorage.setItem("points",JSON.stringify(B))});var P=n.getElementsByTagName("circle");for(s=0;s<P.length;s++)P[s].style.fill="transparent";if("true"==t("checkboxState")&&"true"==t("defaultOption")){var O=document.createElementNS("http://www.w3.org/2000/svg","circle");$(O).attr({cx:c.getPointAtLength(1).x,cy:c.getPointAtLength(1).y,r:t("pointsRadius"),stroke:t("mapPointsBorderColor"),fill:t("mapPointsColor"),"stroke-width":t("pointsBorderWidth")}),console.log($(O)),r.append(O)}if(null!=localStorage.getItem("PointsContent"))var z=JSON.parse(localStorage.getItem("PointsContent"));else z=[];for(s=0;s<g.length;s++){var M=n.getElementById(g[s].id),R=document.createElementNS("http://www.w3.org/2000/svg","g"),J=document.createElementNS("http://www.w3.org/2000/svg","text");$(J).attr({x:g[s].cx,y:g[s].cy+20,"font-size":12,"font-style":"italic",fill:"#ccccccc",class:"cityName"}),R.append(M),R.append(J),r.append(R);var L=g[s].time;for(w=0;w<z.length;w++){var T=z[w].data;if(z[w].pointId==L){z[w].pointId;if(0!=T.length){var W=n.getElementById(g[s].id),A=$(W).parent().find("text");console.log(A),z[w].cityName&&(console.log(z[w].cityName),$(A).text(z[w].cityName)),console.log(g[s].id),$(W).css("fill","#990033")}}}$(M).addClass("button-collapse"),$(M).attr("data-activates","slide-out"),$(M).attr("href","#"),M.style.cursor="pointer",$(M).mouseenter(function(){$(this).css("transition","0.5s"),$(this).css("stroke-width","6px"),$(this).css("stroke",t("mapPointsBorderColor"))}).mouseout(function(){$(this).css("transition","0.5s"),$(this).css("stroke-width","3px"),$(this).css("stroke",t("mapPointsBorderColor"))});var D={zoom:100,top:0,bottom:0,left:0,right:0};console.log(z);var F=JSON.parse(localStorage.getItem("mapStyleProperties"))||{};F.top=parseInt(F.top),F.left=parseInt(F.left),console.log(F.top,F.left),M.addEventListener("click",function(){$(".button-collapse").sideNav("show"),$(".button-collapse").off("click").sideNav();var e=parseInt(this.id),a=$(this).attr("data-time");document.getElementById("pointIndex").innerHTML=e;var n=this,r=$(this).attr("data-time"),l=JSON.parse(localStorage.getItem("PointsContent"))||[];if(l[e-1])console.log(l[e-1].cityName),s=l[e-1].zoom,F.top=l[e-1].top,F.left=l[e-1].left;else{var s=100;F.top=0,F.left=0,$("#pointName").html(""),$(".mapbg").animate({zoom:s+"%",top:F.top+"%",left:F.left+"%"})}if(D.zoom=s,D.top=F.top,D.left=F.left,$("#plus").bind("click",function(){s+=3,D.zoom=s,$(".mapbg").css("zoom",s+"%")}),$("#minus").bind("click",function(){(s-=3)<=100&&(s=100),D.zoom=s,$(".mapbg").css("zoom",s+"%")}),$("#moveLeft").bind("click",function(){F.left+=2,D.left=F.left,$(".mapbg").css("left",F.left+"%")}),$("#moveRight").bind("click",function(){F.left-=2,D.left=F.left,$(".mapbg").css("left",F.left+"%")}),$("#moveTop").bind("click",function(){F.top+=2,D.top=F.top,$(".mapbg").css("top",F.top+"%")}),$("#moveBottom").bind("click",function(){F.top-=2,D.top=F.top,$(".mapbg").css("top",F.top+"%")}),null!=localStorage.getItem("PointsContent")){for(var i,c=0;c<l.length;c++){var p=l[c].pointId==a;if(l[c].pointId==a){$("#pointZoom").val(l[c].zoom),$("#pointTop").val(l[c].top),$("#pointBottom").val(l[c].bottom),$("#pointLeft").val(l[c].left),$("#pointRight").val(l[c].right),$(".mapbg").animate({zoom:l[c].zoom+"%",top:l[c].top+"%",left:l[c].left+"%"});var d=l[c].cityName}p&&(i=l[c].data)}$("#pointName").val(d),editor.setData(i)}document.getElementById("SavePointContent").onclick=function(){var e={pointId:0,cityName:"",zoom:D.zoom,top:D.top,left:D.left,data:""},a=(parseInt(document.getElementById("pointZoom").value),parseInt(document.getElementById("pointTop").value),parseInt(document.getElementById("pointBottom").value),parseInt(document.getElementById("pointLeft").value),parseInt(document.getElementById("pointRight").value),$("#pointName").val());e.pointId=r,e.cityName=a,e.data=editor.getData();for(var l=0;l<z.length;l++)z[l].pointId==r&&z.splice(l,1);if(0==e.data.length)Materialize.toast("No data in point!",2e3);else{console.log(e),z.push(e);var s=$(n).parent().find("text");$(s).text(a),Materialize.toast("Your data is saved!",2e3)}z.sort(o),localStorage.setItem("PointsContent",JSON.stringify(z));var i=$("#sidenav-overlay");$(i).css("background-color","none"),$(i).remove(),e.data.length>0?$(n).css("fill","#990033"):0==e.data.length&&$(n).css("fill",t("mapPointsColor")),$(".button-collapse").sideNav("hide")}})}m=c.getTotalLength();var H=[];for(s=0;s<m;s++){var U;for(k=(U=c.getPointAtLength(s)).x,E=U.y,w=0;w<B.length;w++)Math.abs(Math.round(k-B[w].cx))<=0&&Math.abs(Math.round(E-B[w].cy))<=0&&H.push(s)}if(H.length!=B.length)for(s=0;s<H.length;s++)H[s+1]-H[s]==1&&H.splice(s,1);localStorage.setItem("stopsAtLength",JSON.stringify(H)),B.length!==H.length?console.log("HERE IS THE DIFFERENCE: 1st array length = "+B.length+", 2nd arr length= "+H.length):console.log("no DIFFERENCE between arr lengths")},!1);var r=JSON.parse(localStorage.getItem("mapStyleProperties"));$(".mapbg").css("background-color",t("bodyBackgroundColor")),$("body").css("background-color",t("bodyBackgroundColor")),$.each(r,function(t,e){$(".mapbg").css(t,e)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
