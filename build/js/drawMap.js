$(document).ready(function(){function t(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"50",contentAlign:"flex-start",checkboxState:"false",defaultOption:"false",UserOption:"false",StartIcon:"",RouteStartIconColor:"rgba(0, 0, 0, 1)",RouteStartIconSize:"8"};if(e[t])return e[t]}function e(t,e){return t.id-e.id}function a(t,e){return t.pointId-e.pointId}JSON.parse(localStorage.getItem("Settings"));$(".modal").modal(),$("ul.tabs").tabs("select_tab","tab_2"),$("#menu").on("click",function(){$(this).hasClass(".active")?($(this).removeClass("active"),$(".tap-target").tapTarget("close")):($(this).addClass("active"),$(".tap-target").tapTarget("open"))}),$(".button-collapse").sideNav({menuWidth:323,edge:"left",closeOnClick:!1,draggable:!0,onOpen:function(){},onClose:function(){$("#slide-out").css("transform","translateX(-100%)"),$("div").remove("#sidenav-overlay"),$(".button-collapse").sideNav("hide"),$("#slide-out").css("transform","translateX(-100%)")}}),$(".collapsible").collapsible(),$(".side-nav").resizable({handles:"e",maxWidth:1200,minWidth:300});var o=document.getElementById("map"),n=JSON.parse(localStorage.getItem("map"));$("#map").attr("data",n),o.addEventListener("load",function(){var n=o.contentDocument,r=n.documentElement,l=r.getElementById("mapPaths"),s=l.getElementsByTagName("path"),i=document.createElementNS("http://www.w3.org/2000/svg","g");$(i).attr("id","wholeSvgGroup"),$("input[name=light-trigger]").attr("data-light","lightOff"),$("input[name=light-trigger]").prop("checked",!1);for(var c=0;c<s.length;c++)s[c].style.fill=t("mapColor"),s[c].style.stroke=t("mapStrokeColor");var d=JSON.parse(localStorage.getItem("path"));if(d){var g=document.createElementNS("http://www.w3.org/2000/svg","path");$(g).attr("d",d),$(g).attr("fill","transparent"),$(g).attr("stroke",t("mapRouteColor")),$(g).attr("stroke-width",t("routeBorderWidth")),$(g).attr("stroke-linecap","round")}Snap.plugin(function(t,e,a,o){a.prototype.circlePath=function(t,e,a){var o="M"+t+","+e;return o+="m"+-a+",0",o+="a"+a+","+a+" 0 1,0 "+2*a+",0",o+="a"+a+","+a+" 0 1,0 "+-2*a+",0",this.path(o,t,e)}});var p=document.createElementNS("http://www.w3.org/2000/svg","g");p.id="pathGroup",p.append(g),i.append(p),i.append(l),r.append(i);var m=Snap(p),h=JSON.parse(localStorage.getItem("circlesCoords")),u=g.getTotalLength(),f=(JSON.parse(localStorage.getItem("StartRouteIcon")),JSON.parse(localStorage.getItem("StartRouteIcon"))),v=(new DOMParser).parseFromString(f,"text/xml").documentElement,S=$(v).attr("data-offset-x"),b=$(v).attr("data-offset-y"),I=$(v).attr("data-scale"),y=document.createElementNS("http://www.w3.org/2000/svg","g");"true"==t("UserOption")&&f&&($(v).attr({fill:t("RouteStartIconColor"),transform:I}),$(y).attr("transform","translate("+(g.getPointAtLength(1).x-t("RouteStartIconSize")/S)+" "+(g.getPointAtLength(1).y-t("RouteStartIconSize")/b)+") scale("+t("RouteStartIconSize")/100+")"),y.append(v),p.append(y),i.append(p));for(var N=[],w=(JSON.parse(localStorage.getItem("PointsContent")),0);w<h.length;w++)N[w]=h[w];var k=1;for(c=0;c<u;c++)for(var C=(V=g.getPointAtLength(c)).x,O=V.y,P=0;P<N.length;P++)if(Math.abs(Math.round(C-N[P].cx))<=8&&Math.abs(Math.round(O-N[P].cy))<=8){for(var x=0;x<h.length;x++)Math.abs(Math.round(h[x].cx-N[P].cx))<=4&&Math.abs(Math.round(h[x].cy-N[P].cy))<=4&&(h[x].id=k++);N.splice(P,1)}h.sort(e),console.log(g);var E=g.getPointAtLength(g.getTotalLength()),B=(new Date).getTime();if(console.log(h),h[h.length-1].cx==E.x&&h[h.length-1].cy==E.y)console.log(h[h.length-1]);else{var J={cx:E.x,cy:E.y,id:h.length,r:t("pointsRadius"),time:B};console.log(J),h.push(J)}localStorage.setItem("circlesCoords",JSON.stringify(h));h=JSON.parse(localStorage.getItem("circlesCoords"));var _=[];$.each(h,function(e,a){var o={cx:0,cy:0,r:1},n=m.circlePath(this.cx,this.cy,this.r).attr({fill:t("mapPointsColor"),stroke:t("mapPointsBorderColor"),"stroke-width":t("pointsBorderWidth"),id:a.id,"data-time":a.time}),r=Snap.path.intersection(n,$(g).attr("d"));0==r.length?(alert("Please, return to the previous step and draw points right on the route line"),document.location.replace("http://127.0.0.1:8080/")):(o.cx=r[0].x,o.cy=r[0].y),_.push(o),r.forEach(function(t){m.circle(t.x,t.y,1)}),localStorage.setItem("points",JSON.stringify(_))});var L=n.getElementsByTagName("circle");for(c=0;c<L.length;c++)L[c].style.fill="transparent";if("true"==t("checkboxState")&&"true"==t("defaultOption")){var M=document.createElementNS("http://www.w3.org/2000/svg","circle");$(M).attr({cx:g.getPointAtLength(1).x,cy:g.getPointAtLength(1).y,r:t("pointsRadius"),stroke:t("mapPointsBorderColor"),fill:t("mapPointsColor"),"stroke-width":t("pointsBorderWidth")}),r.append(M)}if(null!=localStorage.getItem("PointsContent"))var z=JSON.parse(localStorage.getItem("PointsContent"));else z=[];for(c=0;c<h.length;c++){var R=n.getElementById(h[c].id),T=document.createElementNS("http://www.w3.org/2000/svg","g"),A=document.createElementNS("http://www.w3.org/2000/svg","text");$(A).attr({x:h[c].cx,y:h[c].cy+20,"font-size":12,"font-style":"italic",fill:"#ccccccc",class:"cityName"}),T.append(R),T.append(A),p.append(T),i.append(p),r.append(i);var W=h[c].time;for(P=0;P<z.length;P++){var j=z[P].data;if(z[P].pointId==W){z[P].pointId;if(0!=j.length){var D=n.getElementById(h[c].id),F=$(D).parent().find("text");z[P].cityName&&$(F).text(z[P].cityName),$(D).css("fill","#990033")}}}$(R).addClass("button-collapse"),$(R).attr("data-activates","slide-out"),$(R).attr("href","#"),R.style.cursor="pointer",$(R).mouseenter(function(){$(this).css("transition","0.5s"),$(this).css("stroke-width","6px"),$(this).css("stroke",t("mapPointsBorderColor"))}).mouseout(function(){$(this).css("transition","0.5s"),$(this).css("stroke-width","3px"),$(this).css("stroke",t("mapPointsBorderColor"))});var X,G,Q={zoom:100,top:0,bottom:0,left:0,right:0},U=Snap(i),q=(Snap(p),JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:""});if(q.transform){var H=q.transform,Y=H.match(/[+-]?\d+(\.\d+)?/g).map(function(t){return parseFloat(t)});scaleImg=Y[0],X=Y[1],G=Y[2],U.attr("transform","scale("+scaleImg+") translate("+X+" "+G+")")}q.top=parseInt(q.top),q.left=parseInt(q.left),R.addEventListener("click",function(){function e(t,e){t.addEventListener("load",function(){for(var a=t.contentDocument.documentElement.querySelector("#transport"),o=new XMLSerializer,n=a.getElementsByTagName("path"),r=0;r<n.length;r++)n[r].style.fill=e;document.getElementById("subPathIconObj");var l=o.serializeToString(a);b.icon=l,console.log(S),$("input[name=color]").change(function(t){$("option:selected",this);var e=this.value,a=this.name;b[a]=e,console.log(b[a]);for(var o=0;o<n.length;o++)n[o].style.fill=b.color})})}$(".button-collapse").sideNav("show"),$(".button-collapse").off("click").sideNav();var o=parseInt(this.id),n=$(this).attr("data-time");document.getElementById("pointIndex").innerHTML=o;var r=this,l=$(this).attr("data-time"),s=JSON.parse(localStorage.getItem("PointsContent"))||[],i=JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:""};if(i.transform.length>0){var c=(H=i.transform).match(/[+-]?\d+(\.\d+)?/g).map(function(t){return parseFloat(t)});d=c[0],p=c[1],g=c[2]}if(s[o-1])d=s[o-1].zoom,g=s[o-1].top,p=s[o-1].left;else{var d=1,g=0,p=0;$("#pointName").html(""),$("#point_name_label").removeClass(),U.animate({transform:"scale("+d+") translate("+g+" "+p+")"},200)}if($("#plus").bind("click",function(){d+=.1,Q.zoom=d,U.animate({transform:"scale("+d+") translate("+p+" "+g+")"},300)}),$("#minus").bind("click",function(){(d-=.1)<=1&&(d=1),Q.zoom=d,U.animate({transform:"scale("+d+") translate("+p+" "+g+")"},300)}),$("#moveLeft").bind("click",function(){p+=20,Q.left=p,U.animate({transform:"scale("+d+") translate("+p+" "+g+")"},300)}),$("#moveRight").bind("click",function(){p-=20,Q.left=p,U.animate({transform:"scale("+d+") translate("+p+" "+g+")"},300)}),$("#moveTop").bind("click",function(){g+=20,Q.top=g,U.animate({transform:"scale("+d+") translate("+p+" "+g+")"},300)}),$("#moveBottom").bind("click",function(){g-=20,Q.top=g,U.animate({transform:"scale("+d+") translate("+p+" "+g+")"},300)}),null!=localStorage.getItem("PointsContent")){console.log("kek");for(var m,u=0;u<s.length;u++){var f=s[u].pointId==n;if(s[u].pointId==n){U.animate({transform:"scale("+parseFloat(s[u].zoom)+") translate("+s[u].left+" "+s[u].top+")"},300),console.log(s[u].cityName);var v=s[u].cityName;console.log(v)}f&&(m=s[u].data)}console.log(v),v?($("#pointName").val(v),console.log($("#pointName").closest("label")),$("#point_name_label").addClass("active")):($("#pointName").val(""),$("#point_name_label").removeClass("active")),editor.setData(m)}var S=JSON.parse(localStorage.getItem("subpathIcons"))||[],b={pointId:"",icon:"",color:"",size:5,icon_src:""};$("input[name=showIcon]").prop("checked",!1),$("#settings_btn").attr("disabled","disabled");for(var I=0;I<S.length;I++)if(parseInt(S[I].pointId)==o){$("input[name=showIcon]").prop("checked","checked"),$("#settings_btn").removeAttr("disabled"),console.log($("input[name=showIcon]").attr("checked"));break}$("#icon_switch").on("click",function(){if($("input[name=showIcon]").is(":checked"))$("input[name=showIcon]").attr("checked",!0),$("#settings_btn").removeAttr("disabled");else{$("input[name=showIcon]").attr("checked",!1),$("#settings_btn").attr("disabled","disabled");for(var t=0;t<S.length;t++)parseInt(S[t].pointId)==o&&S.splice(t,1);S.sort(a),localStorage.setItem("subpathIcons",JSON.stringify(S))}}),$("#settings_btn").on("click",function(){$("#modal2").modal("open")}),$(".modal2").modal({ready:function(){$("input[name=light-trigger]").attr("data-light",!1)}}),$(".modal2").modal({ready:function(){var t=JSON.parse(localStorage.getItem("subpathIcons"))||[];if(0!=t.length)for(var a=0;a<t.length;a++){if(parseInt(t[a].pointId)===o){console.log("EQuaLS!"),$("input[name=color]").val(t[a].color);var n=document.getElementById("subPathIconObj");$("#subPathIconObj").attr("data",t[a].icon_src),e(n,t[a].color);break}console.log(" NOT EQuaLS!"),$("input[name=color]").val("rgba(255, 255, 255, 1)"),$("#subPathIconObj").attr("data","")}},complete:function(){if(S.length>0)for(var t=0;t<S.length;t++)S[t].pointId==o&&S.splice(t,1);console.log(o);var e=$("#subPathIconObj").attr("data");e.length>0?(b.icon_src=e,b.color=$("input[name=color]").val(),b.pointId=o,S.push(b),S.sort(a),localStorage.setItem("subpathIcons",JSON.stringify(S)),console.log(S)):Materialize.toast("No icon to this point!",2e3)}}),$("input[name = color]").minicolors({opacity:!0,format:"rgb",rgbaString:!1,change:function(t,e){var a="rgba("+e.r+", "+e.g+", "+e.b+", "+e.a+")";console.log(a)},swatches:["rgba(154, 9, 173, 1)","rgba(240, 17, 17, 1)","rgba(0, 255, 21, 1)","rgba(15, 43, 255, 1)","rgba(255, 239, 13, 1)"],showSpeed:100}),$(".icon_gallery__item").on("click",function(){var t=$(this).attr("src");console.log(t);var a=document.getElementById("subPathIconObj");$("#subPathIconObj").attr("data",t),b.pointId=o,b.icon_src=t,e(a)}),document.getElementById("SavePointContent").onclick=function(){var e={pointId:0,cityName:"",zoom:d,left:p,top:g,slider:"false",data:""},o=$("#pointName").val();e.pointId=l,e.cityName=o,e.data=editor.getData();for(var n=0;n<z.length;n++)z[n].pointId==l&&z.splice(n,1);if(0==e.data.length)Materialize.toast("No data in point!",2e3);else{z.push(e);var s=$(r).parent().find("text");$(s).text(o),Materialize.toast("Your data is saved!",2e3)}z.sort(a);var i=$("#sidenav-overlay");$(i).css("background-color","none"),$(i).remove(),console.log(z,h);for(var c=[],m=0;m<h.length;m++)for(n=0;n<z.length;n++)h[m].time==z[n].pointId&&c.push(z[n]);console.log(c),localStorage.setItem("PointsContent",JSON.stringify(c)),e.data.length>0?$(r).css("fill","#990033"):0==e.data.length&&$(r).css("fill",t("mapPointsColor")),$(".button-collapse").sideNav("hide")}})}u=g.getTotalLength();var K=[];for(c=0;c<u;c++){var V;for(C=(V=g.getPointAtLength(c)).x,O=V.y,P=0;P<_.length;P++)Math.abs(Math.round(C-_[P].cx))<=0&&Math.abs(Math.round(O-_[P].cy))<=0&&K.push(c)}if(K.length!=_.length)for(c=0;c<K.length;c++)K[c+1]-K[c]==1&&K.splice(c,1);localStorage.setItem("stopsAtLength",JSON.stringify(K))},!1);JSON.parse(localStorage.getItem("mapStyleProperties"));$("body").css("background-color",t("bodyBackgroundColor"))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
