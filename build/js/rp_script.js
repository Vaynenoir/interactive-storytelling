$(document).ready(function(){function t(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"50",contentAlign:"flex-start"};if(e[t])return e[t]}function e(t){if(!$(t).length)return!1;var e=$(t).offset().top,a=$(t).offset().top+$(t).outerHeight(),o=$(window).scrollTop()+$(window).height(),r=$(window).scrollTop();return o>e&&r<a}function a(t,e){return t.pointId-e.pointId}for(var o=JSON.parse(localStorage.getItem("PointsContent"))||[],r=(JSON.parse(localStorage.getItem("SavedMapColors")),document.getElementById("boom")),n=0;n<o.length;n++){var s=document.createElement("section");$(s).addClass("js-section"),$(s).attr({"data-zoom":o[n].zoom,"data-pos-top":o[n].top,"data-pos-left":o[n].left,id:"section_"+(n+1)}),s.insertAdjacentHTML("beforeend",o[n].data),$(s).find("img").addClass("js-image"),$(s).find(".js-image").attr("data-pos-x",0),$(s).find(".js-image").attr("data-pos-y",0),r.append(s),$("div.text_wrapper").css("align-items",t("contentAlign")),$(".js-section").css("width",t("contentWidth")+"%")}$(".js-image");$.fn.hasAttr=function(t){return void 0!==this.attr(t)};var i=$(".js-section");$.each(i,function(t,e){var a=$(e).find(".slick-gallery");0==$(a).find("img.slick-item").length&&(console.log($(a)),$(a).remove());var o=$(e).find(".single_image");$(o).hasClass(".slick-current")||$(o).addClass("slick-current"),$(a).find("br").remove(),$("br").remove(),$(a).text().replace(/&nbsp;/g,"")}),$(".slick_gallery").slick({slidesToShow:1,slidesToScroll:1,prevArrow:!0,nextArrow:!0});var l=document.getElementById("map"),c=JSON.parse(localStorage.getItem("map"));$("#map").attr("data",c),l.addEventListener("load",function(){var n=l.contentDocument,s=n.documentElement;s.setAttribute("x","520px"),s.setAttribute("y","300px");var i=s.getElementById("mapPaths"),c=i.getElementsByTagName("path"),p=document.createElementNS("http://www.w3.org/2000/svg","g");p.append(i),$(p).attr("id","wholeSvgGroup");var d=Snap(p),g=JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:"scale(1) translate(0 0)"};Snap(x);if(g.transform.length>0){transformString=g.transform;var m=transformString.match(/[+-]?\d+(\.\d+)?/g).map(function(t){return parseFloat(t)});console.log(m),scaleImg=m[0],moveLeft=m[1],moveTop=m[2],console.log(scaleImg,moveLeft,moveTop),d.attr("transform","scale("+scaleImg+") translate("+moveLeft+" "+moveTop+")")}for(var h=0;h<c.length;h++)c[h].style.fill=t("mapColor"),c[h].style.stroke=t("mapStrokeColor");var f=JSON.parse(localStorage.getItem("path"));if($(s).addClass("my-svg"),f){var u=document.createElementNS("http://www.w3.org/2000/svg","path"),v=document.createElementNS("http://www.w3.org/2000/svg","path");$(u).attr("d",f),$(u).attr("fill","transparent"),$(u).attr("stroke",t("mapRouteColor")),$(u).attr("opacity","0.8"),$(u).attr("stroke-width",t("routeBorderWidth")),$(u).attr("stroke-linecap","round"),$(u).attr("id","routePath"),"true"==t("routeShadow")&&"dashed"==t("routeType")&&($(v).attr({d:f,fill:"transparent",stroke:"#ccc","stroke-dashoffset":"300px","stroke-dasharray":"12px",opacity:"0.4","stroke-width":t("routeBorderWidth"),"stroke-linecap":"round",id:"routePathClone"}),p.append(v)),"true"==t("routeShadow")&&"dotted"==t("routeType")&&($(v).attr({d:f,fill:"transparent",stroke:"#ccc","stroke-dashoffset":"300px","stroke-dasharray":"4px",opacity:"0.4","stroke-width":t("routeBorderWidth"),"stroke-linecap":"round",id:"routePathClone"}),p.append(v)),"true"==t("routeShadow")&&"line"==t("routeType")&&($(v).attr({d:f,fill:"transparent",stroke:"#ccc",opacity:"0.4","stroke-width":t("routeBorderWidth"),"stroke-linecap":"round",id:"routePathClone"}),p.append(v))}parseInt($("#IDmapbg")[0].style.top),parseInt($("#IDmapbg")[0].style.left);var y=document.createElementNS("http://www.w3.org/2000/svg","path");$(y).css("display","none");var w=[];$(".lightOn").each(function(t){w.push($(this))});var S=JSON.parse(localStorage.getItem("circlesCoords"));$(w).each(function(t,e){var a=$(e).closest("section")[0].id;a=parseInt(a[8])-1,console.log(t),a==S[a].id-1&&$(e).attr({"data-pos-x":S[a].cx,"data-pos-y":S[a].cy})}),Snap.plugin(function(t,e,a,o){a.prototype.circlePath=function(t,e,a){var o="M"+t+","+e;return o+="m"+-a+",0",o+="a"+a+","+a+" 0 1,0 "+2*a+",0",o+="a"+a+","+a+" 0 1,0 "+-2*a+",0",this.path(o,t,e)}});var x=document.createElementNS("http://www.w3.org/2000/svg","g");x.id="pathGroup",x.append(u),$(p).append(x),s.append(p);var I=Snap(x),k=JSON.parse(localStorage.getItem("circlesCoords"));$.each(k,function(e,a){var o=I.circlePath(this.cx,this.cy,this.r).attr({fill:t("mapPointsColor"),stroke:t("mapPointsBorderColor"),"stroke-width":t("pointsBorderWidth"),id:e+1,class:"circleElement",style:"display:none",onclick:"clickCircle()"});Snap.path.intersection(o,$(u).attr("d")).forEach(function(t){I.circle(t.x,t.y,1)})});var C=s.getElementById("pathGroup");for(h=0;h<k.length;h++){var b=document.createElementNS("http://www.w3.org/2000/svg","g"),P=s.getElementById(h+1);b.append(P);var N=document.createElementNS("http://www.w3.org/2000/svg","text");$(N).attr({x:k[h].cx,y:k[h].cy+20,"font-size":12,"font-style":"italic",fill:"#ccccccc",style:"display: none",class:"cityName"}),$(N).text(o[h].cityName),b.append(N),C.append(b),p.append(C),s.append(p)}var B=n.getElementsByTagName("circle");for(h=0;h<B.length;h++)B[h].style.fill="transparent";var E=JSON.parse(localStorage.getItem("StartRouteIcon")),A=(new DOMParser).parseFromString(E,"text/xml").documentElement,O=$(A).attr("data-offset-x"),L=$(A).attr("data-offset-y"),T=$(A).attr("data-scale"),J=document.createElementNS("http://www.w3.org/2000/svg","g");if("true"==t("UserOption")&&E){for(h=0;h<E.length;h++)$(A).attr({fill:t("RouteStartIconColor"),transform:T});$(J).attr("transform","translate("+(u.getPointAtLength(1).x-t("RouteStartIconSize")/O)+" "+(u.getPointAtLength(1).y-t("RouteStartIconSize")/L)+") scale("+t("RouteStartIconSize")/100+")"),J.append(A),p.append(J),s.append(p)}if("true"==t("checkboxState")&&"true"==t("defaultOption")){var M=document.createElementNS("http://www.w3.org/2000/svg","circle");$(M).attr({cx:u.getPointAtLength(1).x,cy:u.getPointAtLength(1).y,r:t("pointsRadius"),stroke:t("mapPointsBorderColor"),fill:t("mapPointsColor"),"stroke-width":t("pointsBorderWidth")}),i.append(M),p.append(i),s.append(p)}r.style.display="block";var _=JSON.parse(localStorage.getItem("stopsAtLength")),j=JSON.parse(localStorage.getItem("subpathIcons"))||[];j.sort(a);var R=_[_.length-1],W=($(u).css({"stroke-dashoffset":R,"stroke-dasharray":R+" "+R}),JSON.parse(localStorage.getItem("movingIcon")),Snap(p)),z=[];for(h=0;h<j.length;h++){z.push(j[h].pointId);var F=(new DOMParser).parseFromString(j[h].icon,"image/svg+xml").documentElement,D=Snap(F),G=W.g(D);G.attr({id:"transport_"+j[h].pointId,"data-scale":.01*j[h].size,"data-id":j[h].pointId,class:"map_transport",fill:j[h].color,opacity:0});var q=parseFloat(G.attr("data-scale"));x.prepend(G),p.append(x);var H=u.getPointAtLength(_[h]);G.transform("matrix("+q+",0,0,"+q+","+H.x+","+H.y+")")}$(window).on("scroll",function(a){!function(){for(var t=n.querySelectorAll(".circleElement"),e=n.querySelectorAll(".cityName"),a=0;a<_.length;a++)$.each($(".js-section"),function(a,o){if($(this).hasClass("active")){var r=($(window).scrollTop()-$(this).offset().top)/$(this).height()*100,s=$(this).attr("id");s=parseInt(s[8])-1;var i,l=r*(_[s]/100);i=Math.floor(l),u.getPointAtLength(i);for(var c=n.getElementById(s+1),p=(Snap.path.getPointAtLength(y),parseFloat($(u).css("stroke-dashoffset"))),d=0;d<t.length;d++)$(c).parent().find("text"),p>=R-20?($(t[d]).fadeOut(900),$(e[d]).fadeOut(900)):t[d].id<=s+1?($(t[d]).fadeIn(900),$(e[d]).fadeIn(900)):t[d].id>s+1&&($(t[d]).fadeOut(900),$(e[d]).fadeOut(900));if(i<_[s]&&(0==s&&i<_[s]&&($(u).css("stroke-dashoffset",R-i+"px"),(y=W.select("#transport_"+z[0])).animate({opacity:"0"},100)),s>0&&i<_[s])){$(u).css("stroke-dashoffset",""+(R-(_[s-1]+i)));for(var g=0;g<z.length;g++){if(s==parseInt(z[g]-1)){var m=_[parseInt(z[g])-2]+i,h=u.getPointAtLength(m),f=u.getPointAtLength(m+2),v=(h.y,f.y,h.x,f.x,180*Math.atan2(h.y-f.y,h.x-f.x)/Math.PI),y=(h.x,h.x,h.y,W.select("#transport_"+z[g])),w=parseFloat(y.attr("data-scale"));console.log(w);var S=y.getBBox(),x=S.x+S.width/2,I=S.y+S.height/2;if(console.log(y,x,I,h.x,h.y),y.animate({opacity:"1"},100),m>_[z[g]-1]&&(console.log("IF"),y.animate({opacity:"0"},100)),m<_[z[g]-1]){var k=new Snap.Matrix;k.scale(w,w),k.rotate(v+180,20*f.x,20*f.y),k.translate(20*h.x,20*(h.y-12)),y.animate({transform:k},10),y.animate({transform:k},10),m>_[z[0]]&&(W.select("#transport_"+z[0]).animate({opacity:"0"},100),console.log("opacity 0"))}}z[g]>s+1&&(y=W.select("#transport_"+z[g])).animate({opacity:"0"},100)}}_[s-1]+i>_[s]&&$(u).css("stroke-dashoffset",R-_[s]+"px")}})}(),function(){function a(t,e,a){var o=s.createSVGPoint();return o.x=e,o.y=a,o.matrixTransform(t.getScreenCTM().inverse())}$(".js-section").each(function(t){var a=$(window).scrollTop(),o=$(this).offset().top,r=$(this).attr("data-zoom"),n=parseInt($(this).attr("data-pos-top")),s=($(this).attr("data-pos-bottom"),parseInt($(this).attr("data-pos-left")));if($(this).attr("data-pos-right"),o<=a&&e($(this)))$(this).addClass("active"),$(u).css("display","block"),d.animate({transform:"scale("+r+") translate("+s+" "+n+")"},700);else if($(this).removeClass("active"),!$(".js-section").hasClass("active")&&$(window).scrollTop()<20){$(u).css("display","none"),d.animate({transform:"scale("+scaleImg+") translate("+moveLeft+" "+moveTop+")"},700);var i=$(".map_transport");$(i).attr("opacity","0")}});var o=0;$(w).each(function(){if(e($(this))){o++;var r=$(this).attr("data-pos-x"),n=$(this).attr("data-pos-y"),i=this.closest("section"),l=($(i).attr("data-zoom"),$(i).attr("data-pos-top")),c=($(i).attr("data-pos-left"),$(this)[0].getBoundingClientRect()),d=(c.top,$(this).height(),-(+c.left+ +c.width)/1920*1400),g=+c.top/1200*900,m=-(+c.left+ +c.width)/1920*1400,h=c.bottom/1200*900,f=a(s,d,g),u=a(s,m,h);a(p,d,g),a(p,m,h),$(y).css("position","relative"),"flex-start"==t("contentAlign")?($(y).attr("d","M"+r+" "+n+" L"+(f.x-d)+" "+g+" L"+(u.x-m)+" "+(h-l)+" Z"),$(y).attr("fill","url(#gradient)")):"flex-end"==t("contentAlign")&&($(y).attr("fill","url(#gradient_reverse)"),$(y).attr("d","M"+r+" "+n+" L"+(-f.x-d)+" "+g+" L"+(-u.x-m)+" "+(h-l)+" Z")),$(y).attr("opacity",".3")}}),$(p).prepend(y),s.append(p),$(p).prepend(i),s.append(p),o>0?$(y).fadeIn(900):$(y).fadeOut(900)}()})},!1),$("#IDmapbg").css("background-color",t("bodyBackgroundColor")),$("body").css("background-color",t("bodyBackgroundColor"))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
