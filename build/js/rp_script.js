$(document).ready(function(){function t(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"50",contentAlign:"flex-start"};if(e[t])return e[t]}function e(t){if(!$(t).length)return!1;var e=$(t).offset().top,a=$(t).offset().top+$(t).outerHeight(),o=$(window).scrollTop()+$(window).height(),r=$(window).scrollTop();return o>e&&r<a}var a=JSON.parse(localStorage.getItem("PointsContent"))||[];JSON.parse(localStorage.getItem("SavedMapColors"));a&&a.sort(function(t,e){return t.pointId-e.pointId});for(var o=document.getElementById("boom"),r=0;r<a.length;r++){var s=document.createElement("section");$(s).addClass("js-section"),$(s).attr({"data-zoom":a[r].zoom,"data-pos-top":a[r].top,"data-pos-left":a[r].left,id:"section_"+(r+1)}),s.insertAdjacentHTML("beforeend",a[r].data),$(s).find("img").addClass("js-image"),$(s).find(".js-image").attr("data-pos-x",0),$(s).find(".js-image").attr("data-pos-y",0),o.append(s),$("div.text_wrapper").css("align-items",t("contentAlign")),$(".js-section").css("width",t("contentWidth")+"%")}$(".js-image");$.fn.hasAttr=function(t){return void 0!==this.attr(t)};var n=$(".js-section");$.each(n,function(t,e){var a=$(e).find(".slick-gallery");0==$(a).find("img.slick-item").length&&(console.log($(a)),$(a).remove());var o=$(e).find(".single_image");$(o).hasClass(".slick-current")||$(o).addClass("slick-current"),$(a).find("br").remove(),$("br").remove(),$(a).text().replace(/&nbsp;/g,"")}),$(".slick_gallery").slick({slidesToShow:1,slidesToScroll:1,prevArrow:!0,nextArrow:!0});var i=document.getElementById("map"),l=JSON.parse(localStorage.getItem("map"));$("#map").attr("data",l),i.addEventListener("load",function(){var r=i.contentDocument,s=r.documentElement;s.setAttribute("x","520px"),s.setAttribute("y","300px");var n=s.getElementById("mapPaths"),l=n.getElementsByTagName("path"),c=document.createElementNS("http://www.w3.org/2000/svg","g");c.append(n),$(c).attr("id","wholeSvgGroup");var p=Snap(c),d=JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:""};Snap(S);if(d.transform.length>0){transformString=d.transform;var g=transformString.match(/[+-]?\d+(\.\d+)?/g).map(function(t){return parseFloat(t)});console.log(g),scaleImg=g[0],moveLeft=g[1],moveTop=g[2],console.log(scaleImg,moveLeft,moveTop),p.attr("transform","scale("+scaleImg+") translate("+moveLeft+" "+moveTop+")")}for(var m=0;m<l.length;m++)l[m].style.fill=t("mapColor"),l[m].style.stroke=t("mapStrokeColor");var f=JSON.parse(localStorage.getItem("path"));if($(s).addClass("my-svg"),f){var h=document.createElementNS("http://www.w3.org/2000/svg","path");$(h).attr("d",f),$(h).attr("fill","transparent"),$(h).attr("stroke",t("mapRouteColor")),$(h).attr("opacity","0.8"),$(h).attr("stroke-width",t("routeBorderWidth")),$(h).attr("stroke-linecap","round"),$(h).attr("id","routePath")}parseInt($("#IDmapbg")[0].style.top),parseInt($("#IDmapbg")[0].style.left);var u=document.createElementNS("http://www.w3.org/2000/svg","path");$(u).css("display","none");var v=[];$(".lightOn").each(function(t){v.push($(this))});var w=JSON.parse(localStorage.getItem("circlesCoords"));$(v).each(function(t,e){var a=$(e).closest("section")[0].id;a=parseInt(a[8])-1,console.log(t),a==w[a].id-1&&$(e).attr({"data-pos-x":w[a].cx,"data-pos-y":w[a].cy})}),Snap.plugin(function(t,e,a,o){a.prototype.circlePath=function(t,e,a){var o="M"+t+","+e;return o+="m"+-a+",0",o+="a"+a+","+a+" 0 1,0 "+2*a+",0",o+="a"+a+","+a+" 0 1,0 "+-2*a+",0",this.path(o,t,e)}});var S=document.createElementNS("http://www.w3.org/2000/svg","g");S.id="pathGroup",S.append(h),$(c).append(S),s.append(c);var y=Snap(S),I=JSON.parse(localStorage.getItem("circlesCoords"));$.each(I,function(e,a){var o=y.circlePath(this.cx,this.cy,this.r).attr({fill:t("mapPointsColor"),stroke:t("mapPointsBorderColor"),"stroke-width":t("pointsBorderWidth"),id:e+1,class:"circleElement",style:"display:none",onclick:"clickCircle()"});Snap.path.intersection(o,$(h).attr("d")).forEach(function(t){y.circle(t.x,t.y,1)})});var k=s.getElementById("pathGroup");for(m=0;m<I.length;m++){var C=document.createElementNS("http://www.w3.org/2000/svg","g"),x=s.getElementById(m+1);C.append(x);var b=document.createElementNS("http://www.w3.org/2000/svg","text");$(b).attr({x:I[m].cx,y:I[m].cy+20,"font-size":12,"font-style":"italic",fill:"#ccccccc",style:"display: none",class:"cityName"}),$(b).text(a[m].cityName),C.append(b),k.append(C),c.append(k),s.append(c)}var E=r.getElementsByTagName("circle");for(m=0;m<E.length;m++)E[m].style.fill="transparent";var N=JSON.parse(localStorage.getItem("StartRouteIcon")),B=(new DOMParser).parseFromString(N,"text/xml").documentElement,O=$(B).attr("data-offset-x"),P=$(B).attr("data-offset-y"),A=$(B).attr("data-scale"),T=document.createElementNS("http://www.w3.org/2000/svg","g");if("true"==t("UserOption")&&N){for(m=0;m<N.length;m++)$(B).attr({fill:t("RouteStartIconColor"),transform:A});$(T).attr("transform","translate("+(h.getPointAtLength(1).x-t("RouteStartIconSize")/O)+" "+(h.getPointAtLength(1).y-t("RouteStartIconSize")/P)+") scale("+t("RouteStartIconSize")/100+")"),T.append(B),c.append(T),s.append(c)}if("true"==t("checkboxState")&&"true"==t("defaultOption")){var L=document.createElementNS("http://www.w3.org/2000/svg","circle");$(L).attr({cx:h.getPointAtLength(1).x,cy:h.getPointAtLength(1).y,r:t("pointsRadius"),stroke:t("mapPointsBorderColor"),fill:t("mapPointsColor"),"stroke-width":t("pointsBorderWidth")}),c.append(L),s.append(c)}o.style.display="block";var j=h.getTotalLength(),J=($(h).css({"stroke-dashoffset":j,"stroke-dasharray":j+" "+j}),JSON.parse(localStorage.getItem("stopsAtLength")));$(window).on("scroll",function(t){!function(){for(var t=r.querySelectorAll(".circleElement"),e=r.querySelectorAll(".cityName"),a=0;a<J.length;a++)$.each($(".js-section"),function(a,o){if($(this).hasClass("active")){var s=($(window).scrollTop()-$(this).offset().top)/$(this).height()*100,n=$(this).attr("id");n=parseInt(n[8])-1;var i,l=s*(J[n]/100);i=Math.floor(l);for(var c=r.getElementById(n+1),p=parseFloat($(h).css("stroke-dashoffset")),d=0;d<t.length;d++)$(c).parent().find("text"),p>=j-20?($(t[d]).fadeOut(900),$(e[d]).fadeOut(900)):t[d].id<=n+1?($(t[d]).fadeIn(900),$(e[d]).fadeIn(900)):t[d].id>n+1&&($(t[d]).fadeOut(900),$(e[d]).fadeOut(900));i<J[n]&&(0==n&&i<J[n]&&$(h).css("stroke-dashoffset",j-i+"px"),n>0&&i<J[n]&&$(h).css("stroke-dashoffset",""+(j-(J[n-1]+i)))),J[n-1]+i>J[n]&&$(h).css("stroke-dashoffset",j-J[n]+"px")}})}(),function(){$(".js-section").each(function(t){var a=$(window).scrollTop(),o=$(this).offset().top,r=$(this).attr("data-zoom"),s=parseInt($(this).attr("data-pos-top")),n=($(this).attr("data-pos-bottom"),parseInt($(this).attr("data-pos-left")));$(this).attr("data-pos-right"),o<=a&&e($(this))?($(this).addClass("active"),p.animate({transform:"scale("+r+") translate("+n+" "+s+")"},700)):($(this).removeClass("active"),!$(".js-section").hasClass("active")&&$(window).scrollTop()<20&&p.animate({transform:"scale("+scaleImg+") translate("+moveLeft+" "+moveTop+")"},700))});var t=0;$(v).each(function(){if(e($(this))){t++;var a=$(this).attr("data-pos-x"),o=$(this).attr("data-pos-y"),r=this.closest("section"),s=$(r).attr("data-zoom"),n=($(r).attr("data-pos-top"),$(r).attr("data-pos-left"),$(this)[0].getBoundingClientRect()),i=(n.top,$(this).height(),-(+n.left+ +n.width)/1920*1400),l=+n.top/1200*900,c=-(+n.left+ +n.width)/1920*1400,p=n.bottom/1200*900;$(u).attr("d","M"+a+" "+o+" L"+i/s+" "+l+" L"+c/s+" "+p+" Z"),$(u).css("position","relative"),$(u).attr("fill","#47DBB4"),$(u).attr("opacity",".3"),$(u).attr("transform-origin","520px 300px")}}),$(c).append(u),s.append(c),t>0?$(u).fadeIn(900):$(u).fadeOut(900)}()}),$("body").click(function(t){console.log(t)})},!1),$("#IDmapbg").css("background-color",t("bodyBackgroundColor")),$("body").css("background-color",t("bodyBackgroundColor"))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
