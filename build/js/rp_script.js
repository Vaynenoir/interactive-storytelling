$(document).ready(function(){function t(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"50",contentAlign:"flex-start"};if(e[t])return e[t]}function e(t){if(!$(t).length)return!1;var e=$(t).offset().top,a=$(t).offset().top+$(t).outerHeight(),o=$(window).scrollTop()+$(window).height(),r=$(window).scrollTop();return o>e&&r<a}var a=JSON.parse(localStorage.getItem("PointsContent"))||[];JSON.parse(localStorage.getItem("SavedMapColors"));a&&a.sort(function(t,e){return t.pointId-e.pointId});for(var o=document.getElementById("boom"),r=0;r<a.length;r++){var n=document.createElement("section");$(n).addClass("js-section"),$(n).attr({"data-zoom":a[r].zoom,"data-pos-top":a[r].top,"data-pos-left":a[r].left,id:"section_"+(r+1)}),n.insertAdjacentHTML("beforeend",a[r].data),$(n).find("img").addClass("js-image"),$(n).find(".js-image").attr("data-pos-x",0),$(n).find(".js-image").attr("data-pos-y",0),o.append(n),$("div.text_wrapper").css("align-items",t("contentAlign")),$(".js-section").css("width",t("contentWidth")+"%")}$(".js-image");$.fn.hasAttr=function(t){return void 0!==this.attr(t)};var s=$(".js-section");$.each(s,function(t,e){var a=$(e).find(".slick-gallery");0==$(a).find("img.slick-item").length&&(console.log($(a)),$(a).remove());var o=$(e).find(".single_image");$(o).hasClass(".slick-current")||$(o).addClass("slick-current"),$(a).find("br").remove(),$("br").remove(),$(a).text().replace(/&nbsp;/g,"")}),$(".slick_gallery").slick({slidesToShow:1,slidesToScroll:1,prevArrow:!0,nextArrow:!0});var i=document.getElementById("map"),l=JSON.parse(localStorage.getItem("map"));$("#map").attr("data",l),i.addEventListener("load",function(){var r=i.contentDocument,n=r.documentElement;n.setAttribute("x","520px"),n.setAttribute("y","300px");var s=n.getElementById("mapPaths"),l=s.getElementsByTagName("path"),c=document.createElementNS("http://www.w3.org/2000/svg","g");c.append(s),$(c).attr("id","wholeSvgGroup");var d=Snap(c),p=JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:""};Snap(w);if(p.transform.length>0){transformString=p.transform;var g=transformString.match(/[+-]?\d+(\.\d+)?/g).map(function(t){return parseFloat(t)});console.log(g),scaleImg=g[0],moveLeft=g[1],moveTop=g[2],console.log(scaleImg,moveLeft,moveTop),d.attr("transform","scale("+scaleImg+") translate("+moveLeft+" "+moveTop+")")}for(var m=0;m<l.length;m++)l[m].style.fill=t("mapColor"),l[m].style.stroke=t("mapStrokeColor");var f=JSON.parse(localStorage.getItem("path"));if($(n).addClass("my-svg"),f){var h=document.createElementNS("http://www.w3.org/2000/svg","path");$(h).attr("d",f),$(h).attr("fill","transparent"),$(h).attr("stroke",t("mapRouteColor")),$(h).attr("opacity","0.8"),$(h).attr("stroke-width",t("routeBorderWidth")),$(h).attr("stroke-linecap","round"),$(h).attr("id","routePath")}parseInt($("#IDmapbg")[0].style.top),parseInt($("#IDmapbg")[0].style.left);var u=document.createElementNS("http://www.w3.org/2000/svg","path");$(u).css("display","none");var v=[];$(".lightOn").each(function(t){v.push($(this))});var S=JSON.parse(localStorage.getItem("circlesCoords"));$(v).each(function(t,e){var a=$(e).closest("section")[0].id;a=parseInt(a[8])-1,console.log(t),a==S[a].id-1&&$(e).attr({"data-pos-x":S[a].cx,"data-pos-y":S[a].cy})}),Snap.plugin(function(t,e,a,o){a.prototype.circlePath=function(t,e,a){var o="M"+t+","+e;return o+="m"+-a+",0",o+="a"+a+","+a+" 0 1,0 "+2*a+",0",o+="a"+a+","+a+" 0 1,0 "+-2*a+",0",this.path(o,t,e)}});var w=document.createElementNS("http://www.w3.org/2000/svg","g");w.id="pathGroup",w.append(h),$(c).append(w),n.append(c);var y=Snap(w),x=JSON.parse(localStorage.getItem("circlesCoords"));$.each(x,function(e,a){var o=y.circlePath(this.cx,this.cy,this.r).attr({fill:t("mapPointsColor"),stroke:t("mapPointsBorderColor"),"stroke-width":t("pointsBorderWidth"),id:e+1,class:"circleElement",style:"display:none",onclick:"clickCircle()"});Snap.path.intersection(o,$(h).attr("d")).forEach(function(t){y.circle(t.x,t.y,1)})});var I=n.getElementById("pathGroup");for(m=0;m<x.length;m++){var C=document.createElementNS("http://www.w3.org/2000/svg","g"),k=n.getElementById(m+1);C.append(k);var b=document.createElementNS("http://www.w3.org/2000/svg","text");$(b).attr({x:x[m].cx,y:x[m].cy+20,"font-size":12,"font-style":"italic",fill:"#ccccccc",style:"display: none",class:"cityName"}),$(b).text(a[m].cityName),C.append(b),I.append(C),c.append(I),n.append(c)}var N=r.getElementsByTagName("circle");for(m=0;m<N.length;m++)N[m].style.fill="transparent";var E=JSON.parse(localStorage.getItem("StartRouteIcon")),A=(new DOMParser).parseFromString(E,"text/xml").documentElement,B=$(A).attr("data-offset-x"),O=$(A).attr("data-offset-y"),P=$(A).attr("data-scale"),T=document.createElementNS("http://www.w3.org/2000/svg","g");if("true"==t("UserOption")&&E){for(m=0;m<E.length;m++)$(A).attr({fill:t("RouteStartIconColor"),transform:P});$(T).attr("transform","translate("+(h.getPointAtLength(1).x-t("RouteStartIconSize")/B)+" "+(h.getPointAtLength(1).y-t("RouteStartIconSize")/O)+") scale("+t("RouteStartIconSize")/100+")"),T.append(A),c.append(T),n.append(c)}if("true"==t("checkboxState")&&"true"==t("defaultOption")){var L=document.createElementNS("http://www.w3.org/2000/svg","circle");$(L).attr({cx:h.getPointAtLength(1).x,cy:h.getPointAtLength(1).y,r:t("pointsRadius"),stroke:t("mapPointsBorderColor"),fill:t("mapPointsColor"),"stroke-width":t("pointsBorderWidth")}),c.append(L),n.append(c)}o.style.display="block";var j=h.getTotalLength(),J=($(h).css({"stroke-dashoffset":j,"stroke-dasharray":j+" "+j}),JSON.parse(localStorage.getItem("stopsAtLength")));$(window).on("scroll",function(a){!function(){for(var t=r.querySelectorAll(".circleElement"),e=r.querySelectorAll(".cityName"),a=0;a<J.length;a++)$.each($(".js-section"),function(a,o){if($(this).hasClass("active")){var n=($(window).scrollTop()-$(this).offset().top)/$(this).height()*100,s=$(this).attr("id");s=parseInt(s[8])-1;var i,l=n*(J[s]/100);i=Math.floor(l);for(var c=r.getElementById(s+1),d=parseFloat($(h).css("stroke-dashoffset")),p=0;p<t.length;p++)$(c).parent().find("text"),d>=j-20?($(t[p]).fadeOut(900),$(e[p]).fadeOut(900)):t[p].id<=s+1?($(t[p]).fadeIn(900),$(e[p]).fadeIn(900)):t[p].id>s+1&&($(t[p]).fadeOut(900),$(e[p]).fadeOut(900));i<J[s]&&(0==s&&i<J[s]&&$(h).css("stroke-dashoffset",j-i+"px"),s>0&&i<J[s]&&$(h).css("stroke-dashoffset",""+(j-(J[s-1]+i)))),J[s-1]+i>J[s]&&$(h).css("stroke-dashoffset",j-J[s]+"px")}})}(),function(){function a(t,e,a){var o=n.createSVGPoint();return o.x=e,o.y=a,o.matrixTransform(t.getScreenCTM().inverse())}$(".js-section").each(function(t){var a=$(window).scrollTop(),o=$(this).offset().top,r=$(this).attr("data-zoom"),n=parseInt($(this).attr("data-pos-top")),s=($(this).attr("data-pos-bottom"),parseInt($(this).attr("data-pos-left")));$(this).attr("data-pos-right"),o<=a&&e($(this))?($(this).addClass("active"),d.animate({transform:"scale("+r+") translate("+s+" "+n+")"},700)):($(this).removeClass("active"),!$(".js-section").hasClass("active")&&$(window).scrollTop()<20&&d.animate({transform:"scale("+scaleImg+") translate("+moveLeft+" "+moveTop+")"},700))});var o=0;$(v).each(function(){if(e($(this))){o++;var r=$(this).attr("data-pos-x"),s=$(this).attr("data-pos-y"),i=this.closest("section"),l=($(i).attr("data-zoom"),$(i).attr("data-pos-top")),d=($(i).attr("data-pos-left"),$(this)[0].getBoundingClientRect()),p=(d.top,$(this).height(),-(+d.left+ +d.width)/1920*1400),g=+d.top/1200*900,m=-(+d.left+ +d.width)/1920*1400,f=d.bottom/1200*900,h=a(n,p,g),v=a(n,m,f);a(c,p,g),a(c,m,f),$(u).css("position","relative"),"flex-start"==t("contentAlign")?($(u).attr("d","M"+r+" "+s+" L"+(h.x-p)+" "+g+" L"+(v.x-m)+" "+(f-l)+" Z"),$(u).attr("fill","url(#gradient)")):"flex-end"==t("contentAlign")&&($(u).attr("fill","url(#gradient_reverse)"),$(u).attr("d","M"+r+" "+s+" L"+(-h.x-p)+" "+g+" L"+(-v.x-m)+" "+(f-l)+" Z")),$(u).attr("opacity",".3")}}),$(c).prepend(u),n.append(c),o>0?$(u).fadeIn(900):$(u).fadeOut(900)}()});var R=n.getAttribute("xmlns");n.addEventListener("click",function(t){console.log("1");var e,a,o=n.createSVGPoint();o.x=t.clientX,o.y=t.clientY,e=o.matrixTransform(n.getScreenCTM().inverse()),(a=document.createElementNS(R,"circle")).setAttributeNS(null,"cx",e.x),a.setAttributeNS(null,"cy",e.y),a.setAttributeNS(null,"r",10),n.appendChild(a)},!1)},!1),$("#IDmapbg").css("background-color",t("bodyBackgroundColor")),$("body").css("background-color",t("bodyBackgroundColor"))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
