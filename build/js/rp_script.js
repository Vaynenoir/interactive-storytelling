$(document).ready(function(){function t(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"100",contentAlign:"flex-start"};if(e[t])return e[t]}function e(t){if(!$(t).length)return!1;var e=$(t).offset().top,o=$(t).offset().top+$(t).outerHeight(),a=$(window).scrollTop()+$(window).height(),r=$(window).scrollTop();return a>e&&r<o}var o=JSON.parse(localStorage.getItem("PointsContent"))||[];JSON.parse(localStorage.getItem("SavedMapColors"));o&&o.sort(function(t,e){return t.pointId-e.pointId});for(var a=document.getElementById("boom"),r=0;r<o.length;r++){var s=document.createElement("section");$(s).addClass("js-section"),$(s).attr({"data-zoom":o[r].zoom+"%","data-pos-top":o[r].top+"%","data-pos-bottom":o[r].bottom+"%","data-pos-left":o[r].left+"%","data-pos-right":o[r].bottom+"%",id:"section_"+(r+1)}),s.insertAdjacentHTML("beforeend",o[r].data),$(s).find("img").addClass("js-image"),$(s).find(".js-image").attr("data-pos-x",0),$(s).find(".js-image").attr("data-pos-y",0),a.append(s),$("div.text_wrapper").css("align-items",t("contentAlign")),$(".js-section").css("width",t("contentWidth")+"%")}$(".mapbg").css("zoom","0%"),$(".mapbg").css("right","0"),$("mapbg").css("bottom","0");var n=document.getElementById("map"),i=JSON.parse(localStorage.getItem("map"));console.log(i),$("#map").attr("data",i),n.addEventListener("load",function(){console.log($("#map").attr("data"));for(var r=n.contentDocument,s=r.documentElement,i=s.getElementById("mapPaths").getElementsByTagName("path"),l=0;l<i.length;l++)i[l].style.fill=t("mapColor"),i[l].style.stroke=t("mapStrokeColor");var c=JSON.parse(localStorage.getItem("path"));if($(s).addClass("my-svg"),c){var p=document.createElementNS("http://www.w3.org/2000/svg","path");$(p).attr("d",c),$(p).attr("fill","transparent"),$(p).attr("stroke",t("mapRouteColor")),$(p).attr("opacity","0.8"),$(p).attr("stroke-width",t("routeBorderWidth")),$(p).attr("stroke-linecap","round"),$(p).attr("id","routePath")}var d=parseInt($("#IDmapbg")[0].style.top),g=parseInt($("#IDmapbg")[0].style.left),m=document.createElementNS("http://www.w3.org/2000/svg","path");$(m).css("display","none"),Snap.plugin(function(t,e,o,a){o.prototype.circlePath=function(t,e,o){var a="M"+t+","+e;return a+="m"+-o+",0",a+="a"+o+","+o+" 0 1,0 "+2*o+",0",a+="a"+o+","+o+" 0 1,0 "+-2*o+",0",this.path(a,t,e)}});var h=document.createElementNS("http://www.w3.org/2000/svg","g");h.id="pathGroup",h.append(p),s.append(h);var f=Snap(h),u=JSON.parse(localStorage.getItem("circlesCoords"));$.each(u,function(e,o){var a=f.circlePath(this.cx,this.cy,this.r).attr({fill:t("mapPointsColor"),stroke:t("mapPointsBorderColor"),"stroke-width":t("pointsBorderWidth"),id:e+1,class:"circleElement",style:"display:none"});Snap.path.intersection(a,$(p).attr("d")).forEach(function(t){f.circle(t.x,t.y,1)})});var v=s.getElementById("pathGroup");console.log(v);for(l=0;l<u.length;l++){var w=document.createElementNS("http://www.w3.org/2000/svg","g"),S=s.getElementById(l+1);w.append(S);var y=document.createElementNS("http://www.w3.org/2000/svg","text");$(y).attr({x:u[l].cx,y:u[l].cy+20,"font-size":12,"font-style":"italic",fill:"#ccccccc",style:"display: none",class:"cityName"}),$(y).text(o[l].cityName),console.log(y),w.append(y),v.append(w),console.log(S),s.append(w)}var I=r.getElementsByTagName("circle");for(l=0;l<I.length;l++)I[l].style.fill="transparent";var b=JSON.parse(localStorage.getItem("StartRouteIcon"))||[],C=(new DOMParser).parseFromString(b,"text/xml").documentElement,x=$(C).attr("data-offset-x"),E=$(C).attr("data-offset-y"),N=$(C).attr("data-scale"),k=document.createElementNS("http://www.w3.org/2000/svg","g");if("true"==t("UserOption")&&t("StartIcon").length>0)for(l=0;l<b.length;l++)$(C).attr({fill:t("RouteStartIconColor"),transform:N});if($(k).attr("transform","translate("+(p.getPointAtLength(1).x-t("RouteStartIconSize")/x)+" "+(p.getPointAtLength(1).y-t("RouteStartIconSize")/E)+") scale("+t("RouteStartIconSize")/100+")"),k.append(C),s.append(k),"true"==t("checkboxState")&&"true"==t("defaultOption")){var B=document.createElementNS("http://www.w3.org/2000/svg","circle");$(B).attr({cx:p.getPointAtLength(1).x,cy:p.getPointAtLength(1).y,r:t("pointsRadius"),stroke:t("mapPointsBorderColor"),fill:t("mapPointsColor"),"stroke-width":t("pointsBorderWidth")}),s.append(B)}a.style.display="block";var O=p.getTotalLength(),P=($(p).css({"stroke-dashoffset":O,"stroke-dasharray":O+" "+O}),JSON.parse(localStorage.getItem("stopsAtLength")));$(window).on("scroll",function(t){!function(){var t=r.querySelectorAll(".circleElement"),e=r.querySelectorAll(".cityName");console.log(e);for(var o=0;o<P.length;o++)$.each($(".js-section"),function(o,a){if($(this).hasClass("active")){var s=($(window).scrollTop()-$(this).offset().top)/$(this).height()*100,n=$(this).attr("id");n=parseInt(n[8])-1;var i,l=s*(P[n]/100);i=Math.floor(l);for(var c=r.getElementById(n+1),d=parseFloat($(p).css("stroke-dashoffset")),g=0;g<t.length;g++)$(c).parent().find("text"),d>=O-20?($(t[g]).fadeOut(900),$(e[g]).fadeOut(900)):t[g].id<=n+1?($(t[g]).fadeIn(900),$(e[g]).fadeIn(900)):t[g].id>n+1&&($(t[g]).fadeOut(900),$(e[g]).fadeOut(900));i<P[n]&&(0==n&&i<P[n]&&$(p).css("stroke-dashoffset",O-i+"px"),n>0&&i<P[n]&&$(p).css("stroke-dashoffset",""+(O-(P[n-1]+i)))),P[n-1]+i>P[n]&&$(p).css("stroke-dashoffset",O-P[n]+"px")}})}(),function(){$(".js-section").each(function(t){var o=$(window).scrollTop(),a=$(this).offset().top,r=$(this).attr("data-zoom"),s=parseInt($(this).attr("data-pos-top"))+d+"%",n=$(this).attr("data-pos-bottom"),i=parseInt($(this).attr("data-pos-left"))+g+"%",l=$(this).attr("data-pos-right");a<=o&&e($(this))?($(this).addClass("active"),$(".mapbg").stop().animate({zoom:r,left:i,right:l,top:s,bottom:n},700)):($(this).removeClass("active"),!$(".js-section").hasClass("active")&&$(window).scrollTop()<20&&$(".mapbg").stop().animate({left:g+"%",top:d+"%",zoom:"100%"},400))});var t=[];$(".js-image").each(function(e){t.push($(this))});var o=JSON.parse(localStorage.getItem("circlesCoords"));$(t).each(function(t,e){var a=$(this).closest("section")[0].id;(a=parseInt(a[8])-1)==o[t].id-1&&$(this).attr({"data-pos-x":o[a].cx,"data-pos-y":o[a].cy})});var a=0;$(t).each(function(){if(e($(this))){a++;var t=$(this).attr("data-pos-x"),o=$(this).attr("data-pos-y"),r=$(this)[0].getBoundingClientRect();r.top,$(this).height(),$(m).attr("d","M"+t+" "+o+" L"+(-r.left-100)+" "+(r.top-110)+" L"+(-r.left-100)+" "+(r.bottom-160)),$(m).css("position","relative"),$(m).attr("fill","#47DBB4"),$(m).attr("opacity",".2")}}),s.append(m),a>0?$(m).fadeIn(900):$(m).fadeOut(900)}()})},!1);var l=JSON.parse(localStorage.getItem("mapStyleProperties"));console.log(l),$("#IDmapbg").css("background-color",t("bodyBackgroundColor")),$.each(l,function(t,e){$("#IDmapbg").css(t,e)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
