function goFullScreen(){var t=document.getElementById("full_screen");document.getElementById("bezier-canvas");t.requestFullScreen?t.requestFullScreen():t.webkitRequestFullScreen?t.webkitRequestFullScreen():t.mozRequestFullScreen&&t.mozRequestFullScreen(),t.width="1200",t.height="933"}$(document).ready(function(){var t=document.getElementById("bezier-canvas");t.width=window.innerWidth,t.height=window.innerHeight,$(".wrap_map").css("background-color",function(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1"};if(e[t])return e[t]}("bodyBackgroundColor")),$("#openMap").bind("click",function(){$("#gallery").fadeIn(2e3)}),$('a[href^="#"]').click(function(){return elementClick=$(this).attr("href"),destination=$(elementClick).offset().top,$("body").animate({scrollTop:destination},700),$("html").animate({scrollTop:destination},700),!1})});var createNode=function(t,e,o,s){return"object"!=typeof o&&(o={x:t,y:e}),"object"!=typeof s&&(s={x:t,y:e}),{x:t,y:e,controls:[o,s],lock:!0}},p=function(t){void 0===t&&(t="got it"),console.log(t)},bezierEditor=function(t){var e={state:{down:!1,current:null,selectedNode:null,selectType:null,dragMode:0},nodes:[],canvas:null,pointSize:8,halfPointSize:0,backgroudImage:null,ctx:null,init:function(t){function o(t,e){var o=t.getBoundingClientRect();return{x:e.clientX-o.left,y:e.clientY-o.top}}window.onpopstate=function(t){t.state&&(e.nodes=t.state.nodes,e.state=t.state.state,e.draw())},this.canvas=document.getElementById(t),window.onkeypress=function(t){if(1==t.altKey&&console.log("lol"),1==t.ctrlKey)switch(console.log("ctrl"),t.keyCode){case 26:e.undo();break;case 25:e.redo();break;case 86:console.log(1),e.increaseScreen()}},this.canvas.onselectstart=function(){return!1},this.ctx=this.canvas.getContext("2d"),this.halfPointSize=this.pointSize/2;var s=0,r=0;this.canvas.onmousedown=function(t){var n=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1"},l={cx:0,cy:0,r:n.pointsRadius,id:0};if(e.state.down=!0,1==t.ctrlKey)e.state.dragMode=2*t.ctrlKey+t.altKey,e.select(t);else if(1==t.shiftKey){try{var i=JSON.parse(localStorage.getItem("circlesCoords"))||[]}catch(t){}e.state.down=!1;var a=JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:""},c=(JSON.parse(localStorage.getItem("SreenCTM")),0),h=0,d=(document.getElementById("bezier-canvas"),document.getElementById("map_bg"));console.log(d);var u,f;if(a.transform.length>0){var g=a.transform.match(/[+-]?\d+(\.\d+)?/g).map(function(t){return parseFloat(t)});console.log(g),x=g[0],u=g[1],f=g[2],console.log(x,u,f)}else x=1,u=0,f=0;console.log(x,u,f);var y=o(d,t);x||x>0?(c=y.x/x,h=y.y/x,console.log(c,h)):(c=y.x,h=y.y),s++,l.cx=c,l.cy=h;var p=new Date;l.time=p.getTime(),console.log(s),i.push(l),console.log(i),localStorage.setItem("circlesCoords",JSON.stringify(i)),console.log(c,h);var S=n.pointsRadius;(P=this.getContext("2d")).beginPath(),P.fillStyle=n.mapPointsColor,P.arc(c,h,S,0,2*Math.PI),P.lineWidth=2,P.strokeStyle=n.mapPointsBorderColor,P.stroke(),P.fill(),console.log(P)}else if(1==t.altKey){try{var m=JSON.parse(localStorage.getItem("deleteCircles"))||[]}catch(t){}e.state.down=!1,console.log("lol");var v={cx:0,cy:0,r:8,id:0},x=JSON.parse(localStorage.getItem("zoom"));c=0,h=0,document.getElementById("bezier-canvas"),d=document.getElementById("map_bg");console.log(d);y=o(d,t);x||x>0?(c=y.x/x,h=y.y/x):(c=y.x,h=y.y),r++,v.cx=c,v.cy=h,console.log(r),m.push(v),console.log(m),localStorage.setItem("deleteCircles",JSON.stringify(m)),console.log(c,h);var P;S=8;(P=this.getContext("2d")).beginPath(),P.fillStyle="red",P.arc(c,h,8,0,2*Math.PI),P.fill(),console.log(P),e.draw()}else{for(var b=e.nodes,z=0;z<b.length;++z){var C=t.offsetX,N=t.offsetY;if(C>b[z].x-e.halfPointSize&&C<b[z].x+e.halfPointSize&&N>b[z].y-e.halfPointSize&&N<b[z].y+e.halfPointSize)return e.deleteNode(b[z]),void e.draw()}e.addNode(t)}},this.canvas.onmousemove=function(t){var o=t.offsetX,s=t.offsetY;if(1==e.state.down)switch(e.selectedNode&&e.cursor("all-scroll"),e.state.selectType){case"node":e.dragNode(o,s);break;case"control0":e.dragControlPoint(o,s,0);break;case"control1":e.dragControlPoint(o,s,1);break;default:e.createControlPoint(o,s)}else{for(var r=e.nodes,n=0;n<r.length;++n){o=t.offsetX,s=t.offsetY;if(o>r[n].x-e.halfPointSize&&o<r[n].x+e.halfPointSize&&s>r[n].y-e.halfPointSize&&s<r[n].y+e.halfPointSize)return void(t.ctrlKey?e.cursor("all-scroll"):e.cursor("alias"))}e.cursor("default")}1==t.shiftKey&&e.cursor("url(https://cdn0.iconfinder.com/data/icons/feather/96/circle-add-20.png) 10 10, auto "),1==t.altKey&&e.cursor("url(https://cdn0.iconfinder.com/data/icons/feather/96/circle-cross-20.png) 10 10, auto")},this.canvas.onmouseup=function(t){e.mouseup(t)}},cursor:function(t){this.canvas.style.cursor=t},loadImage:function(t){localStorage.removeItem("imgSize");this.backgroundImage=new Image,this.backgroundImage.src=t,this.draw()},save:function(){history.pushState({nodes:this.nodes,state:this.state},location.href)},increaseScreen:function(){document.getElementById("bezier-canvas").requestFullscreen()},undo:function(){history.back()},redo:function(){history.forward()},addNode:function(t){var e=t.offsetX,o=t.offsetY,s=createNode(e,o,{x:e,y:o},{x:e,y:o});this.nodes.push(s),this.state.current=s,this.save(),this.draw()},deleteNode:function(t){for(var e=this.nodes,o=0;o<e.length;++o)if(e[o]===t)return t===this.state.current&&(this.state.current=null),e.splice(o,1),void this.draw()},dragNode:function(t,e){var o=this.state.selectedNode;if(!o)return!1;var s=t-o.x,r=e-o.y;o.controls[0].x+=s,o.controls[0].y+=r,o.controls[1].x+=s,o.controls[1].y+=r,o.x=t,o.y=e,this.draw()},dragControlPoint:function(t,e,o){var s=this.state.selectedNode,r=s.controls[o],n=s.controls[1-o];if(3==this.state.dragMode||2==this.state.dragMode&&s.lock){var l=Math.atan((r.y-s.y)/(r.x-s.x)),i=Math.atan((e-s.y)/(t-s.x));r.x<s.x&&(l+=Math.PI),t<s.x&&(i+=Math.PI);var a={};a.x=(n.x-s.x)*Math.cos(i-l)-(n.y-s.y)*Math.sin(i-l)+s.x,a.y=(n.x-s.x)*Math.sin(i-l)+(n.y-s.y)*Math.cos(i-l)+s.y,s.controls[1-o]=a}r.x=t,r.y=e,this.draw()},createControlPoint:function(t,e){var o=this.state.current;o.controls[1].x=t,o.controls[1].y=e,o.controls[0].x=2*o.x-t,o.controls[0].y=2*o.y-e,this.draw()},mouseup:function(){this.state.down=!1,1==this.state.dragMode&&this.state.selectedNode&&(this.state.selectedNode.lock=!1),this.state.dragMode=0,this.state.selectedNode=null,this.state.selectType=null,this.cursor("default")},select:function(t){for(var e=this.nodes,o=0;o<e.length;++o){var s=t.offsetX,r=t.offsetY;if(s>e[o].x-this.halfPointSize&&s<e[o].x+this.halfPointSize&&r>e[o].y-this.halfPointSize&&r<e[o].y+this.halfPointSize)return this.cursor("all-scroll"),this.state.selectedNode=e[o],this.state.selectType="node",this.draw(),!0}for(o=0;o<e.length;++o){s=t.offsetX,r=t.offsetY;if(s>e[o].controls[0].x-this.halfPointSize&&s<e[o].controls[0].x+this.halfPointSize&&r>e[o].controls[0].y-this.halfPointSize&&r<e[o].controls[0].y+this.halfPointSize)return this.cursor("all-scroll"),this.state.selectedNode=e[o],this.state.selectType="control0",this.draw(),!0;if(s>e[o].controls[1].x-this.halfPointSize&&s<e[o].controls[1].x+this.halfPointSize&&r>e[o].controls[1].y-this.halfPointSize&&r<e[o].controls[1].y+this.halfPointSize)return this.cursor("all-scroll"),this.state.selectedNode=e[o],this.state.selectType="control1",this.draw(),!0}return this.state.selectedNode=null,this.state.selectType=null,!1},draw:function(){var t=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1"},e=this.ctx;e.clearRect(0,0,this.canvas.width,this.canvas.height),e.save(),this.backgroundImage&&e.drawImage(this.backgroundImage,0,0),e.save(),e.strokeStyle="transparent",e.beginPath(),e.moveTo(0,0),e.lineTo(640,0),e.lineTo(640,480),e.lineTo(0,480),e.lineTo(0,0),e.stroke(),e.strokeStyle="#00FF00";var o=this.nodes;this.state.current&&(e.beginPath(),e.moveTo(this.state.current.x,this.state.current.y),e.lineTo(this.state.current.controls[0].x,this.state.current.controls[0].y),e.moveTo(this.state.current.x,this.state.current.y),e.lineTo(this.state.current.controls[1].x,this.state.current.controls[1].y),e.stroke(),e.fillStyle="#FFFF00",e.fillRect(this.state.current.controls[0].x-this.halfPointSize,this.state.current.controls[0].y-this.halfPointSize,this.pointSize,this.pointSize),e.fillRect(this.state.current.controls[1].x-this.halfPointSize,this.state.current.controls[1].y-this.halfPointSize,this.pointSize,this.pointSize)),e.save(),e.fillStyle="#FFFF00";for(var s=0;s<o.length;++s)e.fillRect(o[s].x-this.halfPointSize,o[s].y-this.halfPointSize,this.pointSize,this.pointSize);if(null!=this.state.selectedNode&&(e.fillStyle="#000",e.beginPath(),e.arc(this.state.selectedNode.controls[0].x,this.state.selectedNode.controls[0].y,this.halfPointSize,0,2*Math.PI,!0),e.closePath(),e.fill(),e.beginPath(),e.arc(this.state.selectedNode.controls[1].x,this.state.selectedNode.controls[1].y,this.halfPointSize,0,2*Math.PI,!0),e.closePath(),e.fill(),e.beginPath(),e.fillRect(this.state.selectedNode.x-this.halfPointSize,this.state.selectedNode.y-this.halfPointSize,this.pointSize,this.pointSize),e.moveTo(this.state.selectedNode.x,this.state.selectedNode.y),e.lineTo(this.state.selectedNode.controls[0].x,this.state.selectedNode.controls[0].y),e.moveTo(this.state.selectedNode.x,this.state.selectedNode.y),e.lineTo(this.state.selectedNode.controls[1].x,this.state.selectedNode.controls[1].y),e.stroke()),e.strokeStyle=t.mapRouteColor,o.length>1)for(s=0;s<o.length-1;++s)e.beginPath(),e.moveTo(o[s].x,o[s].y),e.bezierCurveTo(o[s].controls[1].x,o[s].controls[1].y,o[s+1].controls[0].x,o[s+1].controls[0].y,o[s+1].x,o[s+1].y),e.stroke();e.strokeStyle=t.mapRouteColor;var r=JSON.parse(localStorage.getItem("SavedCurves"));if(r){for(s=0;s<r.length;++s)e.beginPath(),e.moveTo(r[s].p1[0],r[s].p1[1]),e.bezierCurveTo(r[s].p2[0],r[s].p2[1],r[s].p3[0],r[s].p3[1],r[s].p4[0],r[s].p4[1]),e.stroke();e.strokeStyle=t.mapRouteColor}var n=JSON.parse(localStorage.getItem("circlesCoords"))||[],l=JSON.parse(localStorage.getItem("deleteCircles"))||[];if(n.length>0){for(s=0;s<n.length;s++)for(var i=0;i<l.length;i++)Math.abs(Math.round(n[s].cx-l[i].cx))<=8&&Math.abs(Math.round(n[s].cy-l[i].cy))<=8&&n.splice(s,1);console.log(n)}l.length=null,localStorage.setItem("deleteCircles",JSON.stringify(l)),localStorage.setItem("circlesCoords",JSON.stringify(n));for(s=0;s<n.length;s++)n&&(e.beginPath(),e.fillStyle=t.mapPointsColor,e.arc(n[s].cx,n[s].cy,t.pointsRadius,0,2*Math.PI),e.fill(),e.strokeStyle=t.mapPointsBorderColor,e.stroke())},getLength:function(){for(var t=function(t){return{f1:t*t*t,f2:3*t*t*(1-t),f3:3*t*(1-t)*(1-t),f4:(1-t)*(1-t)*(1-t)}},e=function(t,e){return Math.sqrt((t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1]))},o=0,s=[],r=0;r<this.nodes.length-1;++r){for(var n=this.nodes[r],l=this.nodes[r+1],i=[n.x,n.y],a=[n.controls[1].x,n.controls[1].y],c=[l.controls[0].x,l.controls[0].y],h=[l.x,l.y],d=[n.x,n.y],u=0,f=0;f<1;f+=.01){var g=t(f),y=[0,0];y[0]=i[0]*g.f1+a[0]*g.f2+c[0]*g.f3+h[0]*g.f4,y[1]=i[1]*g.f1+a[1]*g.f2+c[1]*g.f3+h[1]*g.f4,u+=e(d,y),d=y}s.push(u),o+=u}var p=[];for(r=0;r<this.nodes.length-1;++r)p.push(s[r]/o);return p},exportBezier:function(){for(var t=[],e="M",o=(this.getLength(),0);o<this.nodes.length-1;++o){var s=this.nodes[o],r=this.nodes[o+1],n=[s.x,s.y],l=[s.controls[1].x,s.controls[1].y],i=[r.controls[0].x,r.controls[0].y],a=[r.x,r.y],c={};c.p1=n,c.p2=l,c.p3=i,c.p4=a,t.push(c),e+=" "+n[0]+", "+n[1]+" C "+l[0]+", "+l[1]+", "+ +i[0]+", "+i[1]+", "+a[0]+", "+a[1]+" T"}return e},ReturnSavedPath:function(){for(var t=JSON.parse(localStorage.getItem("SavedCurves"))||[],e="",o=(this.getLength(),0);o<this.nodes.length-1;++o){var s=this.nodes[o],r=this.nodes[o+1],n=[s.x,s.y],l=[s.controls[1].x,s.controls[1].y],i=[r.controls[0].x,r.controls[0].y],a=[r.x,r.y],c={};c.p1=n,c.p2=l,c.p3=i,c.p4=a,t.push(c),e+=" "+n[0]+", "+n[1]+" C "+l[0]+", "+l[1]+", "+ +i[0]+", "+i[1]+", "+a[0]+", "+a[1]+" T"}return localStorage.setItem("SavedSvgPath",JSON.stringify(e)),t},clearBezier:function(){var t=this.ctx;return e.nodes=[],t.clearRect(0,0,e.width,e.height),console.log(t),console.log(e),e}};return e.init(t),e};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
