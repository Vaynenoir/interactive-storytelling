function goFullScreen(){var t=document.getElementById("full_screen");document.getElementById("bezier-canvas");t.requestFullScreen?t.requestFullScreen():t.webkitRequestFullScreen?t.webkitRequestFullScreen():t.mozRequestFullScreen&&t.mozRequestFullScreen(),t.width="1200",t.height="933"}$(document).ready(function(){var t=document.getElementById("bezier-canvas");t.width=window.innerWidth,t.height=window.innerHeight,$(".wrap_map").css("background-color",function(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1"};if(e[t])return e[t]}("bodyBackgroundColor")),$("#openMap").bind("click",function(){$("#gallery").fadeIn(2e3)}),$('a[href^="#"]').click(function(){return elementClick=$(this).attr("href"),destination=$(elementClick).offset().top,$("body").animate({scrollTop:destination},700),$("html").animate({scrollTop:destination},700),!1})});var createNode=function(t,e,o,s){return"object"!=typeof o&&(o={x:t,y:e}),"object"!=typeof s&&(s={x:t,y:e}),{x:t,y:e,controls:[o,s],lock:!0}},p=function(t){void 0===t&&(t="got it"),console.log(t)},bezierEditor=function(t){var e={state:{down:!1,current:null,selectedNode:null,selectType:null,dragMode:0},nodes:[],canvas:null,pointSize:8,halfPointSize:0,backgroudImage:null,ctx:null,init:function(t){function o(t,e){var o=t.getBoundingClientRect();return{x:e.clientX-o.left,y:e.clientY-o.top}}window.onpopstate=function(t){t.state&&(e.nodes=t.state.nodes,e.state=t.state.state,e.draw())},this.canvas=document.getElementById(t),window.onkeypress=function(t){if(1==t.altKey&&console.log("lol"),1==t.ctrlKey)switch(console.log("ctrl"),t.keyCode){case 26:e.undo();break;case 25:e.redo();break;case 86:console.log(1),e.increaseScreen()}},this.canvas.onselectstart=function(){return!1},this.ctx=this.canvas.getContext("2d"),this.halfPointSize=this.pointSize/2;var s=0,r=0;this.canvas.onmousedown=function(t){var n=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1"},l={cx:0,cy:0,r:n.pointsRadius,id:0};if(e.state.down=!0,1==t.ctrlKey)e.state.dragMode=2*t.ctrlKey+t.altKey,e.select(t);else if(1==t.shiftKey){try{var i=JSON.parse(localStorage.getItem("circlesCoords"))||[]}catch(t){}e.state.down=!1;var a=JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:""},c=(JSON.parse(localStorage.getItem("SreenCTM")),0),h=0,d=(document.getElementById("bezier-canvas"),document.getElementById("map_bg"));console.log(d);var u,f;if(a.transform.length>0){var g=a.transform.match(/[+-]?\d+(\.\d+)?/g).map(function(t){return parseFloat(t)});console.log(g),x=g[0],u=g[1],f=g[2],console.log(x,u,f)}else x=1,u=0,f=0;console.log(x,u,f);var y=o(d,t);x||x>0?(c=y.x/x,h=y.y/x,console.log(c,h)):(c=y.x,h=y.y),s++,l.cx=c,l.cy=h;var p=new Date;l.time=p.getTime(),console.log(s),i.push(l),console.log(i),localStorage.setItem("circlesCoords",JSON.stringify(i)),console.log(c,h);var S=n.pointsRadius;(P=this.getContext("2d")).beginPath(),P.fillStyle=n.mapPointsColor,P.arc(c,h,S,0,2*Math.PI),P.lineWidth=2,P.strokeStyle=n.mapPointsBorderColor,P.stroke(),P.fill(),console.log(P)}else if(1==t.altKey){try{var m=JSON.parse(localStorage.getItem("deleteCircles"))||[]}catch(t){}e.state.down=!1,console.log("lol");var v={cx:0,cy:0,r:8,id:0},x=JSON.parse(localStorage.getItem("zoom"));c=0,h=0,document.getElementById("bezier-canvas"),d=document.getElementById("map_bg");console.log(d);y=o(d,t);x||x>0?(c=y.x/x,h=y.y/x):(c=y.x,h=y.y),r++,v.cx=c,v.cy=h,console.log(r),m.push(v),console.log(m),localStorage.setItem("deleteCircles",JSON.stringify(m)),console.log(c,h);var P;S=8;(P=this.getContext("2d")).beginPath(),P.fillStyle="red",P.arc(c,h,8,0,2*Math.PI),P.fill(),console.log(P),e.draw()}else{for(var b=e.nodes,z=0;z<b.length;++z){var C=t.offsetX,N=t.offsetY;if(C>b[z].x-e.halfPointSize&&C<b[z].x+e.halfPointSize&&N>b[z].y-e.halfPointSize&&N<b[z].y+e.halfPointSize)return e.deleteNode(b[z]),void e.draw()}e.addNode(t)}},this.canvas.onmousemove=function(t){var o=t.offsetX,s=t.offsetY;if(1==e.state.down)switch(e.selectedNode&&e.cursor("all-scroll"),e.state.selectType){case"node":e.dragNode(o,s);break;case"control0":e.dragControlPoint(o,s,0);break;case"control1":e.dragControlPoint(o,s,1);break;default:e.createControlPoint(o,s)}else{for(var r=e.nodes,n=0;n<r.length;++n){o=t.offsetX,s=t.offsetY;if(o>r[n].x-e.halfPointSize&&o<r[n].x+e.halfPointSize&&s>r[n].y-e.halfPointSize&&s<r[n].y+e.halfPointSize)return void(t.ctrlKey?e.cursor("all-scroll"):e.cursor("alias"))}e.cursor("default")}1==t.shiftKey&&e.cursor("url(https://cdn0.iconfinder.com/data/icons/feather/96/circle-add-20.png) 10 10, auto "),1==t.altKey&&e.cursor("url(https://cdn0.iconfinder.com/data/icons/feather/96/circle-cross-20.png) 10 10, auto")},this.canvas.onmouseup=function(t){e.mouseup(t)}},cursor:function(t){this.canvas.style.cursor=t},loadImage:function(t){localStorage.removeItem("imgSize");this.backgroundImage=new Image,this.backgroundImage.src=t,this.draw()},save:function(){history.pushState({nodes:this.nodes,state:this.state},location.href)},increaseScreen:function(){document.getElementById("bezier-canvas").requestFullscreen()},undo:function(){history.back()},redo:function(){history.forward()},addNode:function(t){var e=t.offsetX,o=t.offsetY,s=createNode(e,o,{x:e,y:o},{x:e,y:o});this.nodes.push(s),this.state.current=s,this.save(),this.draw()},deleteNode:function(t){for(var e=this.nodes,o=0;o<e.length;++o)if(e[o]===t)return t===this.state.current&&(this.state.current=null),e.splice(o,1),void this.draw()},dragNode:function(t,e){var o=this.state.selectedNode;if(!o)return!1;var s=t-o.x,r=e-o.y;o.controls[0].x+=s,o.controls[0].y+=r,o.controls[1].x+=s,o.controls[1].y+=r,o.x=t,o.y=e,this.draw()},dragControlPoint:function(t,e,o){var s=this.state.selectedNode,r=s.controls[o],n=s.controls[1-o];if(3==this.state.dragMode||2==this.state.dragMode&&s.lock){var l=Math.atan((r.y-s.y)/(r.x-s.x)),i=Math.atan((e-s.y)/(t-s.x));r.x<s.x&&(l+=Math.PI),t<s.x&&(i+=Math.PI);var a={};a.x=(n.x-s.x)*Math.cos(i-l)-(n.y-s.y)*Math.sin(i-l)+s.x,a.y=(n.x-s.x)*Math.sin(i-l)+(n.y-s.y)*Math.cos(i-l)+s.y,s.controls[1-o]=a}r.x=t,r.y=e,this.draw()},createControlPoint:function(t,e){var o=this.state.current;o.controls[1].x=t,o.controls[1].y=e,o.controls[0].x=2*o.x-t,o.controls[0].y=2*o.y-e,this.draw()},mouseup:function(){this.state.down=!1,1==this.state.dragMode&&this.state.selectedNode&&(this.state.selectedNode.lock=!1),this.state.dragMode=0,this.state.selectedNode=null,this.state.selectType=null,this.cursor("default")},select:function(t){for(var e=this.nodes,o=0;o<e.length;++o){var s=t.offsetX,r=t.offsetY;if(s>e[o].x-this.halfPointSize&&s<e[o].x+this.halfPointSize&&r>e[o].y-this.halfPointSize&&r<e[o].y+this.halfPointSize)return this.cursor("all-scroll"),this.state.selectedNode=e[o],this.state.selectType="node",this.draw(),!0}for(o=0;o<e.length;++o){s=t.offsetX,r=t.offsetY;if(s>e[o].controls[0].x-this.halfPointSize&&s<e[o].controls[0].x+this.halfPointSize&&r>e[o].controls[0].y-this.halfPointSize&&r<e[o].controls[0].y+this.halfPointSize)return this.cursor("all-scroll"),this.state.selectedNode=e[o],this.state.selectType="control0",this.draw(),!0;if(s>e[o].controls[1].x-this.halfPointSize&&s<e[o].controls[1].x+this.halfPointSize&&r>e[o].controls[1].y-this.halfPointSize&&r<e[o].controls[1].y+this.halfPointSize)return this.cursor("all-scroll"),this.state.selectedNode=e[o],this.state.selectType="control1",this.draw(),!0}return this.state.selectedNode=null,this.state.selectType=null,!1},draw:function(){var t=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1"},e=this.ctx;e.clearRect(0,0,this.canvas.width,this.canvas.height),e.save(),this.backgroundImage&&e.drawImage(this.backgroundImage,0,0),e.save(),e.strokeStyle="transparent",e.beginPath(),e.moveTo(0,0),e.lineTo(640,0),e.lineTo(640,480),e.lineTo(0,480),e.lineTo(0,0),e.stroke(),e.strokeStyle="#00FF00";var o=this.nodes;this.state.current&&(e.beginPath(),e.moveTo(this.state.current.x,this.state.current.y),e.lineTo(this.state.current.controls[0].x,this.state.current.controls[0].y),e.moveTo(this.state.current.x,this.state.current.y),e.lineTo(this.state.current.controls[1].x,this.state.current.controls[1].y),e.stroke(),e.fillStyle="#FFFF00",e.fillRect(this.state.current.controls[0].x-this.halfPointSize,this.state.current.controls[0].y-this.halfPointSize,this.pointSize,this.pointSize),e.fillRect(this.state.current.controls[1].x-this.halfPointSize,this.state.current.controls[1].y-this.halfPointSize,this.pointSize,this.pointSize)),e.save(),e.fillStyle="#FFFF00";for(var s=0;s<o.length;++s)e.fillRect(o[s].x-this.halfPointSize,o[s].y-this.halfPointSize,this.pointSize,this.pointSize);if(null!=this.state.selectedNode&&(e.fillStyle="#000",e.beginPath(),e.arc(this.state.selectedNode.controls[0].x,this.state.selectedNode.controls[0].y,this.halfPointSize,0,2*Math.PI,!0),e.closePath(),e.fill(),e.beginPath(),e.arc(this.state.selectedNode.controls[1].x,this.state.selectedNode.controls[1].y,this.halfPointSize,0,2*Math.PI,!0),e.closePath(),e.fill(),e.beginPath(),e.fillRect(this.state.selectedNode.x-this.halfPointSize,this.state.selectedNode.y-this.halfPointSize,this.pointSize,this.pointSize),e.moveTo(this.state.selectedNode.x,this.state.selectedNode.y),e.lineTo(this.state.selectedNode.controls[0].x,this.state.selectedNode.controls[0].y),e.moveTo(this.state.selectedNode.x,this.state.selectedNode.y),e.lineTo(this.state.selectedNode.controls[1].x,this.state.selectedNode.controls[1].y),e.stroke()),e.strokeStyle=t.mapRouteColor,o.length>1)for(s=0;s<o.length-1;++s)e.beginPath(),e.moveTo(o[s].x,o[s].y),e.bezierCurveTo(o[s].controls[1].x,o[s].controls[1].y,o[s+1].controls[0].x,o[s+1].controls[0].y,o[s+1].x,o[s+1].y),e.stroke();e.strokeStyle=t.mapRouteColor;var r=JSON.parse(localStorage.getItem("SavedCurves"));if(r){for(s=0;s<r.length;++s)e.beginPath(),e.moveTo(r[s].p1[0],r[s].p1[1]),e.bezierCurveTo(r[s].p2[0],r[s].p2[1],r[s].p3[0],r[s].p3[1],r[s].p4[0],r[s].p4[1]),e.stroke();e.strokeStyle=t.mapRouteColor}var n=JSON.parse(localStorage.getItem("circlesCoords"))||[],l=JSON.parse(localStorage.getItem("deleteCircles"))||[];if(n.length>0){for(s=0;s<n.length;s++)for(var i=0;i<l.length;i++)Math.abs(Math.round(n[s].cx-l[i].cx))<=8&&Math.abs(Math.round(n[s].cy-l[i].cy))<=8&&n.splice(s,1);console.log(n)}l.length=null,localStorage.setItem("deleteCircles",JSON.stringify(l)),localStorage.setItem("circlesCoords",JSON.stringify(n));for(s=0;s<n.length;s++)n&&(e.beginPath(),e.fillStyle=t.mapPointsColor,e.arc(n[s].cx,n[s].cy,t.pointsRadius,0,2*Math.PI),e.fill(),e.strokeStyle=t.mapPointsBorderColor,e.stroke())},getLength:function(){for(var t=function(t){return{f1:t*t*t,f2:3*t*t*(1-t),f3:3*t*(1-t)*(1-t),f4:(1-t)*(1-t)*(1-t)}},e=function(t,e){return Math.sqrt((t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1]))},o=0,s=[],r=0;r<this.nodes.length-1;++r){for(var n=this.nodes[r],l=this.nodes[r+1],i=[n.x,n.y],a=[n.controls[1].x,n.controls[1].y],c=[l.controls[0].x,l.controls[0].y],h=[l.x,l.y],d=[n.x,n.y],u=0,f=0;f<1;f+=.01){var g=t(f),y=[0,0];y[0]=i[0]*g.f1+a[0]*g.f2+c[0]*g.f3+h[0]*g.f4,y[1]=i[1]*g.f1+a[1]*g.f2+c[1]*g.f3+h[1]*g.f4,u+=e(d,y),d=y}s.push(u),o+=u}var p=[];for(r=0;r<this.nodes.length-1;++r)p.push(s[r]/o);return p},exportBezier:function(){for(var t=[],e="M",o=(this.getLength(),0);o<this.nodes.length-1;++o){var s=this.nodes[o],r=this.nodes[o+1],n=[s.x,s.y],l=[s.controls[1].x,s.controls[1].y],i=[r.controls[0].x,r.controls[0].y],a=[r.x,r.y],c={};c.p1=n,c.p2=l,c.p3=i,c.p4=a,t.push(c),e+=" "+n[0]+", "+n[1]+" C "+l[0]+", "+l[1]+", "+ +i[0]+", "+i[1]+", "+a[0]+", "+a[1]+" T"}return e},ReturnSavedPath:function(){for(var t=JSON.parse(localStorage.getItem("SavedCurves"))||[],e="",o=(this.getLength(),0);o<this.nodes.length-1;++o){var s=this.nodes[o],r=this.nodes[o+1],n=[s.x,s.y],l=[s.controls[1].x,s.controls[1].y],i=[r.controls[0].x,r.controls[0].y],a=[r.x,r.y],c={};c.p1=n,c.p2=l,c.p3=i,c.p4=a,t.push(c),e+=" "+n[0]+", "+n[1]+" C "+l[0]+", "+l[1]+", "+ +i[0]+", "+i[1]+", "+a[0]+", "+a[1]+" T"}return localStorage.setItem("SavedSvgPath",JSON.stringify(e)),t},clearBezier:function(){var t=this.ctx;return e.nodes=[],t.clearRect(0,0,e.width,e.height),console.log(t),console.log(e),e}};return e.init(t),e};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJlemllci1lZGl0b3IuanMiXSwibmFtZXMiOlsiZ29GdWxsU2NyZWVuIiwiY2FudmFzV3JhcHBlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZXF1ZXN0RnVsbFNjcmVlbiIsIndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuIiwibW96UmVxdWVzdEZ1bGxTY3JlZW4iLCJ3aWR0aCIsImhlaWdodCIsIiQiLCJyZWFkeSIsImNhbnZhcyIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImNzcyIsInNldHRpbmciLCJTZXR0aW5nc09iamVjdCIsIkpTT04iLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJtYXBDb2xvciIsIm1hcFN0cm9rZUNvbG9yIiwibWFwUG9pbnRzQ29sb3IiLCJtYXBQb2ludHNCb3JkZXJDb2xvciIsIm1hcFJvdXRlQ29sb3IiLCJib2R5QmFja2dyb3VuZENvbG9yIiwicm91dGVCb3JkZXJXaWR0aCIsInBvaW50c1JhZGl1cyIsInBvaW50c0JvcmRlcldpZHRoIiwiZ2V0U2V0dGluZ0Zyb21TdG9yYWdlIiwiYmluZCIsImZhZGVJbiIsImNsaWNrIiwiZWxlbWVudENsaWNrIiwidGhpcyIsImF0dHIiLCJkZXN0aW5hdGlvbiIsIm9mZnNldCIsInRvcCIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJjcmVhdGVOb2RlIiwieCIsInkiLCJjb250cm9sMSIsImNvbnRyb2wyIiwiY29udHJvbHMiLCJsb2NrIiwicCIsInRleHQiLCJjb25zb2xlIiwibG9nIiwiYmV6aWVyRWRpdG9yIiwiaWQiLCJlZGl0b3IiLCJzdGF0ZSIsImRvd24iLCJjdXJyZW50Iiwic2VsZWN0ZWROb2RlIiwic2VsZWN0VHlwZSIsImRyYWdNb2RlIiwibm9kZXMiLCJwb2ludFNpemUiLCJoYWxmUG9pbnRTaXplIiwiYmFja2dyb3VkSW1hZ2UiLCJjdHgiLCJpbml0IiwiZ2V0TW91c2VQb3MiLCJzdmciLCJldnQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImxlZnQiLCJjbGllbnRZIiwib25wb3BzdGF0ZSIsImUiLCJkcmF3Iiwib25rZXlwcmVzcyIsImFsdEtleSIsImN0cmxLZXkiLCJrZXlDb2RlIiwidW5kbyIsInJlZG8iLCJpbmNyZWFzZVNjcmVlbiIsIm9uc2VsZWN0c3RhcnQiLCJnZXRDb250ZXh0IiwiY291bnRlciIsImRlbGV0ZUNvdW50ZXIiLCJvbm1vdXNlZG93biIsIlNldHRpbmdzT2JqIiwiY2lyY2xlcyIsImN4IiwiY3kiLCJyIiwic2VsZWN0Iiwic2hpZnRLZXkiLCJjaXJjbGVzQXJyIiwiZXJyIiwiRGlzcGxhY2VtZW50IiwidHJhbnNmb3JtIiwiY2xpY2tYIiwiY2xpY2tZIiwibGVuZ3RoIiwiU3RyaW5nVmFsdWVzIiwibWF0Y2giLCJtYXAiLCJ2IiwicGFyc2VGbG9hdCIsInpvb20iLCJwb3MiLCJwb2ludERhdGUiLCJEYXRlIiwidGltZSIsImdldFRpbWUiLCJwdXNoIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImJlZ2luUGF0aCIsImZpbGxTdHlsZSIsImFyYyIsIk1hdGgiLCJQSSIsImxpbmVXaWR0aCIsInN0cm9rZVN0eWxlIiwic3Ryb2tlIiwiZmlsbCIsImNpcmNsZXNBcnJSZW1vdmUiLCJjaXJjbGVzVG9EZWxldGUiLCJfbm9kZXMiLCJpIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJkZWxldGVOb2RlIiwiYWRkTm9kZSIsIm9ubW91c2Vtb3ZlIiwiY3Vyc29yIiwiZHJhZ05vZGUiLCJkcmFnQ29udHJvbFBvaW50IiwiY3JlYXRlQ29udHJvbFBvaW50Iiwib25tb3VzZXVwIiwibW91c2V1cCIsInR5cGUiLCJzdHlsZSIsImxvYWRJbWFnZSIsImltYWdlVVJMIiwicmVtb3ZlSXRlbSIsImJhY2tncm91bmRJbWFnZSIsIkltYWdlIiwic3JjIiwic2F2ZSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJsb2NhdGlvbiIsImhyZWYiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsImJhY2siLCJmb3J3YXJkIiwiX25vZGUiLCJub2RlIiwic3BsaWNlIiwiZGVsdGFYIiwiZGVsdGFZIiwiaW5kZXgiLCJhIiwiYiIsImFuZ2xlSW5pdCIsImF0YW4iLCJhbmdsZUEiLCJ0ZW1wIiwiY29zIiwic2luIiwiX2N0eCIsImNsZWFyUmVjdCIsImRyYXdJbWFnZSIsIm1vdmVUbyIsImxpbmVUbyIsImZpbGxSZWN0IiwiY2xvc2VQYXRoIiwiYmV6aWVyQ3VydmVUbyIsIlNhdmVkTWFwTGluZXMiLCJwMSIsInAyIiwicDMiLCJwNCIsInNhdmVkTWFwQ29vcmRzIiwiZGVsZXRlTWFwQ29vcmRzIiwiaiIsImFicyIsInJvdW5kIiwiZ2V0TGVuZ3RoIiwiY29lZmZpY2llbnQiLCJ0IiwiZjEiLCJmMiIsImYzIiwiZjQiLCJzcXJ0IiwidG90YWwiLCJsZW5ndGhzIiwibjEiLCJuMiIsImxhc3RQb2ludCIsInRvdGFsTGVuZ3RoIiwiYyIsInBvaW50IiwicmVzdWx0IiwiZXhwb3J0QmV6aWVyIiwiQXJyTGluZXMiLCJzdHJpbmciLCJMaW5lT2JqIiwiUmV0dXJuU2F2ZWRQYXRoIiwiU2F2ZWRMaW5lcyIsImNsZWFyQmV6aWVyIl0sIm1hcHBpbmdzIjoiQUErQ0EsU0FBU0EsZUFFTCxJQUFJQyxFQUFnQkMsU0FBU0MsZUFBZSxlQUMvQkQsU0FBU0MsZUFBZSxpQkFDbENGLEVBQWNHLGtCQUNiSCxFQUFjRyxvQkFHVkgsRUFBY0ksd0JBQ2xCSixFQUFjSSwwQkFDVkosRUFBY0ssc0JBQ2xCTCxFQUFjSyx1QkFFbkJMLEVBQWNNLE1BQVEsT0FDckJOLEVBQWNPLE9BQVMsTUE1RDNCQyxFQUFFUCxVQUFVUSxNQUFNLFdBQ2QsSUFBSUMsRUFBU1QsU0FBU0MsZUFBZSxpQkFFckNRLEVBQU9KLE1BQVFLLE9BQU9DLFdBQ3RCRixFQUFPSCxPQUFTSSxPQUFPRSxZQW9CdkJMLEVBQUUsYUFBYU0sSUFBSSxtQkFqQnRCLFNBQStCQyxHQUM5QixJQUFJQyxFQUFpQkMsS0FBS0MsTUFBTUMsYUFBYUMsUUFBUSxlQUNsREMsU0FBVSx5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LEVBQUt0SyxLQUFLMkIsTUFBTXFFLEdBQ2hCdUUsRUFBS3ZLLEtBQUsyQixNQUFNcUUsRUFBSSxHQUNwQm1ELEdBQU1tQixFQUFHOUosRUFBRzhKLEVBQUc3SixHQUNmMkksR0FBTWtCLEVBQUcxSixTQUFTLEdBQUdKLEVBQUc4SixFQUFHMUosU0FBUyxHQUFHSCxHQUN2QzRJLEdBQU1rQixFQUFHM0osU0FBUyxHQUFHSixFQUFHK0osRUFBRzNKLFNBQVMsR0FBR0gsR0FDdkM2SSxHQUFNaUIsRUFBRy9KLEVBQUcrSixFQUFHOUosR0FFYnVLLEtBQ0pBLEVBQVE3QixHQUFLQSxFQUNiNkIsRUFBUTVCLEdBQUtBLEVBQ2I0QixFQUFRM0IsR0FBS0EsRUFDYjJCLEVBQVExQixHQUFLQSxFQUNid0IsRUFBUzdGLEtBQUsrRixHQUNkRSxHQUFjLElBQU0vQixFQUFHLEdBQUssS0FBT0EsRUFBRyxHQUFLLE1BQ3hDQyxFQUFHLEdBQUcsS0FBS0EsRUFBRyxHQUFHLE9BQ3BCQyxFQUFHLEdBQUcsS0FBS0EsRUFBRyxHQUFHLEtBQ2ZDLEVBQUcsR0FBRyxLQUFLQSxFQUFHLEdBQUcsS0FJdEIsT0FGQ3RLLGFBQWFrRyxRQUFRLGVBQWdCcEcsS0FBS3FHLFVBQVUrRixJQUU5Q0osR0FJUkssWUFBYSxXQUNaLElBQUl6QyxFQUFPMUksS0FBSytCLElBTWhCLE9BTEFYLEVBQU9PLFNBQ1ArRyxFQUFLQyxVQUFVLEVBQUcsRUFBR3ZILEVBQU9qRCxNQUFPaUQsRUFBT2hELFFBQzFDNEMsUUFBUUMsSUFBSXlILEdBQ1oxSCxRQUFRQyxJQUFJRyxHQUVMQSxJQVNULE9BREFBLEVBQU9ZLEtBQUtiLEdBQ0xDIiwiZmlsZSI6ImJlemllci1lZGl0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcclxuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJlemllci1jYW52YXNcIik7XHJcblxyXG4gICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG5cclxuXHJcblx0ZnVuY3Rpb24gZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKHNldHRpbmcpe1xyXG5cdFx0dmFyIFNldHRpbmdzT2JqZWN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIlNldHRpbmdzXCIpKSB8fCB7XHJcbiAgICBcdG1hcENvbG9yOiBcInJnYmEoMjU1LCAyMDQsIDEyOCwgMSlcIixcclxuICAgIFx0bWFwU3Ryb2tlQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAxKVwiLFxyXG4gICAgXHRtYXBQb2ludHNDb2xvcjogXCJyZ2JhKDAsIDAsIDI1NSwgMSlcIixcclxuICAgIFx0bWFwUG9pbnRzQm9yZGVyQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAxKVwiLFxyXG4gICAgXHRtYXBSb3V0ZUNvbG9yOiBcInJnYmEoMCwgMCwgMCwgMSlcIixcclxuICAgIFx0Ym9keUJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI0MywgMjI5LCAyNDUsIDEpXCIsXHJcbiAgICBcdHJvdXRlQm9yZGVyV2lkdGg6IFwiNFwiLFxyXG4gICAgXHRwb2ludHNSYWRpdXM6IFwiOFwiLFxyXG4gICAgXHRwb2ludHNCb3JkZXJXaWR0aDogXCIxXCJcclxuICAgIH07XHJcblx0XHRpZihTZXR0aW5nc09iamVjdFtzZXR0aW5nXSl7XHJcblx0XHRcdHJldHVybiBTZXR0aW5nc09iamVjdFtzZXR0aW5nXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG4gXHRcdFx0JChcIi53cmFwX21hcFwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIGdldFNldHRpbmdGcm9tU3RvcmFnZShcImJvZHlCYWNrZ3JvdW5kQ29sb3JcIikpO1xyXG5cclxuXHJcblxyXG5cdCQoJyNvcGVuTWFwJykuYmluZChcImNsaWNrXCIsZnVuY3Rpb24oKXtcclxuXHRcdCQoJyNnYWxsZXJ5JykuZmFkZUluKDIwMDApO1xyXG5cdH0pO1xyXG4gICAkKCdhW2hyZWZePVwiI1wiXScpLmNsaWNrKGZ1bmN0aW9uICgpIHsgXHJcbiAgICAgZWxlbWVudENsaWNrID0gJCh0aGlzKS5hdHRyKFwiaHJlZlwiKTtcclxuICAgICBkZXN0aW5hdGlvbiA9ICQoZWxlbWVudENsaWNrKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgXHJcbiAgICAgICAkKCdib2R5JykuYW5pbWF0ZSggeyBzY3JvbGxUb3A6IGRlc3RpbmF0aW9uIH0sIDcwMCApO1xyXG4gICBcclxuICAgICAgICQoJ2h0bWwnKS5hbmltYXRlKCB7IHNjcm9sbFRvcDogZGVzdGluYXRpb24gfSwgNzAwICk7XHJcbiAgICAgXHJcbiAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICB9KTtcclxufSk7XHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBnb0Z1bGxTY3JlZW4oKXtcclxuXHJcbiAgICB2YXIgY2FudmFzV3JhcHBlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZnVsbF9zY3JlZW5cIik7XHJcbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiZXppZXItY2FudmFzXCIpO1xyXG4gICAgaWYoY2FudmFzV3JhcHBlci5yZXF1ZXN0RnVsbFNjcmVlbil7XHJcbiAgICAgICAgY2FudmFzV3JhcHBlci5yZXF1ZXN0RnVsbFNjcmVlbigpO1xyXG5cclxuICAgICAgfSBcdFx0XHJcbiAgICBlbHNlIGlmKGNhbnZhc1dyYXBwZXIud2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4pXHJcbiAgICAgICAgY2FudmFzV3JhcHBlci53ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbigpO1xyXG4gICAgZWxzZSBpZihjYW52YXNXcmFwcGVyLm1velJlcXVlc3RGdWxsU2NyZWVuKXtcclxuICAgICAgICBjYW52YXNXcmFwcGVyLm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XHJcbiAgICAgICAgfVxyXG5cdFx0XHRjYW52YXNXcmFwcGVyLndpZHRoID0gXCIxMjAwXCI7XHJcbiBcdFx0XHRjYW52YXNXcmFwcGVyLmhlaWdodCA9IFwiOTMzXCI7XHJcbn1cclxuXHJcbnZhciBjcmVhdGVOb2RlID0gZnVuY3Rpb24oeCwgeSwgY29udHJvbDEsIGNvbnRyb2wyKSB7XHJcblx0aWYodHlwZW9mKGNvbnRyb2wxKSAhPSAnb2JqZWN0JylcclxuXHRcdGNvbnRyb2wxID0ge1xyXG5cdFx0XHR4OiB4LFxyXG5cdFx0XHR5OiB5LFxyXG5cdFx0fTtcclxuXHRpZih0eXBlb2YoY29udHJvbDIpICE9ICdvYmplY3QnKVxyXG5cdFx0Y29udHJvbDIgPSB7XHJcblx0XHRcdHg6IHgsXHJcblx0XHRcdHk6IHksXHJcblx0XHR9O1xyXG5cdHJldHVybiAge1xyXG5cdFx0XHR4IDogeCxcclxuXHRcdFx0eSA6IHksXHJcblx0XHRcdGNvbnRyb2xzOiBbY29udHJvbDEsIGNvbnRyb2wyXSxcclxuXHRcdFx0bG9jazogdHJ1ZSxcclxuXHRcdH1cclxufTtcclxuLy9mb3IgZGVidWdcclxudmFyIHAgPSBmdW5jdGlvbih0ZXh0KSB7XHJcblx0aWYodHlwZW9mKHRleHQpID09ICd1bmRlZmluZWQnKVxyXG5cdFx0dGV4dCA9ICdnb3QgaXQnO1xyXG5cdGNvbnNvbGUubG9nKHRleHQpO1xyXG59XHJcbnZhciBiZXppZXJFZGl0b3IgPSBmdW5jdGlvbihpZCkge1xyXG5cdHZhciBlZGl0b3IgPSB7XHJcblx0XHRzdGF0ZToge1xyXG5cdFx0XHRkb3duOiBmYWxzZSxcclxuXHRcdFx0Y3VycmVudDogbnVsbCxcclxuXHRcdFx0c2VsZWN0ZWROb2RlOiBudWxsLFxyXG5cdFx0XHRzZWxlY3RUeXBlOiBudWxsLFxyXG5cdFx0XHRkcmFnTW9kZTogMCxcclxuXHRcdH0sXHJcblx0XHRub2RlczogW10sXHJcblx0XHRjYW52YXM6IG51bGwsXHJcblx0XHRwb2ludFNpemU6IDgsXHJcblx0XHRoYWxmUG9pbnRTaXplIDogMCxcclxuXHRcdGJhY2tncm91ZEltYWdlOiBudWxsLFxyXG5cdFx0Y3R4IDogbnVsbCxcclxuXHRcdGluaXQgOiBmdW5jdGlvbihpZCkge1xyXG5cdFx0XHQvL2hpc3RvcnlcclxuXHRcdFx0d2luZG93Lm9ucG9wc3RhdGUgPSBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYoZS5zdGF0ZSkge1xyXG5cdFx0XHRcdFx0ZWRpdG9yLm5vZGVzID0gZS5zdGF0ZS5ub2RlcztcclxuXHRcdFx0XHRcdGVkaXRvci5zdGF0ZSA9IGUuc3RhdGUuc3RhdGU7XHJcblx0XHRcdFx0XHRlZGl0b3IuZHJhdygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHRcdFx0Ly9ob29rIEN0cmwrWiBhbmQgQ3RybCtZIG9mIHRoZSBjYW52YXNcclxuXHRcdFx0d2luZG93Lm9ua2V5cHJlc3MgPSBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYoZS5hbHRLZXkgPT0gdHJ1ZSl7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnbG9sJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKGUuY3RybEtleSA9PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcImN0cmxcIik7XHJcblx0XHRcdFx0XHRzd2l0Y2goZS5rZXlDb2RlKSB7XHJcblx0XHRcdFx0XHRjYXNlIDI2Olx0Ly8gQ3RybCtaXHRVbmRvXHJcblx0XHRcdFx0XHRcdGVkaXRvci51bmRvKCk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAyNTpcdC8vIEN0cmwrWVx0UmVkb1xyXG5cdFx0XHRcdFx0XHRlZGl0b3IucmVkbygpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgODY6XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKDEpO1xyXG5cdFx0XHRcdFx0XHRlZGl0b3IuaW5jcmVhc2VTY3JlZW4oKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGZ1bmN0aW9uIGdldE1vdXNlUG9zKHN2ZywgZXZ0KSB7XHJcbiAgdmFyIHJlY3QgPSBzdmcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgcmV0dXJuIHtcclxuICAgIHg6IGV2dC5jbGllbnRYIC0gcmVjdC5sZWZ0LFxyXG4gICAgeTogZXZ0LmNsaWVudFkgLSByZWN0LnRvcFxyXG4gIH07XHJcbn1cclxuXHJcblxyXG5cclxuXHRcdFx0dGhpcy5jYW52YXMub25zZWxlY3RzdGFydCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9XHJcblx0XHRcdHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxuXHRcdFx0dGhpcy5oYWxmUG9pbnRTaXplID0gdGhpcy5wb2ludFNpemUgLyAyO1xyXG5cclxuXHRcdFx0XHRcdHZhciBjb3VudGVyID0gMDtcclxuXHRcdFx0XHRcdHZhciBkZWxldGVDb3VudGVyID0gMDtcclxuXHRcdFx0XHJcblxyXG5cclxuXHRcdFx0dGhpcy5jYW52YXMub25tb3VzZWRvd24gPSBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0dmFyIFNldHRpbmdzT2JqID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnU2V0dGluZ3MnKSkgIHx8IHtcclxuICAgIFx0bWFwQ29sb3I6IFwicmdiYSgyNTUsIDIwNCwgMTI4LCAxKVwiLFxyXG4gICAgXHRtYXBTdHJva2VDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDEpXCIsXHJcbiAgICBcdG1hcFBvaW50c0NvbG9yOiBcInJnYmEoMCwgMCwgMjU1LCAxKVwiLFxyXG4gICAgXHRtYXBQb2ludHNCb3JkZXJDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDEpXCIsXHJcbiAgICBcdG1hcFJvdXRlQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAxKVwiLFxyXG4gICAgXHRib2R5QmFja2dyb3VuZENvbG9yOiBcInJnYmEoMjQzLCAyMjksIDI0NSwgMSlcIixcclxuICAgIFx0cm91dGVCb3JkZXJXaWR0aDogXCI0XCIsXHJcbiAgICBcdHBvaW50c1JhZGl1czogXCI4XCIsXHJcbiAgICBcdHBvaW50c0JvcmRlcldpZHRoOiBcIjFcIlxyXG5cdFx0ICAgIH07XHJcblxyXG5cdFx0XHRcdFx0dmFyIGNpcmNsZXMgPSB7XHJcblx0XHRcdFx0XHRcdFx0Y3g6IDAsXHJcblx0XHRcdFx0XHRcdFx0Y3k6IDAsXHJcblx0XHRcdFx0XHRcdFx0cjogU2V0dGluZ3NPYmoucG9pbnRzUmFkaXVzLFxyXG5cdFx0XHRcdFx0XHRcdGlkOiAwXHJcblx0XHRcdFx0XHR9O1xyXG5cclxuICAgXHRcdCBcclxuXHRcdFx0XHRlZGl0b3Iuc3RhdGUuZG93biA9IHRydWU7XHJcblx0XHRcdFx0aWYoZS5jdHJsS2V5ID09IHRydWUpIHtcclxuXHRcdFx0XHRcdGVkaXRvci5zdGF0ZS5kcmFnTW9kZSA9IGUuY3RybEtleSAqIDIgKyBlLmFsdEtleTtcclxuXHRcdFx0XHRcdGVkaXRvci5zZWxlY3QoZSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRlbHNlIGlmKGUuc2hpZnRLZXkgPT0gdHJ1ZSl7XHJcblx0XHRcdFx0XHR0cnl7XHJcblx0XHRcdFx0XHRcdHZhciBjaXJjbGVzQXJyID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2lyY2xlc0Nvb3JkcycpKSB8fCBbXTtcclxuXHRcdFx0XHRcdH1jYXRjaChlcnIpe1xyXG5cclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGVkaXRvci5zdGF0ZS5kb3duID0gZmFsc2U7XHJcblx0XHRcdFx0XHR2YXIgRGlzcGxhY2VtZW50ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbWFwU3R5bGVQcm9wZXJ0aWVzJykpIHx8IHsgdHJhbnNmb3JtOiBcIlwifTtcclxuXHRcdFx0XHRcdHZhciBzY3JlZW5DaGFuZ2VkQ1RNID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIlNyZWVuQ1RNXCIpKSB8fCB7IHpvb206IDAsIGU6IDAsIGY6IDB9O1xyXG5cdFx0XHRcdFx0dmFyIGNsaWNrWCA9IDA7XHJcblx0XHRcdFx0XHR2YXJcdGNsaWNrWSA9IDA7XHJcblx0XHRcdFx0XHR2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiZXppZXItY2FudmFzXCIpO1xyXG5cdFx0XHRcdFx0dmFyIHN2ZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFwX2JnXCIpO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coc3ZnKTtcclxuXHRcdFx0XHRcdHZhciAgem9vbSwgbGVmdCwgdG9wO1xyXG5cdFx0XHRcdFx0IGlmKChEaXNwbGFjZW1lbnQudHJhbnNmb3JtKS5sZW5ndGggPiAwKXtcclxuICAgICAgICAgICAgICAgIC8vIHNjYWxlSW1nID0gc3R5bGVQcm9wcy50cmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1TdHJpbmcgPSAoRGlzcGxhY2VtZW50LnRyYW5zZm9ybSk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzY2FsZUltZyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVnZXggPSAvWystXT9cXGQrKFxcLlxcZCspPy9nO1xyXG4gICAgICAgICAgICAgICAgdmFyIFN0cmluZ1ZhbHVlcyA9IHRyYW5zZm9ybVN0cmluZy5tYXRjaChyZWdleCkubWFwKGZ1bmN0aW9uKHYpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2KTsgXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFN0cmluZ1ZhbHVlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgem9vbSA9IFN0cmluZ1ZhbHVlc1swXTtcclxuICAgICAgICAgICAgICAgIGxlZnQgPSBTdHJpbmdWYWx1ZXNbMV0sXHJcbiAgICAgICAgICAgICAgICB0b3AgPSBTdHJpbmdWYWx1ZXNbMl07XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggem9vbSwgbGVmdCwgdG9wKTtcclxuXHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBcdHpvb20gPSAxO1xyXG4gICAgICAgICAgICBcdGxlZnQgPSAwO1xyXG4gICAgICAgICAgICBcdHRvcCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc29sZS5sb2coem9vbSwgbGVmdCwgdG9wKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgcG9zID0gZ2V0TW91c2VQb3Moc3ZnLGUpO1xyXG5cdFx0XHRcdFx0aWYoem9vbSB8fCB6b29tPjApe1xyXG5cdFx0XHRcdFx0Y2xpY2tYID0gcG9zLngvem9vbTsgXHJcblx0XHRcdFx0XHRjbGlja1kgPSBwb3MueS96b29tO1x0XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhjbGlja1gsIGNsaWNrWSk7XHRcdFx0XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNle1xyXG5cdFx0XHRcdFx0Y2xpY2tYID0gcG9zLng7IFxyXG5cdFx0XHRcdFx0Y2xpY2tZID0gcG9zLnk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcclxuXHRcdFx0XHRcdFx0Y291bnRlcisrO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRjaXJjbGVzLmN4ID0gY2xpY2tYO1xyXG5cdFx0XHRcdFx0Y2lyY2xlcy5jeSA9IGNsaWNrWTtcclxuXHRcdFx0XHRcdHZhciBwb2ludERhdGUgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0XHRcdFx0Y2lyY2xlcy50aW1lID0gcG9pbnREYXRlLmdldFRpbWUoKTtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGNvdW50ZXIpO1xyXG5cdFx0XHRcdFx0Ly8gY2lyY2xlcy5leF9pZCA9IGNvdW50ZXI7XHJcblx0XHRcdFx0XHRjaXJjbGVzQXJyLnB1c2goY2lyY2xlcyk7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhjaXJjbGVzQXJyKTtcclxuXHRcdFx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjaXJjbGVzQ29vcmRzJywgSlNPTi5zdHJpbmdpZnkoY2lyY2xlc0FycikpO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coY2xpY2tYLGNsaWNrWSk7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHIgPSBTZXR0aW5nc09iai5wb2ludHNSYWRpdXM7XHJcblx0XHRcdFx0XHR2YXIgY3R4ID0gdGhpcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cdFx0XHRcdFx0IFxyXG5cclxuICBcdFx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblxyXG4gIFx0XHRcdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IFNldHRpbmdzT2JqLm1hcFBvaW50c0NvbG9yO1xyXG5cclxuXHJcbiBcdFx0XHRcdFx0XHRcdFx0IGN0eC5hcmMoY2xpY2tYLCBjbGlja1ksIHIsIDAsIDIgKiBNYXRoLlBJKTtcclxuIFx0XHRcdFx0XHRcdFx0XHQgY3R4LmxpbmVXaWR0aCA9IDI7XHJcbiBcdFx0XHRcdFx0XHRcdFx0IGN0eC5zdHJva2VTdHlsZSA9IFNldHRpbmdzT2JqLm1hcFBvaW50c0JvcmRlckNvbG9yO1xyXG4gXHRcdFx0XHRcdFx0XHRcdCBjdHguc3Ryb2tlKCk7XHJcbiBcdFx0XHRcdFx0XHRcdFx0IGN0eC5maWxsKCk7XHJcbiBcdFx0XHRcdFx0XHRcdFx0IGNvbnNvbGUubG9nKGN0eCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdFx0ZWxzZSBpZiAoZS5hbHRLZXkgPT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdHRyeXtcclxuXHRcdFx0XHRcdHZhciBjaXJjbGVzQXJyUmVtb3ZlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZGVsZXRlQ2lyY2xlcycpKSB8fCBbXTtcclxuXHRcdFx0XHQgIH1jYXRjaChlcnIpe307XHJcblxyXG5cdFx0XHRcdCAgICBlZGl0b3Iuc3RhdGUuZG93biA9IGZhbHNlO1xyXG5cdFx0XHRcdCAgICBjb25zb2xlLmxvZygnbG9sJyk7XHJcblxyXG5cdFx0XHRcdCAgICB2YXIgY2lyY2xlc1RvRGVsZXRlID0ge1xyXG5cdFx0XHRcdCAgICAgICAgY3g6IDAsXHJcblx0XHRcdFx0ICAgICAgICBjeTogMCxcclxuXHRcdFx0XHQgICAgICAgIHI6IDgsXHJcblx0XHRcdFx0ICAgICAgICBpZDogMFxyXG5cdFx0XHRcdCAgICB9O1xyXG5cclxuXHJcblxyXG5cdFx0XHRcdCAgICB2YXIgem9vbSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3pvb20nKSk7XHJcblx0XHRcdFx0ICAgIHZhciBjbGlja1ggPSAwO1xyXG5cdFx0XHRcdCAgICB2YXIgY2xpY2tZID0gMDtcclxuXHRcdFx0XHQgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmV6aWVyLWNhbnZhc1wiKTtcclxuXHRcdFx0XHQgICAgdmFyIHN2ZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFwX2JnXCIpO1xyXG5cdFx0XHRcdCAgICBjb25zb2xlLmxvZyhzdmcpO1xyXG5cclxuXHRcdFx0XHQgICAgdmFyIHBvcyA9IGdldE1vdXNlUG9zKHN2ZywgZSk7XHJcblx0XHRcdFx0ICAgIGlmICh6b29tIHx8IHpvb20gPiAwKSB7XHJcblx0XHRcdFx0ICAgICAgICBjbGlja1ggPSBwb3MueCAvIHpvb207XHJcblx0XHRcdFx0ICAgICAgICBjbGlja1kgPSBwb3MueSAvIHpvb207XHJcblx0XHRcdFx0ICAgIH0gZWxzZSB7XHJcblx0XHRcdFx0ICAgICAgICBjbGlja1ggPSBwb3MueDtcclxuXHRcdFx0XHQgICAgICAgIGNsaWNrWSA9IHBvcy55O1xyXG5cdFx0XHRcdCAgICB9XHJcblxyXG5cclxuXHRcdFx0XHQgICAgZGVsZXRlQ291bnRlcisrO1xyXG5cclxuXHRcdFx0XHQgICAgY2lyY2xlc1RvRGVsZXRlLmN4ID0gY2xpY2tYO1xyXG5cdFx0XHRcdCAgICBjaXJjbGVzVG9EZWxldGUuY3kgPSBjbGlja1k7XHJcblx0XHRcdFx0ICAgIGNvbnNvbGUubG9nKGRlbGV0ZUNvdW50ZXIpO1xyXG5cdFx0XHRcdCAgICAvLyBjaXJjbGVzLmlkID0gY291bnRlcjtcclxuXHRcdFx0XHQgICAgY2lyY2xlc0FyclJlbW92ZS5wdXNoKGNpcmNsZXNUb0RlbGV0ZSk7XHJcblx0XHRcdFx0ICAgIGNvbnNvbGUubG9nKGNpcmNsZXNBcnJSZW1vdmUpO1xyXG5cdFx0XHRcdCAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZGVsZXRlQ2lyY2xlcycsIEpTT04uc3RyaW5naWZ5KGNpcmNsZXNBcnJSZW1vdmUpKTtcclxuXHRcdFx0XHQgICAgY29uc29sZS5sb2coY2xpY2tYLCBjbGlja1kpO1xyXG5cdFx0XHRcdCAgICB2YXIgciA9IDg7XHJcblx0XHRcdFx0ICAgIHZhciBjdHggPSB0aGlzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG5cdFx0XHRcdCAgICBjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0ICAgIGN0eC5maWxsU3R5bGUgPSBcInJlZFwiO1xyXG5cdFx0XHRcdCAgICBjdHguYXJjKGNsaWNrWCwgY2xpY2tZLCA4LCAwLCAyICogTWF0aC5QSSk7XHJcblx0XHRcdFx0ICAgIGN0eC5maWxsKCk7XHJcblx0XHRcdFx0ICAgIGNvbnNvbGUubG9nKGN0eCk7XHJcblx0XHRcdFx0ICAgXHRlZGl0b3IuZHJhdygpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cclxuXHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHR2YXIgX25vZGVzID0gZWRpdG9yLm5vZGVzO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBfbm9kZXMubGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0XHRcdFx0dmFyIHggPSBlLm9mZnNldFg7XHJcblx0XHRcdFx0XHRcdHZhciB5ID1cdGUub2Zmc2V0WTtcclxuXHJcblx0XHRcdFx0XHRcdGlmKHggPiBfbm9kZXNbaV0ueCAtIGVkaXRvci5oYWxmUG9pbnRTaXplICYmIHggPCBfbm9kZXNbaV0ueCArIGVkaXRvci5oYWxmUG9pbnRTaXplICYmIHkgPiBfbm9kZXNbaV0ueSAtIGVkaXRvci5oYWxmUG9pbnRTaXplICYmIHkgPCBfbm9kZXNbaV0ueSArIGVkaXRvci5oYWxmUG9pbnRTaXplKSB7XHJcblx0XHRcdFx0XHRcdFx0ZWRpdG9yLmRlbGV0ZU5vZGUoX25vZGVzW2ldKTtcclxuXHRcdFx0XHRcdFx0XHRlZGl0b3IuZHJhdygpO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGVkaXRvci5hZGROb2RlKGUpO1x0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRcclxuXHJcblxyXG5cclxuXHJcblx0XHRcdHRoaXMuY2FudmFzLm9ubW91c2Vtb3ZlID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgeCA9IGUub2Zmc2V0WDtcclxuXHRcdFx0XHRcdFx0dmFyIHkgPVx0ZS5vZmZzZXRZO1xyXG5cclxuXHRcdFx0XHRpZihlZGl0b3Iuc3RhdGUuZG93biA9PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRpZihlZGl0b3Iuc2VsZWN0ZWROb2RlKVxyXG5cdFx0XHRcdFx0XHRlZGl0b3IuY3Vyc29yKFwiYWxsLXNjcm9sbFwiKTtcclxuXHRcdFx0XHRcdHN3aXRjaChlZGl0b3Iuc3RhdGUuc2VsZWN0VHlwZSkge1xyXG5cdFx0XHRcdFx0XHRjYXNlICdub2RlJzogXHJcblx0XHRcdFx0XHRcdFx0ZWRpdG9yLmRyYWdOb2RlKHgsIHkpO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlICdjb250cm9sMCc6XHJcblx0XHRcdFx0XHRcdFx0ZWRpdG9yLmRyYWdDb250cm9sUG9pbnQoeCwgeSwgMCk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ2NvbnRyb2wxJzpcclxuXHRcdFx0XHRcdFx0XHRlZGl0b3IuZHJhZ0NvbnRyb2xQb2ludCh4LCB5LCAxKTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0XHRlZGl0b3IuY3JlYXRlQ29udHJvbFBvaW50KHgsIHkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHR2YXIgX25vZGVzID0gZWRpdG9yLm5vZGVzO1xyXG5cdFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IF9ub2Rlcy5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgeCA9IGUub2Zmc2V0WDtcclxuXHRcdFx0XHRcdFx0dmFyIHkgPSBlLm9mZnNldFk7XHJcblx0XHRcdFx0XHRcdGlmKHggPiBfbm9kZXNbaV0ueCAtIGVkaXRvci5oYWxmUG9pbnRTaXplICYmIHggPCBfbm9kZXNbaV0ueCArIGVkaXRvci5oYWxmUG9pbnRTaXplICYmIHkgPiBfbm9kZXNbaV0ueSAtIGVkaXRvci5oYWxmUG9pbnRTaXplICYmIHkgPCBfbm9kZXNbaV0ueSArIGVkaXRvci5oYWxmUG9pbnRTaXplKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYoIWUuY3RybEtleSlcclxuXHRcdFx0XHRcdFx0XHRcdGVkaXRvci5jdXJzb3IoXCJhbGlhc1wiKTtcclxuXHRcdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdFx0XHRlZGl0b3IuY3Vyc29yKFwiYWxsLXNjcm9sbFwiKTtcclxuXHRcdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWRpdG9yLmN1cnNvcihcImRlZmF1bHRcIik7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZihlLnNoaWZ0S2V5ID09IHRydWUpe1xyXG5cdFx0XHRcdFx0ZWRpdG9yLmN1cnNvcihcInVybChodHRwczovL2NkbjAuaWNvbmZpbmRlci5jb20vZGF0YS9pY29ucy9mZWF0aGVyLzk2L2NpcmNsZS1hZGQtMjAucG5nKSAxMCAxMCwgYXV0byBcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKGUuYWx0S2V5ID09IHRydWUpe1xyXG5cdFx0XHRcdFx0ZWRpdG9yLmN1cnNvcihcInVybChodHRwczovL2NkbjAuaWNvbmZpbmRlci5jb20vZGF0YS9pY29ucy9mZWF0aGVyLzk2L2NpcmNsZS1jcm9zcy0yMC5wbmcpIDEwIDEwLCBhdXRvXCIpO1xyXG5cdFx0XHRcdH1cclxuXHJcblxyXG5cclxuXHRcdFx0fTtcclxuXHRcdFx0dGhpcy5jYW52YXMub25tb3VzZXVwID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGVkaXRvci5tb3VzZXVwKGUpO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0Y3Vyc29yOiBmdW5jdGlvbih0eXBlKSB7XHJcblx0XHRcdHRoaXMuY2FudmFzLnN0eWxlLmN1cnNvciA9IHR5cGU7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHRsb2FkSW1hZ2U6IGZ1bmN0aW9uKGltYWdlVVJMKSB7XHJcblx0XHRcdC8vIHZhciBiZ0ltZyA9IG5ldyBJbWFnZSgpO1xyXG5cdFx0XHQvLyBiZ0ltZy5zcmMgPSBpbWFnZVVSTDtcclxuXHRcdFx0Ly8gYmdJbWcub25sb2FkID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0Ly8gXHR0aGlzLmJhY2tncm91bmRJbWFnZSA9IGJnSW1nO1xyXG5cdFx0XHQvLyB9XHJcblx0XHRcdGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdpbWdTaXplJyk7XHJcblx0XHRcdHZhciBpbWdTaXplID0gW107XHJcblx0XHRcdHRoaXMuYmFja2dyb3VuZEltYWdlID0gbmV3IEltYWdlKCk7XHJcblx0XHRcdHRoaXMuYmFja2dyb3VuZEltYWdlLnNyYyA9IGltYWdlVVJMO1xyXG5cdFxyXG5cdFx0XHR0aGlzLmRyYXcoKTtcclxuXHRcdH0sXHJcblx0XHRzYXZlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0aGlzdG9yeS5wdXNoU3RhdGUoe25vZGVzOnRoaXMubm9kZXMsc3RhdGU6dGhpcy5zdGF0ZX0sIGxvY2F0aW9uLmhyZWYpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRpbmNyZWFzZVNjcmVlbjogZnVuY3Rpb24oKXtcclxuXHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiZXppZXItY2FudmFzXCIpLnJlcXVlc3RGdWxsc2NyZWVuKCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdHVuZG86IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRoaXN0b3J5LmJhY2soKTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdHJlZG86IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRoaXN0b3J5LmZvcndhcmQoKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0YWRkTm9kZSA6ZnVuY3Rpb24oZSkge1xyXG5cdFx0XHR2YXIgeCA9IGUub2Zmc2V0WDtcclxuXHRcdFx0dmFyIHkgPSBlLm9mZnNldFk7XHJcblx0XHRcdHZhciBfbm9kZSA9IGNyZWF0ZU5vZGUoeCwgeSwge3g6eCwgeTp5fSwge3g6eCwgeTp5fSk7XHJcblx0XHRcdHRoaXMubm9kZXMucHVzaChfbm9kZSk7XHJcblx0XHRcdHRoaXMuc3RhdGUuY3VycmVudCA9IF9ub2RlO1xyXG5cdFx0XHR0aGlzLnNhdmUoKTtcclxuXHRcdFx0dGhpcy5kcmF3KCk7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHRkZWxldGVOb2RlOiBmdW5jdGlvbihub2RlKSB7XHJcblx0XHRcdHZhciBfbm9kZXMgPSB0aGlzLm5vZGVzO1xyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgX25vZGVzLmxlbmd0aDsgKytpKSB7XHJcblx0XHRcdFx0aWYoX25vZGVzW2ldID09PSBub2RlKSB7XHJcblx0XHRcdFx0XHRpZihub2RlID09PSB0aGlzLnN0YXRlLmN1cnJlbnQpXHJcblx0XHRcdFx0XHRcdHRoaXMuc3RhdGUuY3VycmVudCA9IG51bGw7XHJcblx0XHRcdFx0XHRfbm9kZXMuc3BsaWNlKGksIDEpO1xyXG5cdFx0XHRcdFx0dGhpcy5kcmF3KCk7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHRkcmFnTm9kZTogZnVuY3Rpb24oeCwgeSkge1xyXG5cdFx0XHR2YXIgX25vZGUgPSB0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZTtcclxuXHRcdFx0aWYoIV9ub2RlKVxyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0dmFyIGRlbHRhWCA9IHggLSBfbm9kZS54O1xyXG5cdFx0XHR2YXIgZGVsdGFZID0geSAtIF9ub2RlLnk7XHJcblx0XHRcdF9ub2RlLmNvbnRyb2xzWzBdLnggKz0gZGVsdGFYO1xyXG5cdFx0XHRfbm9kZS5jb250cm9sc1swXS55ICs9IGRlbHRhWTtcclxuXHRcdFx0X25vZGUuY29udHJvbHNbMV0ueCArPSBkZWx0YVg7XHJcblx0XHRcdF9ub2RlLmNvbnRyb2xzWzFdLnkgKz0gZGVsdGFZO1xyXG5cdFx0XHRfbm9kZS54ID0geDtcclxuXHRcdFx0X25vZGUueSA9IHk7XHJcblx0XHRcdHRoaXMuZHJhdygpO1xyXG5cdFx0fSxcclxuXHRcdGRyYWdDb250cm9sUG9pbnQ6IGZ1bmN0aW9uKHgsIHksIGluZGV4KSB7XHJcblx0XHRcdHZhciBfbm9kZSA9IHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlO1xyXG5cdFx0XHQvL1NlbGVjdCBwb2ludFxyXG5cdFx0XHR2YXIgYSA9IF9ub2RlLmNvbnRyb2xzW2luZGV4XTtcclxuXHRcdFx0Ly9UaGUgb3RoZXIgcG9pbnRcclxuXHRcdFx0dmFyIGIgPSBfbm9kZS5jb250cm9sc1sxIC0gaW5kZXhdO1xyXG5cdFx0XHRpZih0aGlzLnN0YXRlLmRyYWdNb2RlID09IDMgfHwodGhpcy5zdGF0ZS5kcmFnTW9kZSA9PSAyICYmIF9ub2RlLmxvY2spKSB7XHJcblx0XHRcdFx0dmFyIGFuZ2xlSW5pdCA9IE1hdGguYXRhbigoYS55IC0gX25vZGUueSkgLyAoYS54IC0gX25vZGUueCkpO1xyXG5cdFx0XHRcdHZhciBhbmdsZUEgPSBNYXRoLmF0YW4oKHkgLSBfbm9kZS55KSAvICh4IC0gX25vZGUueCkpO1xyXG5cdFx0XHRcdGlmKGEueCA8IF9ub2RlLngpXHJcblx0XHRcdFx0XHRhbmdsZUluaXQgKz0gTWF0aC5QSTtcclxuXHRcdFx0XHRpZih4IDwgX25vZGUueClcclxuXHRcdFx0XHRcdGFuZ2xlQSArPSBNYXRoLlBJO1xyXG5cdFx0XHRcdHZhciB0ZW1wID0ge307XHJcblx0XHRcdFx0dGVtcC54ID0gKGIueCAtIF9ub2RlLngpICogTWF0aC5jb3MoYW5nbGVBIC0gYW5nbGVJbml0KSAtIChiLnkgLSBfbm9kZS55KSAqIE1hdGguc2luKGFuZ2xlQSAtIGFuZ2xlSW5pdCkgKyBfbm9kZS54O1xyXG5cdFx0XHRcdHRlbXAueSA9IChiLnggLSBfbm9kZS54KSAqIE1hdGguc2luKGFuZ2xlQSAtIGFuZ2xlSW5pdCkgKyAoYi55IC1fbm9kZS55KSogTWF0aC5jb3MoYW5nbGVBIC0gYW5nbGVJbml0KSArIF9ub2RlLnk7XHJcblx0XHRcdFx0X25vZGUuY29udHJvbHNbMSAtIGluZGV4XSA9IHRlbXA7XHJcblx0XHRcdH1cclxuXHRcdFx0YS54ID0geDtcclxuXHRcdFx0YS55ID0geTtcclxuXHRcdFx0dGhpcy5kcmF3KCk7XHJcblx0XHR9LFxyXG5cdFx0Y3JlYXRlQ29udHJvbFBvaW50OiBmdW5jdGlvbih4LCB5KSB7XHJcblx0XHRcdHZhciBfbm9kZSA9IHRoaXMuc3RhdGUuY3VycmVudDtcclxuXHRcdFx0X25vZGUuY29udHJvbHNbMV0ueCA9IHg7XHJcblx0XHRcdF9ub2RlLmNvbnRyb2xzWzFdLnkgPSB5O1xyXG5cdFx0XHRfbm9kZS5jb250cm9sc1swXS54ID0gMiAqIF9ub2RlLnggLSB4O1xyXG5cdFx0XHRfbm9kZS5jb250cm9sc1swXS55ID0gMiAqIF9ub2RlLnkgLSB5O1xyXG5cclxuXHRcdFx0dGhpcy5kcmF3KCk7XHJcblx0XHR9LFxyXG5cdFx0bW91c2V1cDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuc3RhdGUuZG93biA9IGZhbHNlO1xyXG5cdFx0XHRpZih0aGlzLnN0YXRlLmRyYWdNb2RlID09IDEgJiYgdGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGUpXHJcblx0XHRcdFx0dGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGUubG9jayA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLnN0YXRlLmRyYWdNb2RlID0gMDtcclxuXHRcdFx0dGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGUgPSBudWxsO1xyXG5cdFx0XHR0aGlzLnN0YXRlLnNlbGVjdFR5cGUgPSBudWxsO1xyXG5cdFx0XHR0aGlzLmN1cnNvcihcImRlZmF1bHRcIik7XHJcblx0XHR9LFxyXG5cdFx0c2VsZWN0OiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdHZhciBfbm9kZXMgPSB0aGlzLm5vZGVzO1xyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgX25vZGVzLmxlbmd0aDsgKytpKSB7XHJcblx0XHRcdFx0dmFyIHggPSBlLm9mZnNldFg7XHJcblx0XHRcdFx0dmFyIHkgPSBlLm9mZnNldFk7XHJcblx0XHRcdFx0aWYoeCA+IF9ub2Rlc1tpXS54IC0gdGhpcy5oYWxmUG9pbnRTaXplICYmIHggPCBfbm9kZXNbaV0ueCArIHRoaXMuaGFsZlBvaW50U2l6ZSAmJiB5ID4gX25vZGVzW2ldLnkgLSB0aGlzLmhhbGZQb2ludFNpemUgJiYgeSA8IF9ub2Rlc1tpXS55ICsgdGhpcy5oYWxmUG9pbnRTaXplKSB7XHJcblx0XHRcdFx0XHR0aGlzLmN1cnNvcihcImFsbC1zY3JvbGxcIik7XHJcblx0XHRcdFx0XHR0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZSA9IF9ub2Rlc1tpXTtcclxuXHRcdFx0XHRcdHRoaXMuc3RhdGUuc2VsZWN0VHlwZSA9ICdub2RlJztcclxuXHRcdFx0XHRcdHRoaXMuZHJhdygpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBfbm9kZXMubGVuZ3RoOyArK2kpIHtcclxuXHRcdFx0XHR2YXIgeCA9IGUub2Zmc2V0WDtcclxuXHRcdFx0XHR2YXIgeSA9IGUub2Zmc2V0WTtcclxuXHRcdFx0XHRpZih4ID4gX25vZGVzW2ldLmNvbnRyb2xzWzBdLnggLSB0aGlzLmhhbGZQb2ludFNpemUgJiYgeCA8IF9ub2Rlc1tpXS5jb250cm9sc1swXS54ICsgdGhpcy5oYWxmUG9pbnRTaXplIFxyXG5cdFx0XHRcdCYmIHkgPiBfbm9kZXNbaV0uY29udHJvbHNbMF0ueSAtIHRoaXMuaGFsZlBvaW50U2l6ZSAmJiB5IDwgX25vZGVzW2ldLmNvbnRyb2xzWzBdLnkgKyB0aGlzLmhhbGZQb2ludFNpemUpIHtcclxuXHRcdFx0XHRcdHRoaXMuY3Vyc29yKFwiYWxsLXNjcm9sbFwiKTtcclxuXHRcdFx0XHRcdHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlID0gX25vZGVzW2ldO1xyXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZS5zZWxlY3RUeXBlID0gJ2NvbnRyb2wwJztcclxuXHRcdFx0XHRcdHRoaXMuZHJhdygpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKHggPiBfbm9kZXNbaV0uY29udHJvbHNbMV0ueCAtIHRoaXMuaGFsZlBvaW50U2l6ZSAmJiB4IDwgX25vZGVzW2ldLmNvbnRyb2xzWzFdLnggKyB0aGlzLmhhbGZQb2ludFNpemUgXHJcblx0XHRcdFx0JiYgeSA+IF9ub2Rlc1tpXS5jb250cm9sc1sxXS55IC0gdGhpcy5oYWxmUG9pbnRTaXplICYmIHkgPCBfbm9kZXNbaV0uY29udHJvbHNbMV0ueSArIHRoaXMuaGFsZlBvaW50U2l6ZSkge1xyXG5cdFx0XHRcdFx0dGhpcy5jdXJzb3IoXCJhbGwtc2Nyb2xsXCIpO1xyXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGUgPSBfbm9kZXNbaV07XHJcblx0XHRcdFx0XHR0aGlzLnN0YXRlLnNlbGVjdFR5cGUgPSAnY29udHJvbDEnO1xyXG5cdFx0XHRcdFx0dGhpcy5kcmF3KCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGUgPSBudWxsO1xyXG5cdFx0XHR0aGlzLnN0YXRlLnNlbGVjdFR5cGUgPSBudWxsO1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9LFxyXG5cdFx0ZHJhdyA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgU2V0dGluZ3NPYmogPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdTZXR0aW5ncycpKSAgfHwge1xyXG4gICAgXHRtYXBDb2xvcjogXCJyZ2JhKDI1NSwgMjA0LCAxMjgsIDEpXCIsXHJcbiAgICBcdG1hcFN0cm9rZUNvbG9yOiBcInJnYmEoMCwgMCwgMCwgMSlcIixcclxuICAgIFx0bWFwUG9pbnRzQ29sb3I6IFwicmdiYSgwLCAwLCAyNTUsIDEpXCIsXHJcbiAgICBcdG1hcFBvaW50c0JvcmRlckNvbG9yOiBcInJnYmEoMCwgMCwgMCwgMSlcIixcclxuICAgIFx0bWFwUm91dGVDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDEpXCIsXHJcbiAgICBcdGJvZHlCYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSgyNDMsIDIyOSwgMjQ1LCAxKVwiLFxyXG4gICAgXHRyb3V0ZUJvcmRlcldpZHRoOiBcIjRcIixcclxuICAgIFx0cG9pbnRzUmFkaXVzOiBcIjhcIixcclxuICAgIFx0cG9pbnRzQm9yZGVyV2lkdGg6IFwiMVwiXHJcbiAgICB9O1xyXG5cdFx0XHR2YXIgX2N0eCA9IHRoaXMuY3R4O1xyXG5cdFx0XHRfY3R4LmNsZWFyUmVjdCgwLDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG5cdFx0XHRfY3R4LnNhdmUoKTtcclxuXHJcblxyXG5cdFx0XHRpZih0aGlzLmJhY2tncm91bmRJbWFnZSlcclxuXHRcdFx0XHRfY3R4LmRyYXdJbWFnZSh0aGlzLmJhY2tncm91bmRJbWFnZSwgMCwgMCk7XHJcblx0XHRcdF9jdHguc2F2ZSgpO1xyXG5cdFx0XHRfY3R4LnN0cm9rZVN0eWxlPVwidHJhbnNwYXJlbnRcIjtcclxuXHRcdFx0X2N0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0X2N0eC5tb3ZlVG8oMCwwKTtcclxuXHRcdFx0X2N0eC5saW5lVG8oNjQwLDApO1xyXG5cdFx0XHRfY3R4LmxpbmVUbyg2NDAsNDgwKTtcclxuXHRcdFx0X2N0eC5saW5lVG8oMCw0ODApO1xyXG5cdFx0XHRfY3R4LmxpbmVUbygwLDApO1xyXG5cdFx0XHRfY3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRfY3R4LnN0cm9rZVN0eWxlPVwiIzAwRkYwMFwiO1xyXG5cdFx0XHR2YXIgbm9kZXMgPSB0aGlzLm5vZGVzO1xyXG5cdFx0XHRpZih0aGlzLnN0YXRlLmN1cnJlbnQpIHtcclxuXHRcdFx0XHRfY3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdF9jdHgubW92ZVRvKHRoaXMuc3RhdGUuY3VycmVudC54LCB0aGlzLnN0YXRlLmN1cnJlbnQueSk7XHJcblx0XHRcdFx0X2N0eC5saW5lVG8odGhpcy5zdGF0ZS5jdXJyZW50LmNvbnRyb2xzWzBdLngsIHRoaXMuc3RhdGUuY3VycmVudC5jb250cm9sc1swXS55KTtcclxuXHRcdFx0XHRfY3R4Lm1vdmVUbyh0aGlzLnN0YXRlLmN1cnJlbnQueCwgdGhpcy5zdGF0ZS5jdXJyZW50LnkpO1xyXG5cdFx0XHRcdF9jdHgubGluZVRvKHRoaXMuc3RhdGUuY3VycmVudC5jb250cm9sc1sxXS54LCB0aGlzLnN0YXRlLmN1cnJlbnQuY29udHJvbHNbMV0ueSk7XHJcblx0XHRcdFx0X2N0eC5zdHJva2UoKTtcclxuXHRcdFx0XHRfY3R4LmZpbGxTdHlsZT1cIiNGRkZGMDBcIjtcclxuXHRcdFx0XHRfY3R4LmZpbGxSZWN0KHRoaXMuc3RhdGUuY3VycmVudC5jb250cm9sc1swXS54LXRoaXMuaGFsZlBvaW50U2l6ZSwgdGhpcy5zdGF0ZS5jdXJyZW50LmNvbnRyb2xzWzBdLnktdGhpcy5oYWxmUG9pbnRTaXplLCB0aGlzLnBvaW50U2l6ZSwgdGhpcy5wb2ludFNpemUpO1xyXG5cdFx0XHRcdF9jdHguZmlsbFJlY3QodGhpcy5zdGF0ZS5jdXJyZW50LmNvbnRyb2xzWzFdLngtdGhpcy5oYWxmUG9pbnRTaXplLCB0aGlzLnN0YXRlLmN1cnJlbnQuY29udHJvbHNbMV0ueS10aGlzLmhhbGZQb2ludFNpemUsIHRoaXMucG9pbnRTaXplLCB0aGlzLnBvaW50U2l6ZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0X2N0eC5zYXZlKCk7XHJcblx0XHRcdFxyXG5cclxuXHRcdFx0X2N0eC5maWxsU3R5bGU9XCIjRkZGRjAwXCI7XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7ICsraSkge1xyXG5cdFx0XHRcdF9jdHguZmlsbFJlY3Qobm9kZXNbaV0ueC10aGlzLmhhbGZQb2ludFNpemUsIG5vZGVzW2ldLnktdGhpcy5oYWxmUG9pbnRTaXplLCB0aGlzLnBvaW50U2l6ZSwgdGhpcy5wb2ludFNpemUpO1xyXG5cdFx0XHRcclxuXHRcdFx0fVxyXG5cdFx0XHRpZih0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZSAhPSBudWxsKSB7XHJcblx0XHRcdFx0X2N0eC5maWxsU3R5bGU9XCIjMDAwXCI7XHJcblx0XHRcdFx0X2N0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRfY3R4LmFyYyh0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZS5jb250cm9sc1swXS54LCB0aGlzLnN0YXRlLnNlbGVjdGVkTm9kZS5jb250cm9sc1swXS55LCB0aGlzLmhhbGZQb2ludFNpemUsIDAsIDIgKiBNYXRoLlBJLCB0cnVlKTtcclxuXHRcdFx0XHRfY3R4LmNsb3NlUGF0aCgpO1xyXG5cdFx0XHRcdF9jdHguZmlsbCgpO1xyXG5cdFx0XHRcdF9jdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0X2N0eC5hcmModGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGUuY29udHJvbHNbMV0ueCwgdGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGUuY29udHJvbHNbMV0ueSwgdGhpcy5oYWxmUG9pbnRTaXplLCAwLCAyICogTWF0aC5QSSwgdHJ1ZSk7XHJcblx0XHRcdFx0X2N0eC5jbG9zZVBhdGgoKTtcclxuXHRcdFx0XHRfY3R4LmZpbGwoKTtcclxuXHRcdFx0XHRfY3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdF9jdHguZmlsbFJlY3QodGhpcy5zdGF0ZS5zZWxlY3RlZE5vZGUueC10aGlzLmhhbGZQb2ludFNpemUsIHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlLnktdGhpcy5oYWxmUG9pbnRTaXplLCB0aGlzLnBvaW50U2l6ZSwgdGhpcy5wb2ludFNpemUpO1xyXG5cdFx0XHRcdF9jdHgubW92ZVRvKHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlLngsIHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlLnkpO1xyXG5cdFx0XHRcdF9jdHgubGluZVRvKHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlLmNvbnRyb2xzWzBdLngsIHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlLmNvbnRyb2xzWzBdLnkpO1xyXG5cdFx0XHRcdF9jdHgubW92ZVRvKHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlLngsIHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlLnkpO1xyXG5cdFx0XHRcdF9jdHgubGluZVRvKHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlLmNvbnRyb2xzWzFdLngsIHRoaXMuc3RhdGUuc2VsZWN0ZWROb2RlLmNvbnRyb2xzWzFdLnkpO1xyXG5cdFx0XHRcdF9jdHguc3Ryb2tlKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0X2N0eC5zdHJva2VTdHlsZT1TZXR0aW5nc09iai5tYXBSb3V0ZUNvbG9yO1xyXG5cclxuXHRcdFx0aWYobm9kZXMubGVuZ3RoID4gMSlcclxuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoIC0gMTsgKytpKSB7XHJcblx0XHRcdFx0XHRfY3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdFx0X2N0eC5tb3ZlVG8obm9kZXNbaV0ueCwgbm9kZXNbaV0ueSk7XHJcblx0XHRcdFx0XHRfY3R4LmJlemllckN1cnZlVG8obm9kZXNbaV0uY29udHJvbHNbMV0ueCwgbm9kZXNbaV0uY29udHJvbHNbMV0ueSwgbm9kZXNbaSArIDFdLmNvbnRyb2xzWzBdLngsIG5vZGVzW2kgKyAxXS5jb250cm9sc1swXS55LCBub2Rlc1tpICsgMV0ueCwgbm9kZXNbaSArIDFdLnkpO1xyXG5cdFx0XHRcdFx0X2N0eC5zdHJva2UoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdF9jdHguc3Ryb2tlU3R5bGU9IFNldHRpbmdzT2JqLm1hcFJvdXRlQ29sb3I7XHJcblx0XHRcdFx0Ly8gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLm5vZGVzLmxlbmd0aCAtIDE7ICsraSkge1xyXG5cdFx0XHRcdC8vIHZhciBuMSA9IHRoaXMubm9kZXNbaV07XHJcblx0XHRcdFx0Ly8gdmFyIG4yID0gdGhpcy5ub2Rlc1tpICsgMV07XHJcblx0XHRcdFx0Ly8gdmFyIHAxID0gW24xLngsIG4xLnldO1xyXG5cdFx0XHRcdC8vIHZhciBwMiA9IFtuMS5jb250cm9sc1sxXS54LCBuMS5jb250cm9sc1sxXS55XTtcclxuXHRcdFx0XHQvLyB2YXIgcDMgPSBbbjIuY29udHJvbHNbMF0ueCwgbjIuY29udHJvbHNbMF0ueV07XHJcblx0XHRcdFx0Ly8gdmFyIHA0ID0gW24yLngsIG4yLnldO1xyXG5cdFx0XHRcdHZhciBTYXZlZE1hcExpbmVzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnU2F2ZWRDdXJ2ZXMnKSk7XHJcblx0XHRcdFx0aWYoU2F2ZWRNYXBMaW5lcyl7XHJcblxyXG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBTYXZlZE1hcExpbmVzLmxlbmd0aDsgKytpKSB7XHJcblx0XHRcdFx0XHRfY3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdFx0X2N0eC5tb3ZlVG8oU2F2ZWRNYXBMaW5lc1tpXS5wMVswXSwgU2F2ZWRNYXBMaW5lc1tpXS5wMVsxXSk7XHJcblx0XHRcdFx0XHRfY3R4LmJlemllckN1cnZlVG8oU2F2ZWRNYXBMaW5lc1tpXS5wMlswXSwgU2F2ZWRNYXBMaW5lc1tpXS5wMlsxXSwgU2F2ZWRNYXBMaW5lc1tpXS5wM1swXSwgU2F2ZWRNYXBMaW5lc1tpXS5wM1sxXSwgU2F2ZWRNYXBMaW5lc1tpXS5wNFswXSwgU2F2ZWRNYXBMaW5lc1tpXS5wNFsxXSk7XHJcblx0XHRcdFx0XHRfY3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcdF9jdHguc3Ryb2tlU3R5bGUgPSBTZXR0aW5nc09iai5tYXBSb3V0ZUNvbG9yO1xyXG5cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHJcblxyXG5cdFx0XHR2YXIgc2F2ZWRNYXBDb29yZHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjaXJjbGVzQ29vcmRzJykpIHx8IFtdO1xyXG5cdFx0XHR2YXIgZGVsZXRlTWFwQ29vcmRzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZGVsZXRlQ2lyY2xlcycpKSB8fCBbXTtcclxuXHJcblx0XHRcdGlmKHNhdmVkTWFwQ29vcmRzLmxlbmd0aCA+IDApe1xyXG5cdFx0XHRcdFx0Zm9yKHZhciBpPTA7IGk8c2F2ZWRNYXBDb29yZHMubGVuZ3RoOyBpKyspe1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yKHZhciBqID0gMDsgajwgZGVsZXRlTWFwQ29vcmRzLmxlbmd0aDsgaisrKXtcclxuXHRcdFx0XHRcdFx0XHRpZihNYXRoLmFicyhNYXRoLnJvdW5kKHNhdmVkTWFwQ29vcmRzW2ldLmN4IC0gZGVsZXRlTWFwQ29vcmRzW2pdLmN4KSkgPD0gOCAmJiBNYXRoLmFicyhNYXRoLnJvdW5kKHNhdmVkTWFwQ29vcmRzW2ldLmN5IC0gZGVsZXRlTWFwQ29vcmRzW2pdLmN5KSkgPD0gOCl7XHJcblx0XHRcdFx0XHRcdFx0XHRzYXZlZE1hcENvb3Jkcy5zcGxpY2UoaSwxKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coc2F2ZWRNYXBDb29yZHMpO1xyXG59XHJcblxyXG5cdFx0XHRcdGRlbGV0ZU1hcENvb3Jkcy5sZW5ndGggPSBudWxsO1xyXG5cdFx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdkZWxldGVDaXJjbGVzJywgSlNPTi5zdHJpbmdpZnkoZGVsZXRlTWFwQ29vcmRzKSk7XHJcblx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NpcmNsZXNDb29yZHMnLCBKU09OLnN0cmluZ2lmeShzYXZlZE1hcENvb3JkcykpO1xyXG5cclxuXHJcblxyXG5cclxuXHRcdFx0Zm9yKHZhciBpPTA7aTxzYXZlZE1hcENvb3Jkcy5sZW5ndGg7aSsrKXtcclxuXHRcdFx0aWYoc2F2ZWRNYXBDb29yZHMpe1xyXG4gIFx0XHRcdFx0XHRcdF9jdHguYmVnaW5QYXRoKCk7XHJcbiAgXHRcdFx0XHRcdFx0X2N0eC5maWxsU3R5bGUgPSBTZXR0aW5nc09iai5tYXBQb2ludHNDb2xvcjtcclxuXHJcbiBcdFx0XHRcdFx0XHRcdFx0X2N0eC5hcmMoc2F2ZWRNYXBDb29yZHNbaV0uY3gsIHNhdmVkTWFwQ29vcmRzW2ldLmN5LCBTZXR0aW5nc09iai5wb2ludHNSYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuXHJcbiBcdFx0XHRcdFx0XHRcdFx0IF9jdHguZmlsbCgpO1xyXG4gXHRcdFx0XHRcdFx0XHRcdCBfY3R4LnN0cm9rZVN0eWxlID0gIFNldHRpbmdzT2JqLm1hcFBvaW50c0JvcmRlckNvbG9yO1xyXG4gXHRcdFx0XHRcdFx0XHRcdCBfY3R4LnN0cm9rZSgpO1xyXG5cclxuXHJcblxyXG4gXHRcdFx0XHRcdFx0XHRcdFx0XHQgXHJcblx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHJcblxyXG5cclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdGdldExlbmd0aDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBjb2VmZmljaWVudCA9IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0ZjE6IHQqdCp0LFxyXG5cdFx0XHRcdFx0ZjI6IDMqdCp0KigxLXQpLFxyXG5cdFx0XHRcdFx0ZjM6IDMqdCooMS10KSooMS10KSxcclxuXHRcdFx0XHRcdGY0OiAoMS10KSooMS10KSooMS10KSxcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHRcdHZhciBsZW5ndGggPSBmdW5jdGlvbihhLCBiKSB7XHJcblx0XHRcdFx0cmV0dXJuIE1hdGguc3FydCgoYVswXSAtIGJbMF0pICogKGFbMF0gLSBiWzBdKSArIChhWzFdIC0gYlsxXSkgKiAoYVsxXSAtIGJbMV0pKTtcclxuXHRcdFx0fTtcclxuXHRcdFx0dmFyIHRvdGFsID0gMDtcclxuXHRcdFx0dmFyIGxlbmd0aHMgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubm9kZXMubGVuZ3RoIC0gMTsgKytpKSB7XHJcblx0XHRcdFx0dmFyIG4xID0gdGhpcy5ub2Rlc1tpXTtcclxuXHRcdFx0XHR2YXIgbjIgPSB0aGlzLm5vZGVzW2kgKyAxXTtcclxuXHRcdFx0XHR2YXIgcDEgPSBbbjEueCwgbjEueV07XHJcblx0XHRcdFx0dmFyIHAyID0gW24xLmNvbnRyb2xzWzFdLngsIG4xLmNvbnRyb2xzWzFdLnldO1xyXG5cdFx0XHRcdHZhciBwMyA9IFtuMi5jb250cm9sc1swXS54LCBuMi5jb250cm9sc1swXS55XTtcclxuXHRcdFx0XHR2YXIgcDQgPSBbbjIueCwgbjIueV07XHJcblx0XHRcdFx0dmFyIGxhc3RQb2ludCA9IFtuMS54LCBuMS55XTtcclxuXHRcdFx0XHR2YXIgdG90YWxMZW5ndGggPSAwO1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCAxOyBqKz0wLjAxKSB7XHJcblx0XHRcdFx0XHR2YXIgYyA9IGNvZWZmaWNpZW50KGopO1xyXG5cdFx0XHRcdFx0dmFyIHBvaW50ID0gWzAsIDBdO1xyXG5cdFx0XHRcdFx0cG9pbnRbMF0gPSBwMVswXSAqIGMuZjEgKyBwMlswXSAqIGMuZjIgKyBwM1swXSAqIGMuZjMgKyBwNFswXSAqIGMuZjQ7XHJcblx0XHRcdFx0XHRwb2ludFsxXSA9IHAxWzFdICogYy5mMSArIHAyWzFdICogYy5mMiArIHAzWzFdICogYy5mMyArIHA0WzFdICogYy5mNDtcclxuXHRcdFx0XHRcdHRvdGFsTGVuZ3RoICs9IGxlbmd0aChsYXN0UG9pbnQsIHBvaW50KTtcclxuXHRcdFx0XHRcdGxhc3RQb2ludCA9IHBvaW50O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsZW5ndGhzLnB1c2godG90YWxMZW5ndGgpO1xyXG5cdFx0XHRcdHRvdGFsICs9IHRvdGFsTGVuZ3RoO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubm9kZXMubGVuZ3RoIC0gMTsgKytpKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2gobGVuZ3Roc1tpXSAvIHRvdGFsKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0fSxcclxuXHRcdGV4cG9ydEJlemllcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBBcnJMaW5lcyA9IFtdO1xyXG5cdFx0XHRcclxuXHRcdFx0dmFyIHN0cmluZyA9IFwiTVwiO1xyXG5cdFx0XHR2YXIgU2F2ZWRMaW5lcyA9ICcnO1xyXG5cdFx0XHR2YXIgcmVzdWx0ID0gdGhpcy5nZXRMZW5ndGgoKTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubm9kZXMubGVuZ3RoIC0gMTsgKytpKSB7XHJcblx0XHRcdFx0dmFyIG4xID0gdGhpcy5ub2Rlc1tpXTtcclxuXHRcdFx0XHR2YXIgbjIgPSB0aGlzLm5vZGVzW2kgKyAxXTtcclxuXHRcdFx0XHR2YXIgcDEgPSBbbjEueCwgbjEueV07XHJcblx0XHRcdFx0dmFyIHAyID0gW24xLmNvbnRyb2xzWzFdLngsIG4xLmNvbnRyb2xzWzFdLnldO1xyXG5cdFx0XHRcdHZhciBwMyA9IFtuMi5jb250cm9sc1swXS54LCBuMi5jb250cm9sc1swXS55XTtcclxuXHRcdFx0XHR2YXIgcDQgPSBbbjIueCwgbjIueV07XHJcblxyXG5cdFx0XHRcdHZhciBMaW5lT2JqID0ge307XHJcblxyXG5cdFx0XHRcdFx0XHRMaW5lT2JqLnAxID0gcDE7XHJcblx0XHRcdFx0XHRcdExpbmVPYmoucDIgPSBwMjtcclxuXHRcdFx0XHRcdFx0TGluZU9iai5wMyA9IHAzO1xyXG5cdFx0XHRcdFx0XHRMaW5lT2JqLnA0ID0gcDQ7XHJcblx0XHRcdFx0XHRcdEFyckxpbmVzLnB1c2goTGluZU9iaik7XHJcblxyXG5cclxuXHRcdFx0XHRcdHN0cmluZyArPSAnICcgKyBwMVswXSArICcsICcgKyBwMVsxXSArICcgQycgICtcclxuXHRcdFx0XHRcdCcgJytwMlswXSsnLCAnK3AyWzFdKycsICcgK1xyXG5cdFx0XHRcdFx0K3AzWzBdKycsICcrcDNbMV0rJywgJytcclxuXHRcdFx0XHRcdCcnK3A0WzBdKycsICcrcDRbMV0rJyBUJztcclxuXHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHJldHVyblx0c3RyaW5nO1xyXG5cdFx0fSxcclxuXHRcdFJldHVyblNhdmVkUGF0aDogZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIEFyckxpbmVzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnU2F2ZWRDdXJ2ZXMnKSkgfHwgW107XHJcblx0XHRcdHZhciBTYXZlZExpbmVzID0gXCJcIjtcclxuXHRcdFx0dmFyIHJlc3VsdCA9IHRoaXMuZ2V0TGVuZ3RoKCk7XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLm5vZGVzLmxlbmd0aCAtIDE7ICsraSkge1xyXG5cdFx0XHRcdHZhciBuMSA9IHRoaXMubm9kZXNbaV07XHJcblx0XHRcdFx0dmFyIG4yID0gdGhpcy5ub2Rlc1tpICsgMV07XHJcblx0XHRcdFx0dmFyIHAxID0gW24xLngsIG4xLnldO1xyXG5cdFx0XHRcdHZhciBwMiA9IFtuMS5jb250cm9sc1sxXS54LCBuMS5jb250cm9sc1sxXS55XTtcclxuXHRcdFx0XHR2YXIgcDMgPSBbbjIuY29udHJvbHNbMF0ueCwgbjIuY29udHJvbHNbMF0ueV07XHJcblx0XHRcdFx0dmFyIHA0ID0gW24yLngsIG4yLnldO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIExpbmVPYmogPSB7fTtcclxuXHRcdFx0XHRcdFx0TGluZU9iai5wMSA9IHAxO1xyXG5cdFx0XHRcdFx0XHRMaW5lT2JqLnAyID0gcDI7XHJcblx0XHRcdFx0XHRcdExpbmVPYmoucDMgPSBwMztcclxuXHRcdFx0XHRcdFx0TGluZU9iai5wNCA9IHA0O1xyXG5cdFx0XHRcdFx0XHRBcnJMaW5lcy5wdXNoKExpbmVPYmopO1xyXG5cdFx0XHRcdFx0XHRTYXZlZExpbmVzICs9ICcgJyArIHAxWzBdICsgJywgJyArIHAxWzFdICsgJyBDJyAgK1xyXG5cdFx0XHRcdFx0JyAnK3AyWzBdKycsICcrcDJbMV0rJywgJyArXHJcblx0XHRcdFx0XHQrcDNbMF0rJywgJytwM1sxXSsnLCAnK1xyXG5cdFx0XHRcdFx0JycrcDRbMF0rJywgJytwNFsxXSsnIFQnO1xyXG5cdFx0XHR9XHJcblx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1NhdmVkU3ZnUGF0aCcsIEpTT04uc3RyaW5naWZ5KFNhdmVkTGluZXMpKTtcclxuXHJcblx0XHRcdHJldHVyblx0QXJyTGluZXM7XHJcblx0XHR9LFxyXG5cclxuXHJcblx0XHRjbGVhckJlemllcjogZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIF9jdHggPSB0aGlzLmN0eDtcclxuXHRcdFx0ZWRpdG9yLm5vZGVzID0gW107XHJcblx0XHRcdF9jdHguY2xlYXJSZWN0KDAsIDAsIGVkaXRvci53aWR0aCwgZWRpdG9yLmhlaWdodClcclxuXHRcdFx0Y29uc29sZS5sb2coX2N0eCk7XHJcblx0XHRcdGNvbnNvbGUubG9nKGVkaXRvcik7XHJcblxyXG5cdFx0XHRyZXR1cm4gZWRpdG9yO1xyXG5cclxuXHJcblx0XHR9LFxyXG5cdFx0XHJcblxyXG5cclxuXHR9O1xyXG5cdGVkaXRvci5pbml0KGlkKTtcclxuXHRyZXR1cm4gZWRpdG9yO1xyXG5cclxufSJdfQ==
