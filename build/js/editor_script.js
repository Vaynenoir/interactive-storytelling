$(document).ready(function(){function t(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",routeType:"line",routeShadow:"false",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"50",contentAlign:"flex-start",checkboxState:"false",defaultOption:"false",UserOption:"false",StartIcon:"",RouteStartIconColor:"rgba(0, 0, 0, 1)",RouteStartIconSize:"10"};if(e[t])return e[t]}function e(e){e.addEventListener("load",function(){function o(t){t.addEventListener("load",function(){for(var e=t.contentDocument.documentElement,o=e.getElementsByTagName("path"),a=new XMLSerializer,r=document.getElementById("iconTest"),i=[],l=0;l<o.length;l++){o[l].style.fill=n.RouteStartIconColor;var s=a.serializeToString(o[l]);console.log(s),i.push(s)}console.log(i),localStorage.setItem("StartRouteIcon",JSON.stringify(i)),$("input[name=RouteStartIconColor]").change(function(t){$("option:selected",this);var e=this.value,a=this.name;n[a]=e;for(var r=0;r<o.length;r++)o[r].style.fill=n.RouteStartIconColor;localStorage.setItem("Settings",JSON.stringify(n))}),$("input[name = RouteStartIconSize]").change(function(){$("option:selected",this);var t=this.value,o=this.name;n[o]=t,$("#iconTest").attr({width:n.RouteStartIconSize,height:n.RouteStartIconSize}),e.setAttribute("width",$(r).attr("width")),e.setAttribute("height",$(r).attr("height")),console.log(e),console.log(n)})})}var a=e.contentDocument;console.log(a);var r=a.documentElement.getElementById("mapPaths").getElementsByTagName("path"),n=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",routeType:"line",routeShadow:"false",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"50",contentAlign:"flex-start",checkboxState:"false",defaultOption:"false",UserOption:"false",StartIcon:"",RouteStartIconColor:"rgba(0, 0, 0, 1)",RouteStartIconSize:"2"},i=JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:""},l=1,s=0,c=0;if(""!=i.transform.length){transformString=i.transform;var d=transformString.match(/[+-]?\d+(\.\d+)?/g).map(function(t){return parseFloat(t)});console.log(d),l=d[0],s=d[1],c=d[2],console.log(l,s,c),$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)")}var p={zoom:0,e:0,f:0};console.log(i),$("#plus").bind("click",function(){l+=.1,$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),i.transform="scale("+l+") translate("+s+"    "+c+")",localStorage.setItem("mapStyleProperties",JSON.stringify(i)),localStorage.setItem("SreenCTM",JSON.stringify(p)),localStorage.setItem("zoom",JSON.stringify(l))}),$("#minus").bind("click",function(){(l-=.3)<1.1&&(l=1),$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),i.transform="scale("+l+") translate("+s+" "+c+")",localStorage.setItem("zoom",JSON.stringify(l)),localStorage.setItem("SreenCTM",JSON.stringify(p)),localStorage.setItem("mapStyleProperties",JSON.stringify(i))}),$("#moveLeft").bind("click",function(){s+=10,$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),i.transform="scale("+l+") translate("+s+" "+c+")",localStorage.setItem("SreenCTM",JSON.stringify(p)),localStorage.setItem("mapStyleProperties",JSON.stringify(i))}),$("#moveRight").bind("click",function(){s-=10,$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),i.transform="scale("+l+") translate("+s+" "+c+")",localStorage.setItem("SreenCTM",JSON.stringify(p)),localStorage.setItem("mapStyleProperties",JSON.stringify(i))}),$("#moveTop").bind("click",function(){c+=10,$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),i.transform="scale("+l+") translate("+s+" "+c+")",localStorage.setItem("SreenCTM",JSON.stringify(p)),localStorage.setItem("mapStyleProperties",JSON.stringify(i))}),$("#moveBottom").bind("click",function(){c-=10,$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),i.transform="scale("+l+") translate("+s+" "+c+")",localStorage.setItem("SreenCTM",JSON.stringify(p)),localStorage.setItem("mapStyleProperties",JSON.stringify(i))});var g=document.getElementById("mapColorPicker"),m=document.getElementById("mapStrokeColorPicker"),u=document.getElementById("mapPointsColorPicker"),h=document.getElementById("mapPointsBorderColorPicker"),S=document.getElementById("mapRouteColorPicker"),f=document.getElementById("bodyColorPicker"),v=$(".colorPicker");$("#color_change");g.style.display="block",m.style.display="block",u.style.display="block",h.style.display="block",S.style.display="block",f.style.display="block",g.value=t("mapColor"),m.value=t("mapStrokeColor"),u.value=t("mapPointsColor"),h.value=t("mapPointsBorderColor"),S.value=t("mapRouteColor"),f.value=t("bodyBackgroundColor"),$("#PathStartIconColor").val(t("RouteStartIconColor")),$("#test6").value=2*t("pointsRadius");for(var b=0;b<r.length;b++)r[b].style.fill=t("mapColor"),r[b].style.stroke=t("mapStrokeColor");$("#circle_example").css({width:2*t("pointsRadius"),height:2*t("pointsRadius"),"background-color":t("mapPointsColor"),border:t("pointsBorderWidth")+"solid"+t("mapPointsBorderColor")}),$(".routeExample").css({height:t("routeBorderWidth"),"background-color":t("mapRouteColor")}),$("#iconTest").attr({width:t("RouteStartIconSize"),height:t("RouteStartIconSize")});var y=$("input[type=range]"),k=$("input[name=routeStartCheckbox]"),I=document.getElementById("mapSettings"),C=JSON.parse(localStorage.getItem("map"));if($("#mapSettings").attr("data",C),I.addEventListener("load",function(){var e=I.contentDocument.documentElement.getElementsByTagName("path");$(".map_settings_block").css("background-color",t("bodyBackgroundColor"));for(var o=0;o<e.length;o++)e[o].style.fill=t("mapColor"),e[o].style.stroke=t("mapStrokeColor");$(y).change(function(t){$("option:selected",this);var e=this.value,o=this.name;n[o]=e;for(var a=JSON.parse(localStorage.getItem("circlesCoords")),r=0;r<a.length;r++)a[r].r=n.pointsRadius;$("#circle_example").css({width:2*n.pointsRadius,height:2*n.pointsRadius,border:n.pointsBorderWidth+"px solid "+n.mapPointsBorderColor}),$(".routeExample").css("height",n.routeBorderWidth),$(".content_block").css("width",n.contentWidth+"%"),localStorage.setItem("circlesCoords",JSON.stringify(a)),localStorage.setItem("Settings",JSON.stringify(n))}),$("input[name = contentAlign]").on("click",function(){$(this).prop("checked",!0)[0].id;console.log($(this).val()),$(".test_block").css("justify-content",$(this).val()),n.contentAlign=$(this).val(),localStorage.setItem("Settings",JSON.stringify(n))}),"line"==t("routeType")&&$("input[value=line]").attr("checked",!0),"dashed"==t("routeType")&&($("input[value=dashed]").attr("checked",!0),$(".routeExample").css({height:"","background-color":"transparent","border-bottom":t("routeBorderWidth")+"px dashed "+t("mapRouteColor")}),console.log(t("routeBorderWidth")+"px dashed "+t("mapRouteColor"))),"dotted"==t("routeType")&&($("input[value=dotted]").attr("checked",!0),$(".routeExample").css({height:"","background-color":"transparent","border-bottom":t("routeBorderWidth")+"px dotted "+t("mapRouteColor")})),$("input[name = routeType]").on("click",function(){$(this).prop("checked",!0)[0].id;console.log($(this).val()),console.log($(this).val()),n.routeType=$(this).val(),"line"==$(this).val()&&$(".routeExample").css({height:t("routeBorderWidth"),"border-bottom":"0px","background-color":t("mapRouteColor")}),"dashed"==$(this).val()&&($(".routeExample").css({height:"1px","border-bottom":t("routeBorderWidth")+"px dashed "+t("mapRouteColor"),"background-color":"transparent"}),console.log(t("routeBorderWidth")+"px dashed "+t("mapRouteColor"))),"dotted"==$(this).val()&&$(".routeExample").css({height:"1px","border-bottom":t("routeBorderWidth")+"px dotted "+t("mapRouteColor"),"background-color":"transparent"}),localStorage.setItem("Settings",JSON.stringify(n))}),$("input[name=routeShadow]").attr("checked",JSON.parse(t("routeShadow"))),$("input[name=routeShadow]").on("click",function(){this.checked?(console.log("kek"),n.routeShadow="true",localStorage.setItem("Settings",JSON.stringify(n))):(console.log("jopa"),n.routeShadow="false",localStorage.setItem("Settings",JSON.stringify(n)))}),$(v).minicolors({opacity:!0,format:"rgb",rgbaString:!1,change:function(t,e){var o="rgba("+e.r+", "+e.g+", "+e.b+", "+e.a+")";console.log(o)},swatches:["rgba(154, 9, 173, 1)","rgba(240, 17, 17, 1)","rgba(0, 255, 21, 1)","rgba(15, 43, 255, 1)","rgba(255, 239, 13, 1)"],showSpeed:100}),$(v).minicolors("rgbaString"),$(v).change(function(t){$("option:selected",this);var o=this.value,a=this.name;n[a]=o;for(var i=0;i<r.length;i++)r[i].style.fill=n.mapColor,r[i].style.stroke=n.mapStrokeColor;for(var l=0;l<e.length;l++)e[l].style.fill=n.mapColor,e[l].style.stroke=n.mapStrokeColor;$(".map_settings_block").css("background-color",n.bodyBackgroundColor),$("#circle_example").css({border:n.pointsBorderWidth+"px solid "+n.mapPointsBorderColor,"background-color":n.mapPointsColor}),$(".routeExample").css("background-color",n.mapRouteColor),$(".wrap_map").css("background-color",n.bodyBackgroundColor),localStorage.setItem("Settings",JSON.stringify(n))})}),$(k).attr("checked",JSON.parse(t("checkboxState"))),$("#defaultOption").attr("checked",JSON.parse(t("defaultOption"))),$("#UserOption").attr("checked",JSON.parse(t("UserOption"))),$(k).is(":checked"))if($(".centered_form").show().css("display","flex"),$("#UserOption").is(":checked")){$(".additional_settings").show();var O=""+t("StartIcon"),N=document.getElementById("iconTest");O.length>0?($("#iconTest").attr("data",O),o(N)):$("#iconTest").attr("data","")}else $("#defaultOption").is(":checked")&&$(".additional_settings").hide();else $(".additional_settings").hide(),$(".centered_form").hide();$(k).on("click",function(){this.checked?(n.checkboxState="true",localStorage.setItem("Settings",JSON.stringify(n)),console.log(n),$(".centered_form").show().css("display","flex")):($(".centered_form").hide(),n.checkboxState="false",$(".additional_settings").hide(),localStorage.setItem("Settings",JSON.stringify(n)))}),$("#UserOption").on("click",function(){n.UserOption="true",n.defaultOption="false",localStorage.setItem("Settings",JSON.stringify(n)),$(".additional_settings").show();var e=document.getElementById("iconTest");$("#iconTest").attr("data",t("StartIcon")),o(e)}),$("#defaultOption").on("click",function(){n.UserOption="false",n.defaultOption="true",n.StartIcon="",localStorage.setItem("StartRouteIcon",JSON.stringify([])),localStorage.setItem("Settings",JSON.stringify(n)),$(".additional_settings").hide()}),$(".icon_gallery__item").on("click",function(){var t=$(this).attr("src");console.log(t);var e=document.getElementById("iconTest");$("#iconTest").attr("data",t),o(e),n.StartIcon=t,localStorage.setItem("Settings",JSON.stringify(n))})})}(o=new bezierEditor("bezier-canvas")).draw(),$("#clear").bind("click",function(){console.log(o.clearBezier()),$("#dataMap").attr("data",""),localStorage.clear(),o.draw(),window.location.reload()}),$("#redraw").bind("click",function(){o.draw(),Materialize.toast("Editor redrawn!",2e3)}),$("#screen").bind("click",function(){goFullScreen(),o.draw()}),$("#export").bind("click",function(){o.draw();if((JSON.parse(localStorage.getItem("map"))||"").length>0){var t=o.ReturnSavedPath();localStorage.setItem("SavedCurves",JSON.stringify(t));var e=JSON.parse(localStorage.getItem("path"));if(e){var a=o.exportBezier();e+=a=a.slice(1),localStorage.setItem("path",JSON.stringify(e)),console.log(a),console.log(e)}else{var r=o.exportBezier();localStorage.setItem("path",JSON.stringify(r))}window.location="drawnMap.html"}else Materialize.toast("Editor is clear! 2nd step is restricted!",2e3)});var o=new bezierEditor("bezier-canvas");$(".img_item").bind("click",function(){var t=$(this).attr("src"),o=document.getElementById("dataMap");$("#dataMap").attr("data",t),e(o),localStorage.setItem("map",JSON.stringify(t)),Materialize.toast("Map is selected!",2e3),$(".button-collapse").sideNav("hide"),$(".main-menu").animate({width:0},100),$(".slide_btn.active").removeClass("active")}),o.draw(),console.log(JSON.parse(localStorage.getItem("Settings")));var a=JSON.parse(localStorage.getItem("map"))||[];if(a){var r=document.getElementById("dataMap");$("#dataMap").attr("data",a),e(r);var n=JSON.parse(localStorage.getItem("mapStyleProperties"))||[];document.getElementById("mapbg");n&&$.each(n,function(t,e){$("#map_bg").css(t,e)})}}),$(document).ready(function(){$(".dropdown-button").dropdown({inDuration:300,outDuration:225,constrainWidth:!1,hover:!0,gutter:0,belowOrigin:!0,alignment:"left",stopPropagation:!1}),$(".chips").material_chip(),$(".chips-autocomplete").material_chip({autocompleteOptions:{data:{Apple:null,Microsoft:null,Google:null,Travel:null,Vacation:null,"Storytelling map":null,kek:null},limit:1/0,minLength:1}}),Materialize.updateTextFields(),$("#menu").on("click",function(){$(this).hasClass(".active")?($(this).removeClass("active"),$(".tap-target").tapTarget("close")):($(this).addClass("active"),$(".tap-target").tapTarget("open"))}),$(".slide_btn").on("click",function(){if($(this).hasClass("active"))$(this).removeClass("active"),$(".main-menu").animate({width:"0px",overflow:"hidden"},100);else{var t=$(this).attr("data-execute");console.log(t),$(".slide_btn").removeClass("active"),$(".setting_option").hide(),$(this).addClass("active"),$("#"+t).show(),function(t){var e=JSON.parse(localStorage.getItem("ProjectInfo"))||{projectName:"",projectDescription:"",tags:[]},o=e.tags||[];$(".chips").on("chip.add",function(t,e){var a=JSON.parse(localStorage.getItem("ProjectInfo"))||{},r=o.length+1;e.id=r,o.push(e),a.tags=o,localStorage.setItem("ProjectInfo",JSON.stringify(a)),console.log(o,r)}),$(".chips").on("chip.delete",function(t,e){var o=JSON.parse(localStorage.getItem("ProjectInfo"))||{},a=$(".chips-autocomplete").material_chip("data");o.tags=a,console.log(a),localStorage.setItem("ProjectInfo",JSON.stringify(o))}),"choose_map"==t?$(".main-menu").animate({width:"1250px",overflow:"visible"},100):"colorize"==t?$(".main-menu").animate({width:"800px",overflow:"visible"},100):"project"==t?($(".main-menu").animate({width:"800px",overflow:"visible"},100),e&&($("#projectName").val(e.projectName),$("#projectDescription").val(e.projectDescription),$(".chips-autocomplete").material_chip({data:e.tags})),$("#saveProjectBtn").on("click",function(){console.log("kek");var t=JSON.parse(localStorage.getItem("ProjectInfo")),e=$("#projectName").val(),o=$("#projectDescription").val();e.length>0?(t.projectName=e,t.projectDescription=o,t.tags=$(".chips-autocomplete").material_chip("data")):(t.projectName="",t.projectDescription="",t.tags=[]),console.log(t),localStorage.setItem("ProjectInfo",JSON.stringify(t)),$(".slide_btn.active").removeClass("active"),$(".main-menu").animate({width:0},100)})):"displacement"==t?$(".main-menu").animate({width:"100px",overflow:"visible"},100):"pen"==t?(Materialize.toast("Draw path and points!",3e3),$(".main-menu").animate({width:"0px",overflow:"hidden"},100)):"info"==t?$(".main-menu").animate({width:"500px",overflow:"visible"},100):"step"==t&&$(".main-menu").animate({width:"70px",overflow:"visible"},100),Materialize.updateTextFields()}(t)}});var t=new Date;$("#current_year").text(function(t){var e=t.getFullYear();return e<10&&(e="0"+e),e}(t))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
