$(document).ready(function(){function t(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"100",contentAlign:"flex-start",checkboxState:"false",defaultOption:"false",UserOption:"false",StartIcon:"",RouteStartIconColor:"rgba(0, 0, 0, 1)",RouteStartIconSize:"10"};if(e[t])return e[t]}function e(e){e.addEventListener("load",function(){function o(t){t.addEventListener("load",function(){for(var e=t.contentDocument.documentElement,o=e.getElementsByTagName("path"),a=new XMLSerializer,r=document.getElementById("iconTest"),i=[],l=0;l<o.length;l++){o[l].style.fill=n.RouteStartIconColor;var c=a.serializeToString(o[l]);console.log(c),i.push(c)}console.log(i),localStorage.setItem("StartRouteIcon",JSON.stringify(i)),$("input[name=RouteStartIconColor]").change(function(t){$("option:selected",this);var e=this.value,a=this.name;n[a]=e;for(var r=0;r<o.length;r++)o[r].style.fill=n.RouteStartIconColor}),$("input[name = RouteStartIconSize]").change(function(){$("option:selected",this);var t=this.value,o=this.name;n[o]=t,$("#iconTest").attr({width:n.RouteStartIconSize,height:n.RouteStartIconSize}),e.setAttribute("width",$(r).attr("width")),e.setAttribute("height",$(r).attr("height")),console.log(e),console.log(n)})})}var a=e.contentDocument;console.log(a);var r=a.documentElement.getElementById("mapPaths").getElementsByTagName("path"),n=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"100",contentAlign:"flex-start",checkboxState:"false",defaultOption:"false",UserOption:"false",StartIcon:"",RouteStartIconColor:"rgba(0, 0, 0, 1)",RouteStartIconSize:"2"},i=document.getElementById("mapColorPicker"),l=document.getElementById("mapStrokeColorPicker"),c=document.getElementById("mapPointsColorPicker"),s=document.getElementById("mapPointsBorderColorPicker"),d=document.getElementById("mapRouteColorPicker"),g=document.getElementById("bodyColorPicker"),p=$(".colorPicker");$("#color_change");i.style.display="block",l.style.display="block",c.style.display="block",s.style.display="block",d.style.display="block",g.style.display="block",i.value=t("mapColor"),l.value=t("mapStrokeColor"),c.value=t("mapPointsColor"),s.value=t("mapPointsBorderColor"),d.value=t("mapRouteColor"),g.value=t("bodyBackgroundColor"),$("#PathStartIconColor").val(t("RouteStartIconColor")),$("#test6").value=2*t("pointsRadius");for(var m=0;m<r.length;m++)r[m].style.fill=t("mapColor"),r[m].style.stroke=t("mapStrokeColor");$("#circle_example").css({width:2*t("pointsRadius"),height:2*t("pointsRadius"),"background-color":t("mapPointsColor"),border:t("pointsBorderWidth")+"solid"+t("mapPointsBorderColor")}),$(".routeExample").css({height:t("routeBorderWidth"),"background-color":t("mapRouteColor")}),$("#iconTest").attr({width:t("RouteStartIconSize"),height:t("RouteStartIconSize")});var u=$("input[type=range]"),S=$("input[type=checkbox]"),h=document.getElementById("mapSettings"),f=JSON.parse(localStorage.getItem("map"));if($("#mapSettings").attr("data",f),h.addEventListener("load",function(){var e=h.contentDocument.documentElement.getElementsByTagName("path");$(".map_settings_block").css("background-color",t("bodyBackgroundColor"));for(var o=0;o<e.length;o++)e[o].style.fill=t("mapColor"),e[o].style.stroke=t("mapStrokeColor");$(u).change(function(t){$("option:selected",this);var e=this.value,o=this.name;n[o]=e;for(var a=JSON.parse(localStorage.getItem("circlesCoords")),r=0;r<a.length;r++)a[r].r=n.pointsRadius;$("#circle_example").css({width:2*n.pointsRadius,height:2*n.pointsRadius,border:n.pointsBorderWidth+"px solid "+n.mapPointsBorderColor}),$(".routeExample").css("height",n.routeBorderWidth),$(".content_block").css("width",n.contentWidth+"%"),localStorage.setItem("circlesCoords",JSON.stringify(a)),localStorage.setItem("Settings",JSON.stringify(n))}),$("input[name = contentAlign]").on("click",function(){$(this).prop("checked",!0)[0].id;console.log($(this).val()),$(".test_block").css("justify-content",$(this).val()),n.contentAlign=$(this).val(),localStorage.setItem("Settings",JSON.stringify(n))}),$(p).minicolors({opacity:!0,format:"rgb",rgbaString:!1,change:function(t,e){var o="rgba("+e.r+", "+e.g+", "+e.b+", "+e.a+")";console.log(o)},swatches:["rgba(154, 9, 173, 1)","rgba(240, 17, 17, 1)","rgba(0, 255, 21, 1)","rgba(15, 43, 255, 1)","rgba(255, 239, 13, 1)"],showSpeed:100}),$(p).minicolors("rgbaString"),$(p).change(function(t){$("option:selected",this);var o=this.value,a=this.name;n[a]=o;for(var i=0;i<r.length;i++)r[i].style.fill=n.mapColor,r[i].style.stroke=n.mapStrokeColor;for(var l=0;l<e.length;l++)e[l].style.fill=n.mapColor,e[l].style.stroke=n.mapStrokeColor;$(".map_settings_block").css("background-color",n.bodyBackgroundColor),$("#circle_example").css({border:n.pointsBorderWidth+"px solid "+n.mapPointsBorderColor,"background-color":n.mapPointsColor}),$(".routeExample").css("background-color",n.mapRouteColor),$(".wrap_map").css("background-color",n.bodyBackgroundColor),localStorage.setItem("Settings",JSON.stringify(n))})}),$(S).attr("checked",JSON.parse(t("checkboxState"))),$("#defaultOption").attr("checked",JSON.parse(t("defaultOption"))),$("#UserOption").attr("checked",JSON.parse(t("UserOption"))),$(S).is(":checked"))if($(".centered_form").show().css("display","flex"),$("#UserOption").is(":checked")){$(".additional_settings").show();var b=""+t("StartIcon"),y=document.getElementById("iconTest");b.length>0?($("#iconTest").attr("data",b),o(y)):$("#iconTest").attr("data","")}else $("#defaultOption").is(":checked")&&$(".additional_settings").hide();else $(".additional_settings").hide(),$(".centered_form").hide();$(S).on("click",function(){$(this).is(":checked")?(n.checkboxState="true",localStorage.setItem("Settings",JSON.stringify(n)),console.log(n),$(".centered_form").show().css("display","flex")):($(".centered_form").hide(),n.checkboxState="false",$(".additional_settings").hide(),localStorage.setItem("Settings",JSON.stringify(n)))}),$("#UserOption").on("click",function(){n.UserOption="true",n.defaultOption="false",localStorage.setItem("Settings",JSON.stringify(n)),$(".additional_settings").show();var e=document.getElementById("iconTest");$("#iconTest").attr("data",t("StartIcon")),o(e)}),$("#defaultOption").on("click",function(){n.UserOption="false",n.defaultOption="true",localStorage.setItem("Settings",JSON.stringify(n)),$(".additional_settings").hide()}),$(".icon_gallery__item").on("click",function(){var t=$(this).attr("src");console.log(t);var e=document.getElementById("iconTest");$("#iconTest").attr("data",t),o(e),n.StartIcon=t,localStorage.setItem("Settings",JSON.stringify(n))})})}console.log(t("mapColor"));(o=new bezierEditor("bezier-canvas")).draw(),$("#clear").bind("click",function(){console.log(o.clearBezier()),$("#dataMap").attr("data",""),localStorage.clear(),o.draw(),window.location.reload()}),$("#redraw").bind("click",function(){o.draw(),Materialize.toast("Editor redrawn!",2e3)}),$("#screen").bind("click",function(){goFullScreen(),o.draw()}),$("#export").bind("click",function(){o.draw();var t=o.ReturnSavedPath();localStorage.setItem("SavedCurves",JSON.stringify(t));var e=JSON.parse(localStorage.getItem("path"));if(e){var a=o.exportBezier();e+=a=a.slice(1),localStorage.setItem("path",JSON.stringify(e)),console.log(a),console.log(e)}else{var r=o.exportBezier();localStorage.setItem("path",JSON.stringify(r))}console.log(i),localStorage.setItem("mapStyleProperties",JSON.stringify(i))});var o=new bezierEditor("bezier-canvas");$(".img_item").bind("click",function(){var t=$(this).attr("src"),o=document.getElementById("dataMap");$("#dataMap").attr("data",t),e(o),localStorage.setItem("map",JSON.stringify(t)),Materialize.toast("Map is selected!",2e3),$(".button-collapse").sideNav("hide")}),o.draw(),console.log(JSON.parse(localStorage.getItem("Settings")));var a=JSON.parse(localStorage.getItem("map"))||[];if(a){var r=document.getElementById("dataMap");$("#dataMap").attr("data",a),e(r);var n=JSON.parse(localStorage.getItem("mapStyleProperties"))||[];document.getElementById("mapbg");n&&$.each(n,function(t,e){$("#map_bg").css(t,e)})}var i=JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:"",top:"",left:""};console.log(i);var l=1.1;$("#plus").bind("click",function(){l+=.3,$("#map_bg").css("transform","scale("+l+")"),i.transform="scale("+l+")",localStorage.setItem("zoom",JSON.stringify(l))}),$("#minus").bind("click",function(){(l-=.3)<1.1&&(l=1),$("#map_bg").css("transform","scale("+l+")"),i.transform="scale("+l+")",localStorage.setItem("zoom",JSON.stringify(l))});var c=2,s=2;$("map_bg").css("left","0%"),$("map_bg").css("top","0%"),i.left="0%",i.top="0%",$("#moveLeft").bind("click",function(){c+=3,$("#map_bg").css("left",c+"%"),i.left=c+"%"}),$("#moveRight").bind("click",function(){c-=3,$("#map_bg").css("left",c+"%"),i.left=c+"%"}),$("#moveTop").bind("click",function(){s+=3,$("#map_bg").css("top",s+"%"),i.top=s+"%"}),$("#moveBottom").bind("click",function(){s-=3,$("#map_bg").css("top",s+"%"),i.top=s+"%"})}),$(document).ready(function(){$(".modal").modal(),$("select").material_select();var t=JSON.parse(localStorage.getItem("ProjectInfo"))||{projectName:"",projectDescription:""};$(".modal2").modal({dismissable:!1,ready:function(e,o){t&&($("#projectName").val(t.projectName),$("#projectDescription").val(t.projectDescription))},complete:function(){var e=$("#projectName").val(),o=$("#projectDescription").val();e.length>0&&o.length>0?(t.projectName=e,t.projectDescription=o):(t.projectName="",t.projectDescription=""),localStorage.setItem("ProjectInfo",JSON.stringify(t))}}),$(".button-collapse").sideNav({menuWidth:1200,edge:"left",closeOnClick:!0,draggable:!0}),$("#menu").on("click",function(){$(this).hasClass(".active")?($(this).removeClass("active"),$(".tap-target").tapTarget("close")):($(this).addClass("active"),$(".tap-target").tapTarget("open"))})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
