$(document).ready(function(){function t(t){var e=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",routeType:"line",routeShadow:"false",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"50",contentAlign:"flex-start",checkboxState:"false",defaultOption:"false",UserOption:"false",StartIcon:"",RouteStartIconColor:"rgba(0, 0, 0, 1)",RouteStartIconSize:"10"};if(e[t])return e[t]}function e(e){e.addEventListener("load",function(){function o(t){t.addEventListener("load",function(){for(var e=t.contentDocument.documentElement,o=e.getElementsByTagName("path"),a=new XMLSerializer,r=document.getElementById("iconTest"),n=[],l=0;l<o.length;l++){o[l].style.fill=i.RouteStartIconColor;var s=a.serializeToString(o[l]);console.log(s),n.push(s)}console.log(n),localStorage.setItem("StartRouteIcon",JSON.stringify(n)),$("input[name=RouteStartIconColor]").change(function(t){$("option:selected",this);var e=this.value,a=this.name;i[a]=e;for(var r=0;r<o.length;r++)o[r].style.fill=i.RouteStartIconColor;localStorage.setItem("Settings",JSON.stringify(i))}),$("input[name = RouteStartIconSize]").change(function(){$("option:selected",this);var t=this.value,o=this.name;i[o]=t,$("#iconTest").attr({width:i.RouteStartIconSize,height:i.RouteStartIconSize}),e.setAttribute("width",$(r).attr("width")),e.setAttribute("height",$(r).attr("height")),console.log(e),console.log(i)})})}var a=e.contentDocument;console.log(a);var r=a.documentElement.getElementById("mapPaths").getElementsByTagName("path"),i=JSON.parse(localStorage.getItem("Settings"))||{mapColor:"rgba(255, 204, 128, 1)",mapStrokeColor:"rgba(0, 0, 0, 1)",mapPointsColor:"rgba(0, 0, 255, 1)",mapPointsBorderColor:"rgba(0, 0, 0, 1)",mapRouteColor:"rgba(0, 0, 0, 1)",bodyBackgroundColor:"rgba(243, 229, 245, 1)",routeBorderWidth:"4",routeType:"line",routeShadow:"false",pointsRadius:"8",pointsBorderWidth:"1",contentWidth:"50",contentAlign:"flex-start",checkboxState:"false",defaultOption:"false",UserOption:"false",StartIcon:"",RouteStartIconColor:"rgba(0, 0, 0, 1)",RouteStartIconSize:"2"},n=JSON.parse(localStorage.getItem("mapStyleProperties"))||{transform:""},l=1,s=0,c=0;if(""!=n.transform.length){transformString=n.transform;var d=transformString.match(/[+-]?\d+(\.\d+)?/g).map(function(t){return parseFloat(t)});console.log(d),l=d[0],s=d[1],c=d[2],console.log(l,s,c),$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)")}var g={zoom:0,e:0,f:0};console.log(n),$("#plus").bind("click",function(){l+=.1,$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),n.transform="scale("+l+") translate("+s+"    "+c+")",localStorage.setItem("mapStyleProperties",JSON.stringify(n)),localStorage.setItem("SreenCTM",JSON.stringify(g)),localStorage.setItem("zoom",JSON.stringify(l))}),$("#minus").bind("click",function(){(l-=.3)<1.1&&(l=1),$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),n.transform="scale("+l+") translate("+s+" "+c+")",localStorage.setItem("zoom",JSON.stringify(l)),localStorage.setItem("SreenCTM",JSON.stringify(g)),localStorage.setItem("mapStyleProperties",JSON.stringify(n))}),$("#moveLeft").bind("click",function(){s+=10,$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),n.transform="scale("+l+") translate("+s+" "+c+")",localStorage.setItem("SreenCTM",JSON.stringify(g)),localStorage.setItem("mapStyleProperties",JSON.stringify(n))}),$("#moveRight").bind("click",function(){s-=10,$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),n.transform="scale("+l+") translate("+s+" "+c+")",localStorage.setItem("SreenCTM",JSON.stringify(g)),localStorage.setItem("mapStyleProperties",JSON.stringify(n))}),$("#moveTop").bind("click",function(){c+=10,$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),n.transform="scale("+l+") translate("+s+" "+c+")",localStorage.setItem("SreenCTM",JSON.stringify(g)),localStorage.setItem("mapStyleProperties",JSON.stringify(n))}),$("#moveBottom").bind("click",function(){c-=10,$("#map_bg").css("transform","scale("+l+") translate("+s+"px,"+c+"px)"),n.transform="scale("+l+") translate("+s+" "+c+")",localStorage.setItem("SreenCTM",JSON.stringify(g)),localStorage.setItem("mapStyleProperties",JSON.stringify(n))});var p=document.getElementById("mapColorPicker"),m=document.getElementById("mapStrokeColorPicker"),u=document.getElementById("mapPointsColorPicker"),S=document.getElementById("mapPointsBorderColorPicker"),h=document.getElementById("mapRouteColorPicker"),f=document.getElementById("bodyColorPicker"),v=$(".colorPicker");$("#color_change");p.style.display="block",m.style.display="block",u.style.display="block",S.style.display="block",h.style.display="block",f.style.display="block",p.value=t("mapColor"),m.value=t("mapStrokeColor"),u.value=t("mapPointsColor"),S.value=t("mapPointsBorderColor"),h.value=t("mapRouteColor"),f.value=t("bodyBackgroundColor"),$("#PathStartIconColor").val(t("RouteStartIconColor")),$("#test6").value=2*t("pointsRadius");for(var y=0;y<r.length;y++)r[y].style.fill=t("mapColor"),r[y].style.stroke=t("mapStrokeColor");$("#circle_example").css({width:2*t("pointsRadius"),height:2*t("pointsRadius"),"background-color":t("mapPointsColor"),border:t("pointsBorderWidth")+"solid"+t("mapPointsBorderColor")}),$(".routeExample").css({height:t("routeBorderWidth"),"background-color":t("mapRouteColor")}),$("#iconTest").attr({width:t("RouteStartIconSize"),height:t("RouteStartIconSize")});var b=$("input[type=range]"),I=$("input[name=routeStartCheckbox]"),k=document.getElementById("mapSettings"),O=JSON.parse(localStorage.getItem("map"));if($("#mapSettings").attr("data",O),k.addEventListener("load",function(){var e=k.contentDocument.documentElement.getElementsByTagName("path");$(".map_settings_block").css("background-color",t("bodyBackgroundColor"));for(var o=0;o<e.length;o++)e[o].style.fill=t("mapColor"),e[o].style.stroke=t("mapStrokeColor");$(b).change(function(t){$("option:selected",this);var e=this.value,o=this.name;i[o]=e;for(var a=JSON.parse(localStorage.getItem("circlesCoords")),r=0;r<a.length;r++)a[r].r=i.pointsRadius;$("#circle_example").css({width:2*i.pointsRadius,height:2*i.pointsRadius,border:i.pointsBorderWidth+"px solid "+i.mapPointsBorderColor}),$(".routeExample").css("height",i.routeBorderWidth),$(".content_block").css("width",i.contentWidth+"%"),localStorage.setItem("circlesCoords",JSON.stringify(a)),localStorage.setItem("Settings",JSON.stringify(i))}),$("input[name = contentAlign]").on("click",function(){$(this).prop("checked",!0)[0].id;console.log($(this).val()),$(".test_block").css("justify-content",$(this).val()),i.contentAlign=$(this).val(),localStorage.setItem("Settings",JSON.stringify(i))}),"line"==t("routeType")&&$("input[value=line]").attr("checked",!0),"dashed"==t("routeType")&&($("input[value=dashed]").attr("checked",!0),$(".routeExample").css({height:"","background-color":"transparent","border-bottom":t("routeBorderWidth")+"px dashed "+t("mapRouteColor")}),console.log(t("routeBorderWidth")+"px dashed "+t("mapRouteColor"))),"dotted"==t("routeType")&&($("input[value=dotted]").attr("checked",!0),$(".routeExample").css({height:"","background-color":"transparent","border-bottom":t("routeBorderWidth")+"px dotted "+t("mapRouteColor")})),$("input[name = routeType]").on("click",function(){$(this).prop("checked",!0)[0].id;console.log($(this).val()),console.log($(this).val()),i.routeType=$(this).val(),"line"==$(this).val()&&$(".routeExample").css({height:t("routeBorderWidth"),"border-bottom":"0px","background-color":t("mapRouteColor")}),"dashed"==$(this).val()&&($(".routeExample").css({height:"1px","border-bottom":t("routeBorderWidth")+"px dashed "+t("mapRouteColor"),"background-color":"transparent"}),console.log(t("routeBorderWidth")+"px dashed "+t("mapRouteColor"))),"dotted"==$(this).val()&&$(".routeExample").css({height:"1px","border-bottom":t("routeBorderWidth")+"px dotted "+t("mapRouteColor"),"background-color":"transparent"}),localStorage.setItem("Settings",JSON.stringify(i))}),$("input[name=routeShadow]").attr("checked",JSON.parse(t("routeShadow"))),$("input[name=routeShadow]").on("click",function(){this.checked?(console.log("kek"),i.routeShadow="true",localStorage.setItem("Settings",JSON.stringify(i))):(console.log("jopa"),i.routeShadow="false",localStorage.setItem("Settings",JSON.stringify(i)))}),$(v).minicolors({opacity:!0,format:"rgb",rgbaString:!1,change:function(t,e){var o="rgba("+e.r+", "+e.g+", "+e.b+", "+e.a+")";console.log(o)},swatches:["rgba(154, 9, 173, 1)","rgba(240, 17, 17, 1)","rgba(0, 255, 21, 1)","rgba(15, 43, 255, 1)","rgba(255, 239, 13, 1)"],showSpeed:100}),$(v).minicolors("rgbaString"),$(v).change(function(t){$("option:selected",this);var o=this.value,a=this.name;i[a]=o;for(var n=0;n<r.length;n++)r[n].style.fill=i.mapColor,r[n].style.stroke=i.mapStrokeColor;for(var l=0;l<e.length;l++)e[l].style.fill=i.mapColor,e[l].style.stroke=i.mapStrokeColor;$(".map_settings_block").css("background-color",i.bodyBackgroundColor),$("#circle_example").css({border:i.pointsBorderWidth+"px solid "+i.mapPointsBorderColor,"background-color":i.mapPointsColor}),$(".routeExample").css("background-color",i.mapRouteColor),$(".wrap_map").css("background-color",i.bodyBackgroundColor),localStorage.setItem("Settings",JSON.stringify(i))})}),$(I).attr("checked",JSON.parse(t("checkboxState"))),$("#defaultOption").attr("checked",JSON.parse(t("defaultOption"))),$("#UserOption").attr("checked",JSON.parse(t("UserOption"))),$(I).is(":checked"))if($(".centered_form").show().css("display","flex"),$("#UserOption").is(":checked")){$(".additional_settings").show();var C=""+t("StartIcon"),N=document.getElementById("iconTest");C.length>0?($("#iconTest").attr("data",C),o(N)):$("#iconTest").attr("data","")}else $("#defaultOption").is(":checked")&&$(".additional_settings").hide();else $(".additional_settings").hide(),$(".centered_form").hide();$(I).on("click",function(){this.checked?(i.checkboxState="true",localStorage.setItem("Settings",JSON.stringify(i)),console.log(i),$(".centered_form").show().css("display","flex")):($(".centered_form").hide(),i.checkboxState="false",$(".additional_settings").hide(),localStorage.setItem("Settings",JSON.stringify(i)))}),$("#UserOption").on("click",function(){i.UserOption="true",i.defaultOption="false",localStorage.setItem("Settings",JSON.stringify(i)),$(".additional_settings").show();var e=document.getElementById("iconTest");$("#iconTest").attr("data",t("StartIcon")),o(e)}),$("#defaultOption").on("click",function(){i.UserOption="false",i.defaultOption="true",i.StartIcon="",localStorage.setItem("StartRouteIcon",JSON.stringify([])),localStorage.setItem("Settings",JSON.stringify(i)),$(".additional_settings").hide()}),$(".icon_gallery__item").on("click",function(){var t=$(this).attr("src");console.log(t);var e=document.getElementById("iconTest");$("#iconTest").attr("data",t),o(e),i.StartIcon=t,localStorage.setItem("Settings",JSON.stringify(i))})})}(o=new bezierEditor("bezier-canvas")).draw(),$("#clear").bind("click",function(){console.log(o.clearBezier()),$("#dataMap").attr("data",""),localStorage.clear(),o.draw(),window.location.reload()}),$("#redraw").bind("click",function(){o.draw(),Materialize.toast("Editor redrawn!",2e3)}),$("#screen").bind("click",function(){goFullScreen(),o.draw()}),$("#export").bind("click",function(){o.draw();if((JSON.parse(localStorage.getItem("map"))||"").length>0){var t=o.ReturnSavedPath();localStorage.setItem("SavedCurves",JSON.stringify(t));var e=JSON.parse(localStorage.getItem("path"));if(e){var a=o.exportBezier();e+=a=a.slice(1),localStorage.setItem("path",JSON.stringify(e)),console.log(a),console.log(e)}else{var r=o.exportBezier();localStorage.setItem("path",JSON.stringify(r))}window.location="drawnMap.html"}else Materialize.toast("Editor is clear! 2nd step is restricted!",2e3)}),$("#2_step_btn").on("click",function(){o.draw();if((JSON.parse(localStorage.getItem("map"))||"").length>0){var t=o.ReturnSavedPath();localStorage.setItem("SavedCurves",JSON.stringify(t));var e=JSON.parse(localStorage.getItem("path"));if(e){var a=o.exportBezier();e+=a=a.slice(1),localStorage.setItem("path",JSON.stringify(e)),console.log(a),console.log(e)}else{var r=o.exportBezier();localStorage.setItem("path",JSON.stringify(r))}window.location="drawnMap.html"}else Materialize.toast("Editor is clear! 2nd step is restricted!",2e3)}),$("#3_step_btn").on("click",function(){o.draw();if((JSON.parse(localStorage.getItem("map"))||"").length>0){var t=o.ReturnSavedPath();localStorage.setItem("SavedCurves",JSON.stringify(t));var e=JSON.parse(localStorage.getItem("path"));if(e){var a=o.exportBezier();e+=a=a.slice(1),localStorage.setItem("path",JSON.stringify(e)),console.log(a),console.log(e)}else{var r=o.exportBezier();localStorage.setItem("path",JSON.stringify(r))}window.location="ready_page.html"}else Materialize.toast("Editor is clear! 3rd step is restricted!",2e3)});var o=new bezierEditor("bezier-canvas");$(".img_item").bind("click",function(){var t=$(this).attr("src"),o=document.getElementById("dataMap");$("#dataMap").attr("data",t),e(o),localStorage.setItem("map",JSON.stringify(t)),Materialize.toast("Map is selected!",2e3),$(".button-collapse").sideNav("hide"),$(".main-menu").animate({width:0},100),$(".slide_btn.active").removeClass("active")}),o.draw(),console.log(JSON.parse(localStorage.getItem("Settings")));var a=JSON.parse(localStorage.getItem("map"))||[];if(a){var r=document.getElementById("dataMap");$("#dataMap").attr("data",a),e(r);var i=JSON.parse(localStorage.getItem("mapStyleProperties"))||[];document.getElementById("mapbg");i&&$.each(i,function(t,e){$("#map_bg").css(t,e)})}}),$(document).ready(function(){function t(){$(".main-menu").animate({width:"0px",overflow:"hidden"},100)}$(".dropdown-button").dropdown({inDuration:300,outDuration:225,constrainWidth:!1,hover:!0,gutter:0,belowOrigin:!1,alignment:"left",stopPropagation:!1}),$(".chips").material_chip(),$(".chips-autocomplete").material_chip({autocompleteOptions:{data:{Apple:null,Microsoft:null,Google:null,Travel:null,Vacation:null,"Storytelling map":null,kek:null},limit:1/0,minLength:1}}),Materialize.updateTextFields(),$("#menu").on("click",function(){$(this).hasClass(".active")?($(this).removeClass("active"),$(".tap-target").tapTarget("close")):($(this).addClass("active"),$(".tap-target").tapTarget("open"))}),$(".slide_btn").on("click",function(){if($(this).hasClass("active"))$(this).removeClass("active"),t();else{var e=$(this).attr("data-execute");console.log(e),$(".slide_btn").removeClass("active"),$(".setting_option").hide(),$(this).addClass("active"),$("#"+e).show(),function(t){var e=JSON.parse(localStorage.getItem("ProjectInfo"))||{projectName:"",projectDescription:"",tags:[]},o=e.tags||[];$(".chips").on("chip.add",function(t,e){var a=JSON.parse(localStorage.getItem("ProjectInfo"))||{},r=o.length+1;e.id=r,o.push(e),a.tags=o,localStorage.setItem("ProjectInfo",JSON.stringify(a)),console.log(o,r)}),$(".chips").on("chip.delete",function(t,e){var o=JSON.parse(localStorage.getItem("ProjectInfo"))||{},a=$(".chips-autocomplete").material_chip("data");o.tags=a,console.log(a),localStorage.setItem("ProjectInfo",JSON.stringify(o))}),"choose_map"==t?$(".main-menu").animate({width:"1250px",overflow:"visible"},100):"colorize"==t?$(".main-menu").animate({width:"800px",overflow:"visible"},100):"project"==t?($(".main-menu").animate({width:"800px",overflow:"visible"},100),e&&($("#projectName").val(e.projectName),$("#projectDescription").val(e.projectDescription),$(".chips-autocomplete").material_chip({data:e.tags})),$("#saveProjectBtn").on("click",function(){console.log("kek");var t=JSON.parse(localStorage.getItem("ProjectInfo")),e=$("#projectName").val(),o=$("#projectDescription").val();e.length>0?(t.projectName=e,t.projectDescription=o,t.tags=$(".chips-autocomplete").material_chip("data")):(t.projectName="",t.projectDescription="",t.tags=[]),console.log(t),localStorage.setItem("ProjectInfo",JSON.stringify(t)),$(".slide_btn.active").removeClass("active"),$(".main-menu").animate({width:0},100)})):"displacement"==t?$(".main-menu").animate({width:"100px",overflow:"visible"},100):"pen"==t?(Materialize.toast("Draw path and points!",3e3),$(".main-menu").animate({width:"0px",overflow:"hidden"},100)):"info"==t?$(".main-menu").animate({width:"500px",overflow:"visible"},100):"step"==t&&$(".main-menu").animate({width:"70px",overflow:"visible"},100),Materialize.updateTextFields()}(e)}}),$("#close_sidebar").on("click",function(){t()});var e=new Date;$("#current_year").text(function(t){var e=t.getFullYear();return e<10&&(e="0"+e),e}(e))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkaXRvcl9zY3JpcHQuanMiXSwibmFtZXMiOlsiJCIsImRvY3VtZW50IiwicmVhZHkiLCJnZXRTZXR0aW5nRnJvbVN0b3JhZ2UiLCJzZXR0aW5nIiwiU2V0dGluZ3NPYmplY3QiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwibWFwQ29sb3IiLCJtYXBTdHJva2VDb2xvciIsIm1hcFBvaW50c0NvbG9yIiwibWFwUG9pbnRzQm9yZGVyQ29sb3IiLCJtYXBSb3V0ZUNvbG9yIiwiYm9keUJhY2tncm91bmRDb2xvciIsInJvdXRlQm9yZGVyV2lkdGgiLCJyb3V0ZVR5cGUiLCJyb3V0ZVNoYWRvdyIsInBvaW50c1JhZGl1cyIsInBvaW50c0JvcmRlcldpZHRoIiwiY29udGVudFdpZHRoIiwiY29udGVudEFsaWduIiwiY2hlY2tib3hTdGF0ZSIsImRlZmF1bHRPcHRpb24iLCJVc2VyT3B0aW9uIiwiU3RhcnRJY29uIiwiUm91dGVTdGFydEljb25Db2xvciIsIlJvdXRlU3RhcnRJY29uU2l6ZSIsImxvYWRNYXAiLCJtYXBfY29udGFpbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvYWRJY29uIiwiaWNvbl9jb250YWluZXIiLCJzdmdSb290IiwiY29udGVudERvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwicGF0aHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInMiLCJYTUxTZXJpYWxpemVyIiwiaWNvbk9iaiIsImdldEVsZW1lbnRCeUlkIiwiaWNvblBhdGhzQXJyYXkiLCJpIiwibGVuZ3RoIiwic3R5bGUiLCJmaWxsIiwiU2V0dGluZ3NPYmoiLCJwYXRoRGlyIiwic2VyaWFsaXplVG9TdHJpbmciLCJjb25zb2xlIiwibG9nIiwicHVzaCIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJjaGFuZ2UiLCJlbCIsInRoaXMiLCJ2YWx1ZVNlbGVjdGVkIiwidmFsdWUiLCJuYW1lIiwiYXR0ciIsIndpZHRoIiwiaGVpZ2h0Iiwic2V0QXR0cmlidXRlIiwic3ZnRG9jIiwiUGF0aHNBcnJheSIsInN0eWxlUHJvcHMiLCJ0cmFuc2Zvcm0iLCJzY2FsZUltZyIsIm1vdmVMZWZ0IiwibW92ZVRvcCIsInRyYW5zZm9ybVN0cmluZyIsIlN0cmluZ1ZhbHVlcyIsIm1hdGNoIiwibWFwIiwidiIsInBhcnNlRmxvYXQiLCJjc3MiLCJvcHRpb25zQ1RNIiwiem9vbSIsImUiLCJmIiwiYmluZCIsIk1hcENvbG9yIiwiTWFwU3Ryb2tlQ29sb3IiLCJNYXBQb2ludHNDb2xvciIsIk1hcFBvaW50c0JvcmRlckNvbG9yIiwiTWFwUm91dGVDb2xvciIsIlBhZ2VCb2R5Q29sb3IiLCJDb2xvckNvbGxlY3Rpb24iLCJkaXNwbGF5IiwidmFsIiwic3Ryb2tlIiwiYmFja2dyb3VuZC1jb2xvciIsImJvcmRlciIsIlJhbmdlSW5wdXRzIiwiUm91dGVTdGFydENoZWNrYm94IiwibWFwRm9yU2V0dGluZ3MiLCJjdXJyZW50TWFwIiwiY2hhbmdlZE1hcCIsImNpcmNsZXNBcnJheSIsInIiLCJvbiIsInByb3AiLCJpZCIsImJvcmRlci1ib3R0b20iLCJjaGVja2VkIiwibWluaWNvbG9ycyIsIm9wYWNpdHkiLCJmb3JtYXQiLCJyZ2JhU3RyaW5nIiwiaHNsIiwicmdiIiwiZyIsImIiLCJhIiwic3dhdGNoZXMiLCJzaG93U3BlZWQiLCJqIiwiaXMiLCJzaG93IiwiaWNvbiIsImljb25fY29udCIsImhpZGUiLCJpY29uU1JDIiwiZWRpdG9yIiwiYmV6aWVyRWRpdG9yIiwiZHJhdyIsImNsZWFyQmV6aWVyIiwiY2xlYXIiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlbG9hZCIsIk1hdGVyaWFsaXplIiwidG9hc3QiLCJnb0Z1bGxTY3JlZW4iLCJQYXRoQ3VydmVzIiwiUmV0dXJuU2F2ZWRQYXRoIiwiRmlyc3RSb3V0ZSIsIm5ld1JvdXRlIiwiZXhwb3J0QmV6aWVyIiwic2xpY2UiLCJEcmF3blBhdGgiLCJzcmMiLCJzdmdNYXAiLCJzaWRlTmF2IiwiYW5pbWF0ZSIsInJlbW92ZUNsYXNzIiwic2F2ZWRNYXAiLCJXcmFwcGVyUHJvcHMiLCJlYWNoIiwiY2xvc2VTaWRlTmF2Iiwib3ZlcmZsb3ciLCJkcm9wZG93biIsImluRHVyYXRpb24iLCJvdXREdXJhdGlvbiIsImNvbnN0cmFpbldpZHRoIiwiaG92ZXIiLCJndXR0ZXIiLCJiZWxvd09yaWdpbiIsImFsaWdubWVudCIsInN0b3BQcm9wYWdhdGlvbiIsIm1hdGVyaWFsX2NoaXAiLCJhdXRvY29tcGxldGVPcHRpb25zIiwiZGF0YSIsIkFwcGxlIiwiTWljcm9zb2Z0IiwiR29vZ2xlIiwiVHJhdmVsIiwiVmFjYXRpb24iLCJTdG9yeXRlbGxpbmcgbWFwIiwia2VrIiwibGltaXQiLCJJbmZpbml0eSIsIm1pbkxlbmd0aCIsInVwZGF0ZVRleHRGaWVsZHMiLCJoYXNDbGFzcyIsInRhcFRhcmdldCIsImFkZENsYXNzIiwiZGF0YUF0dHJpYnV0ZSIsImFjdGlvbiIsInByb2plY3RJbmZvIiwicHJvamVjdE5hbWUiLCJwcm9qZWN0RGVzY3JpcHRpb24iLCJ0YWdzIiwidGFnc0FycmF5IiwiY2hpcCIsImNvdW50IiwicHJvamVjdFRhZ3MiLCJOYW1lSW5wdXQiLCJEZXNjcmlwdGlvbklucHV0Iiwib3BlblNpZGVOYXYiLCJkIiwiRGF0ZSIsInRleHQiLCJkYXRlIiwieWVhciIsImdldEZ1bGxZZWFyIiwiZ2V0WWVhciJdLCJtYXBwaW5ncyI6IkFBQUFBLEVBQUVDLFVBQVVDLE1BQU0sV0FDZCxTQUFTQyxFQUFzQkMsR0FDM0IsSUFBSUMsRUFBaUJDLEtBQUtDLE1BQU1DLGFBQWFDLFFBQVEsZUFDakRDLFNBQVUseUJBQ1ZDLGVBQWdCLG1CQUNoQkMsZUFBZ0IscUJBQ2hCQyxxQkFBc0IsbUJBQ3RCQyxjQUFlLG1CQUNmQyxvQkFBcUIseUJBQ3JCQyxpQkFBa0IsSUFDbEJDLFVBQVcsT0FDWEMsWUFBYSxRQUNiQyxhQUFjLElBQ2RDLGtCQUFtQixJQUNuQkMsYUFBYyxLQUNkQyxhQUFjLGFBQ2RDLGNBQWUsUUFDZkMsY0FBZSxRQUNmQyxXQUFZLFFB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LElBQUltSSxHQUNaL0ssYUFBYThDLFFBQVEsY0FBZWhELEtBQUtpRCxVQUFVZ0ksSUFDbkR2TCxFQUFFLHFCQUFxQnFKLFlBQVksVUFDbkNySixFQUFFLGNBQWNvSixTQUFTckYsTUFBTyxHQUFJLFFBRXZCLGdCQUFWdUgsRUFDUHRMLEVBQUUsY0FBY29KLFNBQ1pyRixNQUFPLFFBQ1AyRixTQUFVLFdBQ1gsS0FDYyxPQUFWNEIsR0FDUC9DLFlBQVlDLE1BQU0sd0JBQXlCLEtBQzNDeEksRUFBRSxjQUFjb0osU0FDWnJGLE1BQU8sTUFDUDJGLFNBQVUsVUFDWCxNQUNjLFFBQVY0QixFQUNQdEwsRUFBRSxjQUFjb0osU0FDWnJGLE1BQU8sUUFDUDJGLFNBQVUsV0FDWCxLQUNjLFFBQVY0QixHQUNQdEwsRUFBRSxjQUFjb0osU0FDWnJGLE1BQU8sT0FDUDJGLFNBQVUsV0FDWCxLQUVQbkIsWUFBWTBDLG1CQXhHUmdCLENBQVlaLE1BMEdwQnJMLEVBQUUsa0JBQWtCd0csR0FBRyxRQUFTLFdBQzVCaUQsTUFrQkosSUFBSXlDLEVBQUksSUFBSUMsS0FDWm5NLEVBQUUsaUJBQWlCb00sS0FSbkIsU0FBaUJDLEdBQ2YsSUFBSUMsRUFBT0QsRUFBS0UsY0FHaEIsT0FGSUQsRUFBTyxLQUFJQSxFQUFPLElBQU1BLEdBRXJCQSxFQUllRSxDQUFRTiIsImZpbGUiOiJlZGl0b3Jfc2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICBmdW5jdGlvbiBnZXRTZXR0aW5nRnJvbVN0b3JhZ2Uoc2V0dGluZykge1xyXG4gICAgICAgIHZhciBTZXR0aW5nc09iamVjdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJTZXR0aW5nc1wiKSkgfHwgeyAvLyBnZXQgZWRpdG9yIHNldHRpbmdzXHJcbiAgICAgICAgICAgIG1hcENvbG9yOiBcInJnYmEoMjU1LCAyMDQsIDEyOCwgMSlcIixcclxuICAgICAgICAgICAgbWFwU3Ryb2tlQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAxKVwiLFxyXG4gICAgICAgICAgICBtYXBQb2ludHNDb2xvcjogXCJyZ2JhKDAsIDAsIDI1NSwgMSlcIixcclxuICAgICAgICAgICAgbWFwUG9pbnRzQm9yZGVyQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAxKVwiLFxyXG4gICAgICAgICAgICBtYXBSb3V0ZUNvbG9yOiBcInJnYmEoMCwgMCwgMCwgMSlcIixcclxuICAgICAgICAgICAgYm9keUJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI0MywgMjI5LCAyNDUsIDEpXCIsXHJcbiAgICAgICAgICAgIHJvdXRlQm9yZGVyV2lkdGg6IFwiNFwiLFxyXG4gICAgICAgICAgICByb3V0ZVR5cGU6IFwibGluZVwiLFxyXG4gICAgICAgICAgICByb3V0ZVNoYWRvdzogXCJmYWxzZVwiLFxyXG4gICAgICAgICAgICBwb2ludHNSYWRpdXM6IFwiOFwiLFxyXG4gICAgICAgICAgICBwb2ludHNCb3JkZXJXaWR0aDogXCIxXCIsXHJcbiAgICAgICAgICAgIGNvbnRlbnRXaWR0aDogXCI1MFwiLFxyXG4gICAgICAgICAgICBjb250ZW50QWxpZ246IFwiZmxleC1zdGFydFwiLFxyXG4gICAgICAgICAgICBjaGVja2JveFN0YXRlOiBcImZhbHNlXCIsXHJcbiAgICAgICAgICAgIGRlZmF1bHRPcHRpb246IFwiZmFsc2VcIixcclxuICAgICAgICAgICAgVXNlck9wdGlvbjogXCJmYWxzZVwiLFxyXG4gICAgICAgICAgICBTdGFydEljb246IFwiXCIsXHJcbiAgICAgICAgICAgIFJvdXRlU3RhcnRJY29uQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAxKVwiLFxyXG4gICAgICAgICAgICBSb3V0ZVN0YXJ0SWNvblNpemU6IFwiMTBcIlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKFNldHRpbmdzT2JqZWN0W3NldHRpbmddKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTZXR0aW5nc09iamVjdFtzZXR0aW5nXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHZhciBlZGl0b3IgPSBuZXcgYmV6aWVyRWRpdG9yKFwiYmV6aWVyLWNhbnZhc1wiKTtcclxuICAgIGVkaXRvci5kcmF3KCk7IC8vIGRyYXcgY2FudmFzXHJcblxyXG4gICAgJCgnI2NsZWFyJykuYmluZChcImNsaWNrXCIsIGZ1bmN0aW9uKCkgeyAvL2NsZWFyIGNhbnZhcyBhbmQgbG9jYWxzdG9yYWdlXHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGVkaXRvci5jbGVhckJlemllcigpKTtcclxuICAgICAgICAkKFwiI2RhdGFNYXBcIikuYXR0cihcImRhdGFcIiwgXCJcIik7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcbiAgICAgICAgZWRpdG9yLmRyYXcoKTtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgJCgnI3JlZHJhdycpLmJpbmQoXCJjbGlja1wiLCBmdW5jdGlvbigpIHsgLy9yZWRyYXcgY2FudmFzXHJcblxyXG4gICAgICAgIGVkaXRvci5kcmF3KCk7XHJcbiAgICAgICAgTWF0ZXJpYWxpemUudG9hc3QoJ0VkaXRvciByZWRyYXduIScsIDIwMDApO1xyXG5cclxuICAgIH0pXHJcblxyXG4gICAgJCgnI3NjcmVlbicpLmJpbmQoXCJjbGlja1wiLCBmdW5jdGlvbigpIHsgLy8gZnVsbCBzY3JlZW4gcmVneW1lXHJcbiAgICAgICAgZ29GdWxsU2NyZWVuKCk7XHJcbiAgICAgICAgZWRpdG9yLmRyYXcoKTtcclxuICAgIH0pO1xyXG5cclxuICAgICQoJyNleHBvcnQnKS5iaW5kKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7IC8vIGV4cG9ydCBwYXRoLCBzYXZlIGFsbCBzZXR0aW5nIHRvIGxvY2Fsc3RvcmFnZSBhbmQgZ28gdG8gdGhlIG5leHQgcGFnZVxyXG4gICAgICAgIGVkaXRvci5kcmF3KCk7XHJcbiAgICAgICAgdmFyIENob3Nlbk1hcCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21hcCcpKSB8fCBcIlwiO1xyXG4gICAgICAgIGlmIChDaG9zZW5NYXAubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgUGF0aEN1cnZlcyA9IGVkaXRvci5SZXR1cm5TYXZlZFBhdGgoKTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1NhdmVkQ3VydmVzJywgSlNPTi5zdHJpbmdpZnkoUGF0aEN1cnZlcykpO1xyXG4gICAgICAgICAgICB2YXIgRmlyc3RSb3V0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BhdGgnKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoRmlyc3RSb3V0ZSkgeyAvL2NoZWNrIGlmIHBhdGggd2FzIGFscmVhZHkgZHJhd25cclxuICAgICAgICAgICAgICAgIHZhciBuZXdSb3V0ZSA9IGVkaXRvci5leHBvcnRCZXppZXIoKTtcclxuICAgICAgICAgICAgICAgIG5ld1JvdXRlID0gbmV3Um91dGUuc2xpY2UoMSk7XHJcbiAgICAgICAgICAgICAgICBGaXJzdFJvdXRlICs9IG5ld1JvdXRlOyAvLyBpZiBwYXRoIHdhcyByZWRyYXduIHRoZW4gY29ubmVjdCAyIHBhdGhzXHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGF0aCcsIEpTT04uc3RyaW5naWZ5KEZpcnN0Um91dGUpKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG5ld1JvdXRlKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKEZpcnN0Um91dGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIERyYXduUGF0aCA9IGVkaXRvci5leHBvcnRCZXppZXIoKTsgLy9jb25zdHJ1Y3RvciBtZXRob2QsIHRvIGV4cG9ydCByb3V0ZVxyXG5cclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwYXRoJywgSlNPTi5zdHJpbmdpZnkoRHJhd25QYXRoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IFwiZHJhd25NYXAuaHRtbFwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIE1hdGVyaWFsaXplLnRvYXN0KCdFZGl0b3IgaXMgY2xlYXIhIDJuZCBzdGVwIGlzIHJlc3RyaWN0ZWQhJywgMjAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJChcIiMyX3N0ZXBfYnRuXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICBlZGl0b3IuZHJhdygpO1xyXG4gICAgICAgIHZhciBDaG9zZW5NYXAgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtYXAnKSkgfHwgXCJcIjtcclxuICAgICAgICBpZiAoQ2hvc2VuTWFwLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIFBhdGhDdXJ2ZXMgPSBlZGl0b3IuUmV0dXJuU2F2ZWRQYXRoKCk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdTYXZlZEN1cnZlcycsIEpTT04uc3RyaW5naWZ5KFBhdGhDdXJ2ZXMpKTtcclxuICAgICAgICAgICAgdmFyIEZpcnN0Um91dGUgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwYXRoJykpO1xyXG5cclxuICAgICAgICAgICAgaWYgKEZpcnN0Um91dGUpIHsgLy9jaGVjayBpZiBwYXRoIHdhcyBhbHJlYWR5IGRyYXduXHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3Um91dGUgPSBlZGl0b3IuZXhwb3J0QmV6aWVyKCk7XHJcbiAgICAgICAgICAgICAgICBuZXdSb3V0ZSA9IG5ld1JvdXRlLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICAgICAgRmlyc3RSb3V0ZSArPSBuZXdSb3V0ZTsgLy8gaWYgcGF0aCB3YXMgcmVkcmF3biB0aGVuIGNvbm5lY3QgMiBwYXRoc1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BhdGgnLCBKU09OLnN0cmluZ2lmeShGaXJzdFJvdXRlKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhuZXdSb3V0ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhGaXJzdFJvdXRlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBEcmF3blBhdGggPSBlZGl0b3IuZXhwb3J0QmV6aWVyKCk7IC8vY29uc3RydWN0b3IgbWV0aG9kLCB0byBleHBvcnQgcm91dGVcclxuXHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGF0aCcsIEpTT04uc3RyaW5naWZ5KERyYXduUGF0aCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBcImRyYXduTWFwLmh0bWxcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBNYXRlcmlhbGl6ZS50b2FzdCgnRWRpdG9yIGlzIGNsZWFyISAybmQgc3RlcCBpcyByZXN0cmljdGVkIScsIDIwMDApO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQoXCIjM19zdGVwX2J0blwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgZWRpdG9yLmRyYXcoKTtcclxuICAgICAgICB2YXIgQ2hvc2VuTWFwID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbWFwJykpIHx8IFwiXCI7XHJcbiAgICAgICAgaWYgKENob3Nlbk1hcC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciBQYXRoQ3VydmVzID0gZWRpdG9yLlJldHVyblNhdmVkUGF0aCgpO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnU2F2ZWRDdXJ2ZXMnLCBKU09OLnN0cmluZ2lmeShQYXRoQ3VydmVzKSk7XHJcbiAgICAgICAgICAgIHZhciBGaXJzdFJvdXRlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGF0aCcpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChGaXJzdFJvdXRlKSB7IC8vY2hlY2sgaWYgcGF0aCB3YXMgYWxyZWFkeSBkcmF3blxyXG4gICAgICAgICAgICAgICAgdmFyIG5ld1JvdXRlID0gZWRpdG9yLmV4cG9ydEJlemllcigpO1xyXG4gICAgICAgICAgICAgICAgbmV3Um91dGUgPSBuZXdSb3V0ZS5zbGljZSgxKTtcclxuICAgICAgICAgICAgICAgIEZpcnN0Um91dGUgKz0gbmV3Um91dGU7IC8vIGlmIHBhdGggd2FzIHJlZHJhd24gdGhlbiBjb25uZWN0IDIgcGF0aHNcclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwYXRoJywgSlNPTi5zdHJpbmdpZnkoRmlyc3RSb3V0ZSkpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobmV3Um91dGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coRmlyc3RSb3V0ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgRHJhd25QYXRoID0gZWRpdG9yLmV4cG9ydEJlemllcigpOyAvL2NvbnN0cnVjdG9yIG1ldGhvZCwgdG8gZXhwb3J0IHJvdXRlXHJcblxyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BhdGgnLCBKU09OLnN0cmluZ2lmeShEcmF3blBhdGgpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gXCJyZWFkeV9wYWdlLmh0bWxcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBNYXRlcmlhbGl6ZS50b2FzdCgnRWRpdG9yIGlzIGNsZWFyISAzcmQgc3RlcCBpcyByZXN0cmljdGVkIScsIDIwMDApO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICB2YXIgZWRpdG9yID0gbmV3IGJlemllckVkaXRvcihcImJlemllci1jYW52YXNcIik7XHJcblxyXG4gICAgJCgnLmltZ19pdGVtJykuYmluZChcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzcmMgPSAkKHRoaXMpLmF0dHIoJ3NyYycpOyAvL3NhdmUgY2hvb3NlbiBtYXAgdXJsXHJcbiAgICAgICAgdmFyIHN2Z01hcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGF0YU1hcFwiKTtcclxuICAgICAgICAkKFwiI2RhdGFNYXBcIikuYXR0cihcImRhdGFcIiwgc3JjKTtcclxuICAgICAgICBsb2FkTWFwKHN2Z01hcCk7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ21hcCcsIEpTT04uc3RyaW5naWZ5KHNyYykpO1xyXG4gICAgICAgIE1hdGVyaWFsaXplLnRvYXN0KCdNYXAgaXMgc2VsZWN0ZWQhJywgMjAwMCk7XHJcbiAgICAgICAgJCgnLmJ1dHRvbi1jb2xsYXBzZScpLnNpZGVOYXYoJ2hpZGUnKTtcclxuICAgICAgICAkKFwiLm1haW4tbWVudVwiKS5hbmltYXRlKHt3aWR0aDogMH0sIDEwMCk7XHJcbiAgICAgICAgJChcIi5zbGlkZV9idG4uYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIGVkaXRvci5kcmF3KCk7XHJcbiAgICBjb25zb2xlLmxvZyhKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiU2V0dGluZ3NcIikpKTtcclxuXHJcbiAgICBmdW5jdGlvbiBsb2FkTWFwKG1hcF9jb250YWluZXIpIHtcclxuICAgICAgICBtYXBfY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCkgeyAvL2xvYWQgY2hvb3NlbiBwYXRoXHJcbiAgICAgICAgICAgIHZhciBzdmdEb2MgPSBtYXBfY29udGFpbmVyLmNvbnRlbnREb2N1bWVudDsgLy9nZXQgdGhlIGlubmVyIERPTSBvZiBhbHBoYS5zdmdcclxuICAgICAgICAgICAgY29uc29sZS5sb2coc3ZnRG9jKTtcclxuICAgICAgICAgICAgdmFyIHN2Z1Jvb3QgPSBzdmdEb2MuZG9jdW1lbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB2YXIgTWFwUGF0aHNHcm91cCA9IHN2Z1Jvb3QuZ2V0RWxlbWVudEJ5SWQoXCJtYXBQYXRoc1wiKTtcclxuICAgICAgICAgICAgdmFyIFBhdGhzQXJyYXkgPSBNYXBQYXRoc0dyb3VwLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdwYXRoJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgU2V0dGluZ3NPYmogPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiU2V0dGluZ3NcIikpIHx8IHsgLy9wYWdlIHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICBtYXBDb2xvcjogXCJyZ2JhKDI1NSwgMjA0LCAxMjgsIDEpXCIsXHJcbiAgICAgICAgICAgICAgICBtYXBTdHJva2VDb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDEpXCIsXHJcbiAgICAgICAgICAgICAgICBtYXBQb2ludHNDb2xvcjogXCJyZ2JhKDAsIDAsIDI1NSwgMSlcIixcclxuICAgICAgICAgICAgICAgIG1hcFBvaW50c0JvcmRlckNvbG9yOiBcInJnYmEoMCwgMCwgMCwgMSlcIixcclxuICAgICAgICAgICAgICAgIG1hcFJvdXRlQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAxKVwiLFxyXG4gICAgICAgICAgICAgICAgYm9keUJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDI0MywgMjI5LCAyNDUsIDEpXCIsXHJcbiAgICAgICAgICAgICAgICByb3V0ZUJvcmRlcldpZHRoOiBcIjRcIixcclxuICAgICAgICAgICAgICAgIHJvdXRlVHlwZTogXCJsaW5lXCIsXHJcbiAgICAgICAgICAgICAgICByb3V0ZVNoYWRvdzogXCJmYWxzZVwiLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRzUmFkaXVzOiBcIjhcIixcclxuICAgICAgICAgICAgICAgIHBvaW50c0JvcmRlcldpZHRoOiBcIjFcIixcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRXaWR0aDogXCI1MFwiLFxyXG4gICAgICAgICAgICAgICAgY29udGVudEFsaWduOiBcImZsZXgtc3RhcnRcIixcclxuICAgICAgICAgICAgICAgIGNoZWNrYm94U3RhdGU6IFwiZmFsc2VcIixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRpb246IFwiZmFsc2VcIixcclxuICAgICAgICAgICAgICAgIFVzZXJPcHRpb246IFwiZmFsc2VcIixcclxuICAgICAgICAgICAgICAgIFN0YXJ0SWNvbjogXCJcIixcclxuICAgICAgICAgICAgICAgIFJvdXRlU3RhcnRJY29uQ29sb3I6IFwicmdiYSgwLCAwLCAwLCAxKVwiLFxyXG4gICAgICAgICAgICAgICAgUm91dGVTdGFydEljb25TaXplOiBcIjJcIlxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0eWxlUHJvcHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibWFwU3R5bGVQcm9wZXJ0aWVzXCIpKSB8fCB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IFwiXCJcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzY2FsZUltZyA9IDE7XHJcbiAgICAgICAgICAgIHZhciBtb3ZlTGVmdCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBtb3ZlVG9wID0gMDtcclxuICAgICAgICAgICAgdmFyIG1vdmVMZWZ0RGVmYXVsdCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBtb3ZlVG9wRGVmYXVsdCA9IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAoKHN0eWxlUHJvcHMudHJhbnNmb3JtKS5sZW5ndGggIT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtU3RyaW5nID0gKHN0eWxlUHJvcHMudHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgICAgIHZhciByZWdleCA9IC9bKy1dP1xcZCsoXFwuXFxkKyk/L2c7XHJcbiAgICAgICAgICAgICAgICB2YXIgU3RyaW5nVmFsdWVzID0gdHJhbnNmb3JtU3RyaW5nLm1hdGNoKHJlZ2V4KS5tYXAoZnVuY3Rpb24odikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHYpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhTdHJpbmdWYWx1ZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNjYWxlSW1nID0gU3RyaW5nVmFsdWVzWzBdO1xyXG4gICAgICAgICAgICAgICAgbW92ZUxlZnQgPSBTdHJpbmdWYWx1ZXNbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVRvcCA9IFN0cmluZ1ZhbHVlc1syXTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNjYWxlSW1nLCBtb3ZlTGVmdCwgbW92ZVRvcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJChcIiNtYXBfYmdcIikuY3NzKFwidHJhbnNmb3JtXCIsIFwic2NhbGUoXCIgKyBzY2FsZUltZyArIFwiKSB0cmFuc2xhdGUoXCIgKyBtb3ZlTGVmdCArIFwicHgsXCIgKyBtb3ZlVG9wICsgXCJweClcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBvcHRpb25zQ1RNID0ge1xyXG4gICAgICAgICAgICAgICAgem9vbTogMCxcclxuICAgICAgICAgICAgICAgIGU6IDAsXHJcbiAgICAgICAgICAgICAgICBmOiAwXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzdHlsZVByb3BzKTtcclxuXHJcbiAgICAgICAgICAgICQoXCIjcGx1c1wiKS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKCkgeyAvL3pvb20gbWFwXHJcbiAgICAgICAgICAgICAgICBzY2FsZUltZyArPSAwLjE7XHJcbiAgICAgICAgICAgICAgICAkKCcjbWFwX2JnJykuY3NzKFwidHJhbnNmb3JtXCIsIFwic2NhbGUoXCIgKyBzY2FsZUltZyArIFwiKSB0cmFuc2xhdGUoXCIgKyBtb3ZlTGVmdCArIFwicHgsXCIgKyBtb3ZlVG9wICsgXCJweClcIik7XHJcbiAgICAgICAgICAgICAgICBzdHlsZVByb3BzLnRyYW5zZm9ybSA9IFwic2NhbGUoXCIgKyBzY2FsZUltZyArIFwiKSB0cmFuc2xhdGUoXCIgKyBtb3ZlTGVmdCArIFwiICAgIFwiICsgbW92ZVRvcCArIFwiKVwiO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLyB2YXIgY3R4ID0gZWRpdG9yLmN0eDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjdHgudHJhbnNmb3JtKHNjYWxlSW1nLCAwLCAwLCBzY2FsZUltZywgbW92ZUxlZnQsIG1vdmVUb3ApO1xyXG4gICAgICAgICAgICAgICAgLy8gZWRpdG9yLmRyYXcoKTtcclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibWFwU3R5bGVQcm9wZXJ0aWVzXCIsIEpTT04uc3RyaW5naWZ5KHN0eWxlUHJvcHMpKTtcclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiU3JlZW5DVE1cIiwgSlNPTi5zdHJpbmdpZnkob3B0aW9uc0NUTSkpO1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3pvb20nLCBKU09OLnN0cmluZ2lmeShzY2FsZUltZykpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJChcIiNtaW51c1wiKS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgc2NhbGVJbWcgLT0gMC4zO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNjYWxlSW1nIDwgMS4xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVJbWcgPSAxLjA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJCgnI21hcF9iZycpLmNzcyhcInRyYW5zZm9ybVwiLCBcInNjYWxlKFwiICsgc2NhbGVJbWcgKyBcIikgdHJhbnNsYXRlKFwiICsgbW92ZUxlZnQgKyBcInB4LFwiICsgbW92ZVRvcCArIFwicHgpXCIpO1xyXG4gICAgICAgICAgICAgICAgc3R5bGVQcm9wcy50cmFuc2Zvcm0gPSBcInNjYWxlKFwiICsgc2NhbGVJbWcgKyBcIikgdHJhbnNsYXRlKFwiICsgbW92ZUxlZnQgKyBcIiBcIiArIG1vdmVUb3AgKyBcIilcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAkKCdjYW52YXMnKS5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJzY2FsZShcIiArIHNjYWxlSW1nICsgXCIpIHRyYW5zbGF0ZShcIisgbW92ZUxlZnQgK1wiIFwiICsgbW92ZVRvcCsgXCIpXCIpO1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3pvb20nLCBKU09OLnN0cmluZ2lmeShzY2FsZUltZykpO1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJTcmVlbkNUTVwiLCBKU09OLnN0cmluZ2lmeShvcHRpb25zQ1RNKSk7XHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm1hcFN0eWxlUHJvcGVydGllc1wiLCBKU09OLnN0cmluZ2lmeShzdHlsZVByb3BzKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICQoXCIjbW92ZUxlZnRcIikuYmluZChcImNsaWNrXCIsIGZ1bmN0aW9uKCkgeyAvLyBtb3ZlIG1hcCBsZWZ0XHJcbiAgICAgICAgICAgICAgICBtb3ZlTGVmdCArPSAxMDtcclxuICAgICAgICAgICAgICAgICQoJyNtYXBfYmcnKS5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJzY2FsZShcIiArIHNjYWxlSW1nICsgXCIpIHRyYW5zbGF0ZShcIiArIG1vdmVMZWZ0ICsgXCJweCxcIiArIG1vdmVUb3AgKyBcInB4KVwiKTtcclxuICAgICAgICAgICAgICAgIHN0eWxlUHJvcHMudHJhbnNmb3JtID0gXCJzY2FsZShcIiArIHNjYWxlSW1nICsgXCIpIHRyYW5zbGF0ZShcIiArIG1vdmVMZWZ0ICsgXCIgXCIgKyBtb3ZlVG9wICsgXCIpXCI7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiU3JlZW5DVE1cIiwgSlNPTi5zdHJpbmdpZnkob3B0aW9uc0NUTSkpO1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJtYXBTdHlsZVByb3BlcnRpZXNcIiwgSlNPTi5zdHJpbmdpZnkoc3R5bGVQcm9wcykpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJChcIiNtb3ZlUmlnaHRcIikuYmluZChcImNsaWNrXCIsIGZ1bmN0aW9uKCkgeyAvLyBtb3ZlIG1hcCByaWdodFxyXG4gICAgICAgICAgICAgICAgbW92ZUxlZnQgLT0gMTA7XHJcbiAgICAgICAgICAgICAgICAkKCcjbWFwX2JnJykuY3NzKFwidHJhbnNmb3JtXCIsIFwic2NhbGUoXCIgKyBzY2FsZUltZyArIFwiKSB0cmFuc2xhdGUoXCIgKyBtb3ZlTGVmdCArIFwicHgsXCIgKyBtb3ZlVG9wICsgXCJweClcIik7XHJcbiAgICAgICAgICAgICAgICBzdHlsZVByb3BzLnRyYW5zZm9ybSA9IFwic2NhbGUoXCIgKyBzY2FsZUltZyArIFwiKSB0cmFuc2xhdGUoXCIgKyBtb3ZlTGVmdCArIFwiIFwiICsgbW92ZVRvcCArIFwiKVwiO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIlNyZWVuQ1RNXCIsIEpTT04uc3RyaW5naWZ5KG9wdGlvbnNDVE0pKTtcclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibWFwU3R5bGVQcm9wZXJ0aWVzXCIsIEpTT04uc3RyaW5naWZ5KHN0eWxlUHJvcHMpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICQoXCIjbW92ZVRvcFwiKS5iaW5kKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7IC8vIG1vdmUgbWFwIHRvcFxyXG4gICAgICAgICAgICAgICAgbW92ZVRvcCArPSAxMDtcclxuICAgICAgICAgICAgICAgICQoJyNtYXBfYmcnKS5jc3MoXCJ0cmFuc2Zvcm1cIiwgXCJzY2FsZShcIiArIHNjYWxlSW1nICsgXCIpIHRyYW5zbGF0ZShcIiArIG1vdmVMZWZ0ICsgXCJweCxcIiArIG1vdmVUb3AgKyBcInB4KVwiKTtcclxuICAgICAgICAgICAgICAgIHN0eWxlUHJvcHMudHJhbnNmb3JtID0gXCJzY2FsZShcIiArIHNjYWxlSW1nICsgXCIpIHRyYW5zbGF0ZShcIiArIG1vdmVMZWZ0ICsgXCIgXCIgKyBtb3ZlVG9wICsgXCIpXCI7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiU3JlZW5DVE1cIiwgSlNPTi5zdHJpbmdpZnkob3B0aW9uc0NUTSkpO1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJtYXBTdHlsZVByb3BlcnRpZXNcIiwgSlNPTi5zdHJpbmdpZnkoc3R5bGVQcm9wcykpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJChcIiNtb3ZlQm90dG9tXCIpLmJpbmQoXCJjbGlja1wiLCBmdW5jdGlvbigpIHsgLy8gbW92ZSBtYXAgYm90dG9tXHJcbiAgICAgICAgICAgICAgICBtb3ZlVG9wIC09IDEwO1xyXG4gICAgICAgICAgICAgICAgJCgnI21hcF9iZycpLmNzcyhcInRyYW5zZm9ybVwiLCBcInNjYWxlKFwiICsgc2NhbGVJbWcgKyBcIikgdHJhbnNsYXRlKFwiICsgbW92ZUxlZnQgKyBcInB4LFwiICsgbW92ZVRvcCArIFwicHgpXCIpO1xyXG4gICAgICAgICAgICAgICAgc3R5bGVQcm9wcy50cmFuc2Zvcm0gPSBcInNjYWxlKFwiICsgc2NhbGVJbWcgKyBcIikgdHJhbnNsYXRlKFwiICsgbW92ZUxlZnQgKyBcIiBcIiArIG1vdmVUb3AgKyBcIilcIjtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJTcmVlbkNUTVwiLCBKU09OLnN0cmluZ2lmeShvcHRpb25zQ1RNKSk7XHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm1hcFN0eWxlUHJvcGVydGllc1wiLCBKU09OLnN0cmluZ2lmeShzdHlsZVByb3BzKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZhciBNYXBDb2xvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFwQ29sb3JQaWNrZXJcIik7XHJcbiAgICAgICAgICAgIHZhciBNYXBTdHJva2VDb2xvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFwU3Ryb2tlQ29sb3JQaWNrZXJcIik7XHJcbiAgICAgICAgICAgIHZhciBNYXBQb2ludHNDb2xvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFwUG9pbnRzQ29sb3JQaWNrZXJcIik7XHJcbiAgICAgICAgICAgIHZhciBNYXBQb2ludHNCb3JkZXJDb2xvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFwUG9pbnRzQm9yZGVyQ29sb3JQaWNrZXJcIik7XHJcbiAgICAgICAgICAgIHZhciBNYXBSb3V0ZUNvbG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYXBSb3V0ZUNvbG9yUGlja2VyXCIpO1xyXG4gICAgICAgICAgICB2YXIgUGFnZUJvZHlDb2xvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYm9keUNvbG9yUGlja2VyXCIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIENvbG9yQ29sbGVjdGlvbiA9ICQoXCIuY29sb3JQaWNrZXJcIik7XHJcblxyXG4gICAgICAgICAgICB2YXIgY29sb3JfY2hhbmdlID0gJChcIiNjb2xvcl9jaGFuZ2VcIik7XHJcblxyXG4gICAgICAgICAgICBNYXBDb2xvci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICBNYXBTdHJva2VDb2xvci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICBNYXBQb2ludHNDb2xvci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICBNYXBQb2ludHNCb3JkZXJDb2xvci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICBNYXBSb3V0ZUNvbG9yLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgIFBhZ2VCb2R5Q29sb3Iuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuXHJcbiAgICAgICAgICAgIE1hcENvbG9yLnZhbHVlID0gZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwibWFwQ29sb3JcIik7XHJcbiAgICAgICAgICAgIE1hcFN0cm9rZUNvbG9yLnZhbHVlID0gZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwibWFwU3Ryb2tlQ29sb3JcIik7XHJcbiAgICAgICAgICAgIE1hcFBvaW50c0NvbG9yLnZhbHVlID0gZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwibWFwUG9pbnRzQ29sb3JcIik7XHJcbiAgICAgICAgICAgIE1hcFBvaW50c0JvcmRlckNvbG9yLnZhbHVlID0gZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwibWFwUG9pbnRzQm9yZGVyQ29sb3JcIik7XHJcbiAgICAgICAgICAgIE1hcFJvdXRlQ29sb3IudmFsdWUgPSBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJtYXBSb3V0ZUNvbG9yXCIpO1xyXG4gICAgICAgICAgICBQYWdlQm9keUNvbG9yLnZhbHVlID0gZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwiYm9keUJhY2tncm91bmRDb2xvclwiKTtcclxuICAgICAgICAgICAgJChcIiNQYXRoU3RhcnRJY29uQ29sb3JcIikudmFsKGdldFNldHRpbmdGcm9tU3RvcmFnZShcIlJvdXRlU3RhcnRJY29uQ29sb3JcIikpO1xyXG5cclxuICAgICAgICAgICAgJCgnI3Rlc3Q2JykudmFsdWUgPSBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJwb2ludHNSYWRpdXNcIikgKiAyO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBQYXRoc0FycmF5Lmxlbmd0aDsgaSsrKSB7IC8vY2hhbmdlIG1hcCBjb2xvciBhbmQgbWFwIHN0cm9rZSBjb2xvciBkdWUgdG8gc2V0dGluZ3NcclxuICAgICAgICAgICAgICAgIFBhdGhzQXJyYXlbaV0uc3R5bGUuZmlsbCA9IGdldFNldHRpbmdGcm9tU3RvcmFnZShcIm1hcENvbG9yXCIpO1xyXG4gICAgICAgICAgICAgICAgUGF0aHNBcnJheVtpXS5zdHlsZS5zdHJva2UgPSBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJtYXBTdHJva2VDb2xvclwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICQoJyNjaXJjbGVfZXhhbXBsZScpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwicG9pbnRzUmFkaXVzXCIpICogMixcclxuICAgICAgICAgICAgICAgIGhlaWdodDogZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwicG9pbnRzUmFkaXVzXCIpICogMixcclxuICAgICAgICAgICAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJtYXBQb2ludHNDb2xvclwiKSxcclxuICAgICAgICAgICAgICAgIGJvcmRlcjogZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwicG9pbnRzQm9yZGVyV2lkdGhcIikgKyBcInNvbGlkXCIgKyBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJtYXBQb2ludHNCb3JkZXJDb2xvclwiKVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICQoXCIucm91dGVFeGFtcGxlXCIpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGdldFNldHRpbmdGcm9tU3RvcmFnZShcInJvdXRlQm9yZGVyV2lkdGhcIiksXHJcbiAgICAgICAgICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIjogZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwibWFwUm91dGVDb2xvclwiKVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICQoXCIjaWNvblRlc3RcIikuYXR0cih7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwiUm91dGVTdGFydEljb25TaXplXCIpLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJSb3V0ZVN0YXJ0SWNvblNpemVcIilcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgUmFuZ2VJbnB1dHMgPSAkKFwiaW5wdXRbdHlwZT1yYW5nZV1cIik7XHJcbiAgICAgICAgICAgIHZhciBSb3V0ZVN0YXJ0Q2hlY2tib3ggPSAkKFwiaW5wdXRbbmFtZT1yb3V0ZVN0YXJ0Q2hlY2tib3hdXCIpO1xyXG4gICAgICAgICAgICB2YXIgbWFwRm9yU2V0dGluZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hcFNldHRpbmdzXCIpO1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudE1hcCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJtYXBcIikpO1xyXG4gICAgICAgICAgICAkKFwiI21hcFNldHRpbmdzXCIpLmF0dHIoXCJkYXRhXCIsIGN1cnJlbnRNYXApO1xyXG5cclxuXHJcbiAgICAgICAgICAgIG1hcEZvclNldHRpbmdzLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN2Z0RvYyA9IG1hcEZvclNldHRpbmdzLmNvbnRlbnREb2N1bWVudDsgLy9nZXQgdGhlIGlubmVyIERPTSBvZiBhbHBoYS5zdmdcclxuICAgICAgICAgICAgICAgIHZhciBzdmdSb290ID0gc3ZnRG9jLmRvY3VtZW50RWxlbWVudDtcclxuICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VkTWFwID0gc3ZnUm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgncGF0aCcpOztcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgJChcIi5tYXBfc2V0dGluZ3NfYmxvY2tcIikuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJib2R5QmFja2dyb3VuZENvbG9yXCIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYW5nZWRNYXAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkTWFwW2ldLnN0eWxlLmZpbGwgPSBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJtYXBDb2xvclwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkTWFwW2ldLnN0eWxlLnN0cm9rZSA9IGdldFNldHRpbmdGcm9tU3RvcmFnZShcIm1hcFN0cm9rZUNvbG9yXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAkKFJhbmdlSW5wdXRzKS5jaGFuZ2UoZnVuY3Rpb24oZWwpIHsgLy91c2VyIHJhbmdlIHNldHRpbmdzIGNob2ljZSB2aXp1YWxpemF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvblNlbGVjdGVkID0gJChcIm9wdGlvbjpzZWxlY3RlZFwiLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVTZWxlY3RlZCA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSB0aGlzLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgU2V0dGluZ3NPYmpbbmFtZV0gPSB2YWx1ZVNlbGVjdGVkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2lyY2xlc0FycmF5ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2lyY2xlc0Nvb3JkcycpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaXJjbGVzQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlc0FycmF5W2ldLnIgPSBTZXR0aW5nc09iai5wb2ludHNSYWRpdXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKCcjY2lyY2xlX2V4YW1wbGUnKS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogU2V0dGluZ3NPYmoucG9pbnRzUmFkaXVzICogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBTZXR0aW5nc09iai5wb2ludHNSYWRpdXMgKiAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IFNldHRpbmdzT2JqLnBvaW50c0JvcmRlcldpZHRoICsgXCJweCBzb2xpZCBcIiArIFNldHRpbmdzT2JqLm1hcFBvaW50c0JvcmRlckNvbG9yLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5yb3V0ZUV4YW1wbGVcIikuY3NzKFwiaGVpZ2h0XCIsIFNldHRpbmdzT2JqLnJvdXRlQm9yZGVyV2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIuY29udGVudF9ibG9ja1wiKS5jc3MoXCJ3aWR0aFwiLCBTZXR0aW5nc09iai5jb250ZW50V2lkdGggKyBcIiVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjaXJjbGVzQ29vcmRzJywgSlNPTi5zdHJpbmdpZnkoY2lyY2xlc0FycmF5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1NldHRpbmdzJywgSlNPTi5zdHJpbmdpZnkoU2V0dGluZ3NPYmopKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICQoJ2lucHV0W25hbWUgPSBjb250ZW50QWxpZ25dJykub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHsgLy9jaG9vc2UgdGV4dCBhbGlnbiBvbiAzcmQgc3RlcFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2VkUmFkaW8gPSAkKHRoaXMpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWxpZ25DbGFzcyA9IGNoZWNrZWRSYWRpb1swXS5pZDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcudGVzdF9ibG9jaycpLmNzcyhcImp1c3RpZnktY29udGVudFwiLCAkKHRoaXMpLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBTZXR0aW5nc09iai5jb250ZW50QWxpZ24gPSAkKHRoaXMpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdTZXR0aW5ncycsIEpTT04uc3RyaW5naWZ5KFNldHRpbmdzT2JqKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGdldFNldHRpbmdGcm9tU3RvcmFnZShcInJvdXRlVHlwZVwiKSA9PSBcImxpbmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCJpbnB1dFt2YWx1ZT1saW5lXVwiKS5hdHRyKFwiY2hlY2tlZFwiLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJyb3V0ZVR5cGVcIikgPT0gXCJkYXNoZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCJpbnB1dFt2YWx1ZT1kYXNoZWRdXCIpLmF0dHIoXCJjaGVja2VkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIucm91dGVFeGFtcGxlXCIpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidHJhbnNwYXJlbnRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJib3JkZXItYm90dG9tXCI6IGdldFNldHRpbmdGcm9tU3RvcmFnZShcInJvdXRlQm9yZGVyV2lkdGhcIikgKyBcInB4XCIgKyBcIiBkYXNoZWQgXCIgKyBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJtYXBSb3V0ZUNvbG9yXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwicm91dGVCb3JkZXJXaWR0aFwiKSArIFwicHhcIiArIFwiIGRhc2hlZCBcIiArIGdldFNldHRpbmdGcm9tU3RvcmFnZShcIm1hcFJvdXRlQ29sb3JcIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGdldFNldHRpbmdGcm9tU3RvcmFnZShcInJvdXRlVHlwZVwiKSA9PSBcImRvdHRlZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcImlucHV0W3ZhbHVlPWRvdHRlZF1cIikuYXR0cihcImNoZWNrZWRcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5yb3V0ZUV4YW1wbGVcIikuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ0cmFuc3BhcmVudFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci1ib3R0b21cIjogZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwicm91dGVCb3JkZXJXaWR0aFwiKSArIFwicHhcIiArIFwiIGRvdHRlZCBcIiArIGdldFNldHRpbmdGcm9tU3RvcmFnZShcIm1hcFJvdXRlQ29sb3JcIilcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgJCgnaW5wdXRbbmFtZSA9IHJvdXRlVHlwZV0nKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCkgeyAvL2Nob29zZSByb3V0ZSB0eXBlIG9uIDNyZCBzdGVwXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrZWRSYWRpbyA9ICQodGhpcykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbGlnbkNsYXNzID0gY2hlY2tlZFJhZGlvWzBdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCQodGhpcykudmFsKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCQodGhpcykudmFsKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICQoJy50ZXN0X2Jsb2NrJykuY3NzKFwianVzdGlmeS1jb250ZW50XCIsICQodGhpcykudmFsKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIFNldHRpbmdzT2JqLnJvdXRlVHlwZSA9ICQodGhpcykudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnZhbCgpID09IFwibGluZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIucm91dGVFeGFtcGxlXCIpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGdldFNldHRpbmdGcm9tU3RvcmFnZShcInJvdXRlQm9yZGVyV2lkdGhcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci1ib3R0b21cIjogXCIwcHhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJtYXBSb3V0ZUNvbG9yXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS52YWwoKSA9PSBcImRhc2hlZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIucm91dGVFeGFtcGxlXCIpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiMXB4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci1ib3R0b21cIjogZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwicm91dGVCb3JkZXJXaWR0aFwiKSArIFwicHhcIiArIFwiIGRhc2hlZCBcIiArIGdldFNldHRpbmdGcm9tU3RvcmFnZShcIm1hcFJvdXRlQ29sb3JcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ0cmFuc3BhcmVudFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJyb3V0ZUJvcmRlcldpZHRoXCIpICsgXCJweFwiICsgXCIgZGFzaGVkIFwiICsgZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwibWFwUm91dGVDb2xvclwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnZhbCgpID09IFwiZG90dGVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5yb3V0ZUV4YW1wbGVcIikuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogXCIxcHhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYm9yZGVyLWJvdHRvbVwiOiBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJyb3V0ZUJvcmRlcldpZHRoXCIpICsgXCJweFwiICsgXCIgZG90dGVkIFwiICsgZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwibWFwUm91dGVDb2xvclwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInRyYW5zcGFyZW50XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnU2V0dGluZ3MnLCBKU09OLnN0cmluZ2lmeShTZXR0aW5nc09iaikpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAkKFwiaW5wdXRbbmFtZT1yb3V0ZVNoYWRvd11cIikuYXR0cihcImNoZWNrZWRcIiwgSlNPTi5wYXJzZShnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJyb3V0ZVNoYWRvd1wiKSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICQoXCJpbnB1dFtuYW1lPXJvdXRlU2hhZG93XVwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJrZWtcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldHRpbmdzT2JqLnJvdXRlU2hhZG93ID0gXCJ0cnVlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdTZXR0aW5ncycsIEpTT04uc3RyaW5naWZ5KFNldHRpbmdzT2JqKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJqb3BhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZXR0aW5nc09iai5yb3V0ZVNoYWRvdyA9IFwiZmFsc2VcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1NldHRpbmdzJywgSlNPTi5zdHJpbmdpZnkoU2V0dGluZ3NPYmopKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKENvbG9yQ29sbGVjdGlvbikubWluaWNvbG9ycyh7IC8vanF1ZXJ5LW1pbmljb2xvcnMgcGx1Z2luIHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFwicmdiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcmdiYVN0cmluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbihoc2wsIHJnYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmdiYVN0cmluZyA9ICdyZ2JhKCcgKyByZ2IuciArICcsICcgKyByZ2IuZyArICcsICcgKyByZ2IuYiArICcsICcgKyByZ2IuYSArICcpJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmdiYVN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzd2F0Y2hlczogWydyZ2JhKDE1NCwgOSwgMTczLCAxKScsICdyZ2JhKDI0MCwgMTcsIDE3LCAxKScsICdyZ2JhKDAsIDI1NSwgMjEsIDEpJywgJ3JnYmEoMTUsIDQzLCAyNTUsIDEpJywgJ3JnYmEoMjU1LCAyMzksIDEzLCAxKSddLFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dTcGVlZDogMTAwXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKENvbG9yQ29sbGVjdGlvbikubWluaWNvbG9ycyhcInJnYmFTdHJpbmdcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgJChDb2xvckNvbGxlY3Rpb24pLmNoYW5nZShmdW5jdGlvbihlbCkgeyAvL3VzZXIgY29sb3Igc2V0dGluZ3MgY2hvaWNlIHZpenVhbGl6YXRpb24gYW5kIHNhdmluZyB0byBsb2NhbHN0b3JhZ2VcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uU2VsZWN0ZWQgPSAkKFwib3B0aW9uOnNlbGVjdGVkXCIsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZVNlbGVjdGVkID0gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHRoaXMubmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgU2V0dGluZ3NPYmpbbmFtZV0gPSB2YWx1ZVNlbGVjdGVkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFBhdGhzQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUGF0aHNBcnJheVtpXS5zdHlsZS5maWxsID0gU2V0dGluZ3NPYmoubWFwQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBhdGhzQXJyYXlbaV0uc3R5bGUuc3Ryb2tlID0gU2V0dGluZ3NPYmoubWFwU3Ryb2tlQ29sb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2hhbmdlZE1hcC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkTWFwW2pdLnN0eWxlLmZpbGwgPSBTZXR0aW5nc09iai5tYXBDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlZE1hcFtqXS5zdHlsZS5zdHJva2UgPSBTZXR0aW5nc09iai5tYXBTdHJva2VDb2xvcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5tYXBfc2V0dGluZ3NfYmxvY2tcIikuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBTZXR0aW5nc09iai5ib2R5QmFja2dyb3VuZENvbG9yKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI2NpcmNsZV9leGFtcGxlJykuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBcIlwiICsgU2V0dGluZ3NPYmoucG9pbnRzQm9yZGVyV2lkdGggKyBcInB4IHNvbGlkIFwiICsgU2V0dGluZ3NPYmoubWFwUG9pbnRzQm9yZGVyQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBTZXR0aW5nc09iai5tYXBQb2ludHNDb2xvclxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIucm91dGVFeGFtcGxlXCIpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgU2V0dGluZ3NPYmoubWFwUm91dGVDb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi53cmFwX21hcFwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFNldHRpbmdzT2JqLmJvZHlCYWNrZ3JvdW5kQ29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdTZXR0aW5ncycsIEpTT04uc3RyaW5naWZ5KFNldHRpbmdzT2JqKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJChSb3V0ZVN0YXJ0Q2hlY2tib3gpLmF0dHIoXCJjaGVja2VkXCIsIEpTT04ucGFyc2UoZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwiY2hlY2tib3hTdGF0ZVwiKSkpO1xyXG4gICAgICAgICAgICAkKFwiI2RlZmF1bHRPcHRpb25cIikuYXR0cihcImNoZWNrZWRcIiwgSlNPTi5wYXJzZShnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJkZWZhdWx0T3B0aW9uXCIpKSk7IC8vZGVmYXVsdCBSb3V0ZSBTdGFydCBzdHlsZVxyXG4gICAgICAgICAgICAkKFwiI1VzZXJPcHRpb25cIikuYXR0cihcImNoZWNrZWRcIiwgSlNPTi5wYXJzZShnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJVc2VyT3B0aW9uXCIpKSk7IC8vVXNlcidzIGNob2ljZSBvZiBSb3V0ZSBTdGFydCBzdHlsZVxyXG5cclxuICAgICAgICAgICAgaWYgKCQoUm91dGVTdGFydENoZWNrYm94KS5pcyhcIjpjaGVja2VkXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiLmNlbnRlcmVkX2Zvcm1cIikuc2hvdygpLmNzcygnZGlzcGxheScsICdmbGV4Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJChcIiNVc2VyT3B0aW9uXCIpLmlzKFwiOmNoZWNrZWRcIikpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5hZGRpdGlvbmFsX3NldHRpbmdzXCIpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWNvbiA9IFwiXCIgKyBnZXRTZXR0aW5nRnJvbVN0b3JhZ2UoXCJTdGFydEljb25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGljb25fY29udCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWNvblRlc3RcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGljb24ubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNpY29uVGVzdFwiKS5hdHRyKFwiZGF0YVwiLCBpY29uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEljb24oaWNvbl9jb250KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2ljb25UZXN0XCIpLmF0dHIoXCJkYXRhXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJChcIiNkZWZhdWx0T3B0aW9uXCIpLmlzKFwiOmNoZWNrZWRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiLmFkZGl0aW9uYWxfc2V0dGluZ3NcIikuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoXCIuYWRkaXRpb25hbF9zZXR0aW5nc1wiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiLmNlbnRlcmVkX2Zvcm1cIikuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkKFJvdXRlU3RhcnRDaGVja2JveCkub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBTZXR0aW5nc09iai5jaGVja2JveFN0YXRlID0gXCJ0cnVlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1NldHRpbmdzJywgSlNPTi5zdHJpbmdpZnkoU2V0dGluZ3NPYmopKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhTZXR0aW5nc09iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5jZW50ZXJlZF9mb3JtXCIpLnNob3coKS5jc3MoJ2Rpc3BsYXknLCAnZmxleCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5jZW50ZXJlZF9mb3JtXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBTZXR0aW5nc09iai5jaGVja2JveFN0YXRlID0gXCJmYWxzZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIuYWRkaXRpb25hbF9zZXR0aW5nc1wiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1NldHRpbmdzJywgSlNPTi5zdHJpbmdpZnkoU2V0dGluZ3NPYmopKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkKFwiI1VzZXJPcHRpb25cIikub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHsgLy9jaG9vc2UgdXNlciBvcHRpb25cclxuICAgICAgICAgICAgICAgIFNldHRpbmdzT2JqLlVzZXJPcHRpb24gPSBcInRydWVcIjtcclxuICAgICAgICAgICAgICAgIFNldHRpbmdzT2JqLmRlZmF1bHRPcHRpb24gPSBcImZhbHNlXCI7XHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIlNldHRpbmdzXCIsIEpTT04uc3RyaW5naWZ5KFNldHRpbmdzT2JqKSk7XHJcbiAgICAgICAgICAgICAgICAkKFwiLmFkZGl0aW9uYWxfc2V0dGluZ3NcIikuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGljb25fY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpY29uVGVzdFwiKTtcclxuICAgICAgICAgICAgICAgICQoXCIjaWNvblRlc3RcIikuYXR0cihcImRhdGFcIiwgZ2V0U2V0dGluZ0Zyb21TdG9yYWdlKFwiU3RhcnRJY29uXCIpKTtcclxuICAgICAgICAgICAgICAgIGxvYWRJY29uKGljb25fY29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJChcIiNkZWZhdWx0T3B0aW9uXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7IC8vY2hvb3NlIGRlZmF1bHQgb3B0aW9uXHJcbiAgICAgICAgICAgICAgICBTZXR0aW5nc09iai5Vc2VyT3B0aW9uID0gXCJmYWxzZVwiO1xyXG4gICAgICAgICAgICAgICAgU2V0dGluZ3NPYmouZGVmYXVsdE9wdGlvbiA9IFwidHJ1ZVwiO1xyXG5cclxuICAgICAgICAgICAgICAgIFNldHRpbmdzT2JqLlN0YXJ0SWNvbiA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIlN0YXJ0Um91dGVJY29uXCIsIEpTT04uc3RyaW5naWZ5KFtdKSk7XHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIlNldHRpbmdzXCIsIEpTT04uc3RyaW5naWZ5KFNldHRpbmdzT2JqKSk7XHJcbiAgICAgICAgICAgICAgICAkKFwiLmFkZGl0aW9uYWxfc2V0dGluZ3NcIikuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkKFwiLmljb25fZ2FsbGVyeV9faXRlbVwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCkgeyAvL2Nob29zZSBpY29uIG9mIFJvdXRlIFN0YXJ0XHJcbiAgICAgICAgICAgICAgICB2YXIgaWNvblNSQyA9ICQodGhpcykuYXR0cihcInNyY1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGljb25TUkMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGljb25fY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpY29uVGVzdFwiKTtcclxuICAgICAgICAgICAgICAgICQoXCIjaWNvblRlc3RcIikuYXR0cihcImRhdGFcIiwgaWNvblNSQyk7XHJcbiAgICAgICAgICAgICAgICBsb2FkSWNvbihpY29uX2NvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICBTZXR0aW5nc09iai5TdGFydEljb24gPSBpY29uU1JDO1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJTZXR0aW5nc1wiLCBKU09OLnN0cmluZ2lmeShTZXR0aW5nc09iaikpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvYWRJY29uKGljb25fY29udGFpbmVyKSB7IC8vIGxvYWQgaWNvbiB0byBzaG93IGV4YW1wbGVcclxuICAgICAgICAgICAgICAgIGljb25fY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdmdEb2MgPSBpY29uX2NvbnRhaW5lci5jb250ZW50RG9jdW1lbnQ7IC8vZ2V0IHRoZSBpbm5lciBET00gb2YgYWxwaGEuc3ZnXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN2Z1Jvb3QgPSBzdmdEb2MuZG9jdW1lbnRFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXRocyA9IHN2Z1Jvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXRoXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IFhNTFNlcmlhbGl6ZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGljb25PYmogPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImljb25UZXN0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWNvblBhdGhzQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhzW2ldLnN0eWxlLmZpbGwgPSBTZXR0aW5nc09iai5Sb3V0ZVN0YXJ0SWNvbkNvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aERpciA9IHMuc2VyaWFsaXplVG9TdHJpbmcocGF0aHNbaV0pOyAvL2NvbnZlcnQgaHRtbCBlbGVtZW50IHRvIHN0cmluZyB3aXRoIFhNTFNlcmlhbGl6ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocGF0aERpcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25QYXRoc0FycmF5LnB1c2gocGF0aERpcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpY29uUGF0aHNBcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJTdGFydFJvdXRlSWNvblwiLCBKU09OLnN0cmluZ2lmeShpY29uUGF0aHNBcnJheSkpOyAvLyBzYXZlIHJvdXRlIHN0YXJ0IGljb24gdG8gbG9jYWxzdG9yYWdlIHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgJChcImlucHV0W25hbWU9Um91dGVTdGFydEljb25Db2xvcl1cIikuY2hhbmdlKGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25TZWxlY3RlZCA9ICQoXCJvcHRpb246c2VsZWN0ZWRcIiwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZVNlbGVjdGVkID0gdGhpcy52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gdGhpcy5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgU2V0dGluZ3NPYmpbbmFtZV0gPSB2YWx1ZVNlbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoc1tpXS5zdHlsZS5maWxsID0gU2V0dGluZ3NPYmouUm91dGVTdGFydEljb25Db2xvcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJTZXR0aW5nc1wiLCBKU09OLnN0cmluZ2lmeShTZXR0aW5nc09iaikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhTZXR0aW5nc09iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoXCJpbnB1dFtuYW1lID0gUm91dGVTdGFydEljb25TaXplXVwiKS5jaGFuZ2UoZnVuY3Rpb24oKSB7IC8vIHVzZXIgY2hvaWNlIG9mIHJvdXRlIHN0YXJ0IGljb24gc2l6ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uU2VsZWN0ZWQgPSAkKFwib3B0aW9uOnNlbGVjdGVkXCIsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVTZWxlY3RlZCA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gdGhpcy5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZXR0aW5nc09ialtuYW1lXSA9IHZhbHVlU2VsZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjaWNvblRlc3RcIikuYXR0cih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogU2V0dGluZ3NPYmouUm91dGVTdGFydEljb25TaXplLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBTZXR0aW5nc09iai5Sb3V0ZVN0YXJ0SWNvblNpemVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Z1Jvb3Quc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgJChpY29uT2JqKS5hdHRyKFwid2lkdGhcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdmdSb290LnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCAkKGljb25PYmopLmF0dHIoXCJoZWlnaHRcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdmdSb290KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coU2V0dGluZ3NPYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHZhciBzYXZlZE1hcCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21hcCcpKSB8fCBbXTsgLy8gZ2V0IG1hcCBmcm9tIGxzIGlmIGl0IGV4aXN0c1xyXG5cclxuICAgIGlmIChzYXZlZE1hcCkge1xyXG4gICAgICAgIHZhciBzdmdNYXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRhdGFNYXBcIik7XHJcbiAgICAgICAgJChcIiNkYXRhTWFwXCIpLmF0dHIoXCJkYXRhXCIsIHNhdmVkTWFwKTtcclxuICAgICAgICBsb2FkTWFwKHN2Z01hcCk7IC8vIGxvYWQgbWFwIGlmIGl0J3Mgc2F2ZWQgaW4gbG9jYWxzdG9yYWdlXHJcblxyXG4gICAgICAgIHZhciBXcmFwcGVyUHJvcHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtYXBTdHlsZVByb3BlcnRpZXMnKSkgfHwgW107XHJcbiAgICAgICAgdmFyIG1hcEJnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYXBiZ1wiKTtcclxuXHJcbiAgICAgICAgaWYgKFdyYXBwZXJQcm9wcykge1xyXG4gICAgICAgICAgICAkLmVhY2goV3JhcHBlclByb3BzLCBmdW5jdGlvbihwcm9wLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgJChcIiNtYXBfYmdcIikuY3NzKHByb3AsIHZhbHVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuXHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHJcbiAgJCgnLmRyb3Bkb3duLWJ1dHRvbicpLmRyb3Bkb3duKHtcclxuICAgICAgaW5EdXJhdGlvbjogMzAwLFxyXG4gICAgICBvdXREdXJhdGlvbjogMjI1LFxyXG4gICAgICBjb25zdHJhaW5XaWR0aDogZmFsc2UsIC8vIERvZXMgbm90IGNoYW5nZSB3aWR0aCBvZiBkcm9wZG93biB0byB0aGF0IG9mIHRoZSBhY3RpdmF0b3JcclxuICAgICAgaG92ZXI6IHRydWUsIC8vIEFjdGl2YXRlIG9uIGhvdmVyXHJcbiAgICAgIGd1dHRlcjogMCwgLy8gU3BhY2luZyBmcm9tIGVkZ2VcclxuICAgICAgYmVsb3dPcmlnaW46IGZhbHNlLCAvLyBEaXNwbGF5cyBkcm9wZG93biBiZWxvdyB0aGUgYnV0dG9uXHJcbiAgICAgIGFsaWdubWVudDogJ2xlZnQnLCAvLyBEaXNwbGF5cyBkcm9wZG93biB3aXRoIGVkZ2UgYWxpZ25lZCB0byB0aGUgbGVmdCBvZiBidXR0b25cclxuICAgICAgc3RvcFByb3BhZ2F0aW9uOiBmYWxzZSAvLyBTdG9wcyBldmVudCBwcm9wYWdhdGlvblxyXG4gICAgfVxyXG4gICk7XHJcblxyXG4gICAgJCgnLmNoaXBzJykubWF0ZXJpYWxfY2hpcCgpO1xyXG5cclxuICAgICQoJy5jaGlwcy1hdXRvY29tcGxldGUnKS5tYXRlcmlhbF9jaGlwKHtcclxuICAgICAgICBhdXRvY29tcGxldGVPcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICdBcHBsZSc6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAnTWljcm9zb2Z0JzogbnVsbCxcclxuICAgICAgICAgICAgICAgICdHb29nbGUnOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgJ1RyYXZlbCc6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAnVmFjYXRpb24nOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgJ1N0b3J5dGVsbGluZyBtYXAnOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgJ2tlayc6IG51bGxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGltaXQ6IEluZmluaXR5LFxyXG4gICAgICAgICAgICBtaW5MZW5ndGg6IDFcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBNYXRlcmlhbGl6ZS51cGRhdGVUZXh0RmllbGRzKCk7XHJcblxyXG4gICAgJChcIiNtZW51XCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKCcuYWN0aXZlJykpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgJCgnLnRhcC10YXJnZXQnKS50YXBUYXJnZXQoJ29wZW4nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAkKCcudGFwLXRhcmdldCcpLnRhcFRhcmdldCgnY2xvc2UnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgICQoXCIuc2xpZGVfYnRuXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoXCJhY3RpdmVcIikpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgY2xvc2VTaWRlTmF2KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGRhdGFBdHRyaWJ1dGUgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLWV4ZWN1dGVcIik7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGFBdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICAkKFwiLnNsaWRlX2J0blwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgJChcIi5zZXR0aW5nX29wdGlvblwiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICQoXCIjXCIgKyBkYXRhQXR0cmlidXRlKS5zaG93KCk7XHJcbiAgICAgICAgICAgIG9wZW5TaWRlTmF2KGRhdGFBdHRyaWJ1dGUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIG9wZW5TaWRlTmF2KGFjdGlvbikge1xyXG5cclxuICAgICAgICB2YXIgcHJvamVjdEluZm8gPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiUHJvamVjdEluZm9cIikpIHx8IHtcclxuICAgICAgICAgICAgcHJvamVjdE5hbWU6IFwiXCIsXHJcbiAgICAgICAgICAgIHByb2plY3REZXNjcmlwdGlvbjogXCJcIixcclxuICAgICAgICAgICAgdGFnczogW11cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciB0YWdzQXJyYXkgPSBwcm9qZWN0SW5mby50YWdzIHx8IFtdO1xyXG5cclxuICAgICAgICB2YXIgY2hpcCA9IHtcclxuICAgICAgICAgICAgdGFnOiAnJyxcclxuICAgICAgICAgICAgaWQ6IDFcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkKCcuY2hpcHMnKS5vbignY2hpcC5hZGQnLCBmdW5jdGlvbihlLCBjaGlwKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9qZWN0SW5mbyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJQcm9qZWN0SW5mb1wiKSkgfHwge307XHJcbiAgICAgICAgICAgIC8vIHlvdSBoYXZlIHRoZSBhZGRlZCBjaGlwIGhlcmVcclxuICAgICAgICAgICAgdmFyIGNvdW50ID0gdGFnc0FycmF5Lmxlbmd0aCArIDE7XHJcbiAgICAgICAgICAgIGNoaXAuaWQgPSBjb3VudFxyXG4gICAgICAgICAgICB0YWdzQXJyYXkucHVzaChjaGlwKTtcclxuICAgICAgICAgICAgcHJvamVjdEluZm8udGFncyA9IHRhZ3NBcnJheTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJQcm9qZWN0SW5mb1wiLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0SW5mbykpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0YWdzQXJyYXksIGNvdW50KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnLmNoaXBzJykub24oJ2NoaXAuZGVsZXRlJywgZnVuY3Rpb24oZSwgY2hpcCkge1xyXG4gICAgICAgICAgICAvLyB5b3UgaGF2ZSB0aGUgZGVsZXRlZCBjaGlwIGhlcmVcclxuICAgICAgICAgICAgdmFyIHByb2plY3RJbmZvID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIlByb2plY3RJbmZvXCIpKSB8fCB7fTtcclxuICAgICAgICAgICAgdmFyIHByb2plY3RUYWdzID0gJCgnLmNoaXBzLWF1dG9jb21wbGV0ZScpLm1hdGVyaWFsX2NoaXAoJ2RhdGEnKTtcclxuICAgICAgICAgICAgcHJvamVjdEluZm8udGFncyA9IHByb2plY3RUYWdzO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0VGFncyk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiUHJvamVjdEluZm9cIiwgSlNPTi5zdHJpbmdpZnkocHJvamVjdEluZm8pKTtcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgaWYgKGFjdGlvbiA9PSBcImNob29zZV9tYXBcIikge1xyXG4gICAgICAgICAgICAkKFwiLm1haW4tbWVudVwiKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEyNTBweFwiLFxyXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IFwidmlzaWJsZVwiXHJcbiAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT0gXCJjb2xvcml6ZVwiKSB7XHJcbiAgICAgICAgICAgICQoXCIubWFpbi1tZW51XCIpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiODAwcHhcIixcclxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBcInZpc2libGVcIlxyXG4gICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09IFwicHJvamVjdFwiKSB7XHJcbiAgICAgICAgICAgICQoXCIubWFpbi1tZW51XCIpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiODAwcHhcIixcclxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBcInZpc2libGVcIlxyXG4gICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICBpZiAocHJvamVjdEluZm8pIHtcclxuICAgICAgICAgICAgICAgICQoXCIjcHJvamVjdE5hbWVcIikudmFsKHByb2plY3RJbmZvLnByb2plY3ROYW1lKTtcclxuICAgICAgICAgICAgICAgICQoXCIjcHJvamVjdERlc2NyaXB0aW9uXCIpLnZhbChwcm9qZWN0SW5mby5wcm9qZWN0RGVzY3JpcHRpb24pXHJcbiAgICAgICAgICAgICAgICAkKCcuY2hpcHMtYXV0b2NvbXBsZXRlJykubWF0ZXJpYWxfY2hpcCh7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogcHJvamVjdEluZm8udGFncyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQoXCIjc2F2ZVByb2plY3RCdG5cIikub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwia2VrXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb2plY3RJbmZvID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIlByb2plY3RJbmZvXCIpKTtcclxuICAgICAgICAgICAgICAgIHZhciBOYW1lSW5wdXQgPSAkKFwiI3Byb2plY3ROYW1lXCIpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIERlc2NyaXB0aW9uSW5wdXQgPSAkKFwiI3Byb2plY3REZXNjcmlwdGlvblwiKS52YWwoKTtcclxuICAgICAgICAgICAgICAgIGlmIChOYW1lSW5wdXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RJbmZvLnByb2plY3ROYW1lID0gTmFtZUlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RJbmZvLnByb2plY3REZXNjcmlwdGlvbiA9IERlc2NyaXB0aW9uSW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdEluZm8udGFncyA9ICQoJy5jaGlwcy1hdXRvY29tcGxldGUnKS5tYXRlcmlhbF9jaGlwKFwiZGF0YVwiKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdEluZm8ucHJvamVjdE5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RJbmZvLnByb2plY3REZXNjcmlwdGlvbiA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdEluZm8udGFncyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocHJvamVjdEluZm8pO1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJQcm9qZWN0SW5mb1wiLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0SW5mbykpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5zbGlkZV9idG4uYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5tYWluLW1lbnVcIikuYW5pbWF0ZSh7d2lkdGg6IDB9LCAxMDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PSBcImRpc3BsYWNlbWVudFwiKSB7XHJcbiAgICAgICAgICAgICQoXCIubWFpbi1tZW51XCIpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwcHhcIixcclxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBcInZpc2libGVcIlxyXG4gICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09IFwicGVuXCIpIHtcclxuICAgICAgICAgICAgTWF0ZXJpYWxpemUudG9hc3QoXCJEcmF3IHBhdGggYW5kIHBvaW50cyFcIiwgMzAwMCk7XHJcbiAgICAgICAgICAgICQoXCIubWFpbi1tZW51XCIpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMHB4XCIsXHJcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIlxyXG4gICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09IFwiaW5mb1wiKSB7XHJcbiAgICAgICAgICAgICQoXCIubWFpbi1tZW51XCIpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNTAwcHhcIixcclxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBcInZpc2libGVcIlxyXG4gICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09IFwic3RlcFwiKSB7XHJcbiAgICAgICAgICAgICQoXCIubWFpbi1tZW51XCIpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNzBweFwiLFxyXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IFwidmlzaWJsZVwiXHJcbiAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE1hdGVyaWFsaXplLnVwZGF0ZVRleHRGaWVsZHMoKTtcclxuICAgIH1cclxuICAgICQoXCIjY2xvc2Vfc2lkZWJhclwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgY2xvc2VTaWRlTmF2KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBjbG9zZVNpZGVOYXYoKSB7XHJcbiAgICAgICAgJChcIi5tYWluLW1lbnVcIikuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgIHdpZHRoOiBcIjBweFwiLFxyXG4gICAgICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIlxyXG4gICAgICAgIH0sIDEwMCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFllYXIoZGF0ZSkge1xyXG4gICAgICB2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgICAgaWYgKHllYXIgPCAxMCkgeWVhciA9ICcwJyArIHllYXI7XHJcblxyXG4gICAgICByZXR1cm4geWVhcjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZCA9IG5ldyBEYXRlKCk7XHJcbiAgICAkKCcjY3VycmVudF95ZWFyJykudGV4dChnZXRZZWFyKGQpKTtcclxuXHJcbn0pOyJdfQ==
